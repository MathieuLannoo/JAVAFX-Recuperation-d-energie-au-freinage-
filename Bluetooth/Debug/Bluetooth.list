
Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074bc  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08007600  08007600  00017600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a64  08007a64  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007a64  08007a64  00017a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a6c  08007a6c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a6c  08007a6c  00017a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a70  08007a70  00017a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200001e0  08007c54  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08007c54  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db7a  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002147  00000000  00000000  0002dd83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  0002fed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00030b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017da5  00000000  00000000  00031768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd09  00000000  00000000  0004950d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009477b  00000000  00000000  00056216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea991  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000463c  00000000  00000000  000ea9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	080075e4 	.word	0x080075e4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	080075e4 	.word	0x080075e4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_uldivmod>:
 8000ab8:	b953      	cbnz	r3, 8000ad0 <__aeabi_uldivmod+0x18>
 8000aba:	b94a      	cbnz	r2, 8000ad0 <__aeabi_uldivmod+0x18>
 8000abc:	2900      	cmp	r1, #0
 8000abe:	bf08      	it	eq
 8000ac0:	2800      	cmpeq	r0, #0
 8000ac2:	bf1c      	itt	ne
 8000ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8000acc:	f000 b96e 	b.w	8000dac <__aeabi_idiv0>
 8000ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad8:	f000 f806 	bl	8000ae8 <__udivmoddi4>
 8000adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae4:	b004      	add	sp, #16
 8000ae6:	4770      	bx	lr

08000ae8 <__udivmoddi4>:
 8000ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aec:	9e08      	ldr	r6, [sp, #32]
 8000aee:	460d      	mov	r5, r1
 8000af0:	4604      	mov	r4, r0
 8000af2:	468e      	mov	lr, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	f040 8083 	bne.w	8000c00 <__udivmoddi4+0x118>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4617      	mov	r7, r2
 8000afe:	d947      	bls.n	8000b90 <__udivmoddi4+0xa8>
 8000b00:	fab2 f382 	clz	r3, r2
 8000b04:	b14b      	cbz	r3, 8000b1a <__udivmoddi4+0x32>
 8000b06:	f1c3 0120 	rsb	r1, r3, #32
 8000b0a:	fa05 fe03 	lsl.w	lr, r5, r3
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	409f      	lsls	r7, r3
 8000b14:	ea41 0e0e 	orr.w	lr, r1, lr
 8000b18:	409c      	lsls	r4, r3
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	fbbe fcf8 	udiv	ip, lr, r8
 8000b22:	fa1f f987 	uxth.w	r9, r7
 8000b26:	fb08 e21c 	mls	r2, r8, ip, lr
 8000b2a:	fb0c f009 	mul.w	r0, ip, r9
 8000b2e:	0c21      	lsrs	r1, r4, #16
 8000b30:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000b34:	4290      	cmp	r0, r2
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x66>
 8000b38:	18ba      	adds	r2, r7, r2
 8000b3a:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000b3e:	f080 8118 	bcs.w	8000d72 <__udivmoddi4+0x28a>
 8000b42:	4290      	cmp	r0, r2
 8000b44:	f240 8115 	bls.w	8000d72 <__udivmoddi4+0x28a>
 8000b48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b4c:	443a      	add	r2, r7
 8000b4e:	1a12      	subs	r2, r2, r0
 8000b50:	fbb2 f0f8 	udiv	r0, r2, r8
 8000b54:	fb08 2210 	mls	r2, r8, r0, r2
 8000b58:	fb00 f109 	mul.w	r1, r0, r9
 8000b5c:	b2a4      	uxth	r4, r4
 8000b5e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b62:	42a1      	cmp	r1, r4
 8000b64:	d909      	bls.n	8000b7a <__udivmoddi4+0x92>
 8000b66:	193c      	adds	r4, r7, r4
 8000b68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b6c:	f080 8103 	bcs.w	8000d76 <__udivmoddi4+0x28e>
 8000b70:	42a1      	cmp	r1, r4
 8000b72:	f240 8100 	bls.w	8000d76 <__udivmoddi4+0x28e>
 8000b76:	3802      	subs	r0, #2
 8000b78:	443c      	add	r4, r7
 8000b7a:	1a64      	subs	r4, r4, r1
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b82:	b11e      	cbz	r6, 8000b8c <__udivmoddi4+0xa4>
 8000b84:	2200      	movs	r2, #0
 8000b86:	40dc      	lsrs	r4, r3
 8000b88:	e9c6 4200 	strd	r4, r2, [r6]
 8000b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b90:	b902      	cbnz	r2, 8000b94 <__udivmoddi4+0xac>
 8000b92:	deff      	udf	#255	; 0xff
 8000b94:	fab2 f382 	clz	r3, r2
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d14f      	bne.n	8000c3c <__udivmoddi4+0x154>
 8000b9c:	1a8d      	subs	r5, r1, r2
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ba4:	fa1f f882 	uxth.w	r8, r2
 8000ba8:	fbb5 fcfe 	udiv	ip, r5, lr
 8000bac:	fb0e 551c 	mls	r5, lr, ip, r5
 8000bb0:	fb08 f00c 	mul.w	r0, r8, ip
 8000bb4:	0c22      	lsrs	r2, r4, #16
 8000bb6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000bba:	42a8      	cmp	r0, r5
 8000bbc:	d907      	bls.n	8000bce <__udivmoddi4+0xe6>
 8000bbe:	197d      	adds	r5, r7, r5
 8000bc0:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000bc4:	d202      	bcs.n	8000bcc <__udivmoddi4+0xe4>
 8000bc6:	42a8      	cmp	r0, r5
 8000bc8:	f200 80e9 	bhi.w	8000d9e <__udivmoddi4+0x2b6>
 8000bcc:	4694      	mov	ip, r2
 8000bce:	1a2d      	subs	r5, r5, r0
 8000bd0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000bd4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000bd8:	fb08 f800 	mul.w	r8, r8, r0
 8000bdc:	b2a4      	uxth	r4, r4
 8000bde:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000be2:	45a0      	cmp	r8, r4
 8000be4:	d907      	bls.n	8000bf6 <__udivmoddi4+0x10e>
 8000be6:	193c      	adds	r4, r7, r4
 8000be8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bec:	d202      	bcs.n	8000bf4 <__udivmoddi4+0x10c>
 8000bee:	45a0      	cmp	r8, r4
 8000bf0:	f200 80d9 	bhi.w	8000da6 <__udivmoddi4+0x2be>
 8000bf4:	4610      	mov	r0, r2
 8000bf6:	eba4 0408 	sub.w	r4, r4, r8
 8000bfa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bfe:	e7c0      	b.n	8000b82 <__udivmoddi4+0x9a>
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x12e>
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	f000 80b1 	beq.w	8000d6c <__udivmoddi4+0x284>
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	e9c6 0500 	strd	r0, r5, [r6]
 8000c10:	4608      	mov	r0, r1
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	fab3 f183 	clz	r1, r3
 8000c1a:	2900      	cmp	r1, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0x1ce>
 8000c1e:	42ab      	cmp	r3, r5
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0x140>
 8000c22:	4282      	cmp	r2, r0
 8000c24:	f200 80b9 	bhi.w	8000d9a <__udivmoddi4+0x2b2>
 8000c28:	1a84      	subs	r4, r0, r2
 8000c2a:	eb65 0303 	sbc.w	r3, r5, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	469e      	mov	lr, r3
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	d0aa      	beq.n	8000b8c <__udivmoddi4+0xa4>
 8000c36:	e9c6 4e00 	strd	r4, lr, [r6]
 8000c3a:	e7a7      	b.n	8000b8c <__udivmoddi4+0xa4>
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	f1c3 0220 	rsb	r2, r3, #32
 8000c42:	40d1      	lsrs	r1, r2
 8000c44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c48:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c54:	fa24 f202 	lsr.w	r2, r4, r2
 8000c58:	409d      	lsls	r5, r3
 8000c5a:	fb00 fc08 	mul.w	ip, r0, r8
 8000c5e:	432a      	orrs	r2, r5
 8000c60:	0c15      	lsrs	r5, r2, #16
 8000c62:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000c66:	45ac      	cmp	ip, r5
 8000c68:	fa04 f403 	lsl.w	r4, r4, r3
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0x19a>
 8000c6e:	197d      	adds	r5, r7, r5
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c74:	f080 808f 	bcs.w	8000d96 <__udivmoddi4+0x2ae>
 8000c78:	45ac      	cmp	ip, r5
 8000c7a:	f240 808c 	bls.w	8000d96 <__udivmoddi4+0x2ae>
 8000c7e:	3802      	subs	r0, #2
 8000c80:	443d      	add	r5, r7
 8000c82:	eba5 050c 	sub.w	r5, r5, ip
 8000c86:	fbb5 f1fe 	udiv	r1, r5, lr
 8000c8a:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000c8e:	fb01 f908 	mul.w	r9, r1, r8
 8000c92:	b295      	uxth	r5, r2
 8000c94:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c98:	45a9      	cmp	r9, r5
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x1c4>
 8000c9c:	197d      	adds	r5, r7, r5
 8000c9e:	f101 32ff 	add.w	r2, r1, #4294967295
 8000ca2:	d274      	bcs.n	8000d8e <__udivmoddi4+0x2a6>
 8000ca4:	45a9      	cmp	r9, r5
 8000ca6:	d972      	bls.n	8000d8e <__udivmoddi4+0x2a6>
 8000ca8:	3902      	subs	r1, #2
 8000caa:	443d      	add	r5, r7
 8000cac:	eba5 0509 	sub.w	r5, r5, r9
 8000cb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb4:	e778      	b.n	8000ba8 <__udivmoddi4+0xc0>
 8000cb6:	f1c1 0720 	rsb	r7, r1, #32
 8000cba:	408b      	lsls	r3, r1
 8000cbc:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cc0:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cc4:	fa25 f407 	lsr.w	r4, r5, r7
 8000cc8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ccc:	fbb4 f9fe 	udiv	r9, r4, lr
 8000cd0:	fa1f f88c 	uxth.w	r8, ip
 8000cd4:	fb0e 4419 	mls	r4, lr, r9, r4
 8000cd8:	fa20 f307 	lsr.w	r3, r0, r7
 8000cdc:	fb09 fa08 	mul.w	sl, r9, r8
 8000ce0:	408d      	lsls	r5, r1
 8000ce2:	431d      	orrs	r5, r3
 8000ce4:	0c2b      	lsrs	r3, r5, #16
 8000ce6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cea:	45a2      	cmp	sl, r4
 8000cec:	fa02 f201 	lsl.w	r2, r2, r1
 8000cf0:	fa00 f301 	lsl.w	r3, r0, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x222>
 8000cf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfa:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cfe:	d248      	bcs.n	8000d92 <__udivmoddi4+0x2aa>
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d946      	bls.n	8000d92 <__udivmoddi4+0x2aa>
 8000d04:	f1a9 0902 	sub.w	r9, r9, #2
 8000d08:	4464      	add	r4, ip
 8000d0a:	eba4 040a 	sub.w	r4, r4, sl
 8000d0e:	fbb4 f0fe 	udiv	r0, r4, lr
 8000d12:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d16:	fb00 fa08 	mul.w	sl, r0, r8
 8000d1a:	b2ad      	uxth	r5, r5
 8000d1c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d20:	45a2      	cmp	sl, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x24e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d2c:	d22d      	bcs.n	8000d8a <__udivmoddi4+0x2a2>
 8000d2e:	45a2      	cmp	sl, r4
 8000d30:	d92b      	bls.n	8000d8a <__udivmoddi4+0x2a2>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4464      	add	r4, ip
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3e:	eba4 040a 	sub.w	r4, r4, sl
 8000d42:	454c      	cmp	r4, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	464d      	mov	r5, r9
 8000d48:	d319      	bcc.n	8000d7e <__udivmoddi4+0x296>
 8000d4a:	d016      	beq.n	8000d7a <__udivmoddi4+0x292>
 8000d4c:	b15e      	cbz	r6, 8000d66 <__udivmoddi4+0x27e>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb64 0405 	sbc.w	r4, r4, r5
 8000d56:	fa04 f707 	lsl.w	r7, r4, r7
 8000d5a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	40cc      	lsrs	r4, r1
 8000d62:	e9c6 7400 	strd	r7, r4, [r6]
 8000d66:	2100      	movs	r1, #0
 8000d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	4630      	mov	r0, r6
 8000d70:	e70c      	b.n	8000b8c <__udivmoddi4+0xa4>
 8000d72:	468c      	mov	ip, r1
 8000d74:	e6eb      	b.n	8000b4e <__udivmoddi4+0x66>
 8000d76:	4610      	mov	r0, r2
 8000d78:	e6ff      	b.n	8000b7a <__udivmoddi4+0x92>
 8000d7a:	4543      	cmp	r3, r8
 8000d7c:	d2e6      	bcs.n	8000d4c <__udivmoddi4+0x264>
 8000d7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d82:	eb69 050c 	sbc.w	r5, r9, ip
 8000d86:	3801      	subs	r0, #1
 8000d88:	e7e0      	b.n	8000d4c <__udivmoddi4+0x264>
 8000d8a:	4628      	mov	r0, r5
 8000d8c:	e7d3      	b.n	8000d36 <__udivmoddi4+0x24e>
 8000d8e:	4611      	mov	r1, r2
 8000d90:	e78c      	b.n	8000cac <__udivmoddi4+0x1c4>
 8000d92:	4681      	mov	r9, r0
 8000d94:	e7b9      	b.n	8000d0a <__udivmoddi4+0x222>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e773      	b.n	8000c82 <__udivmoddi4+0x19a>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e749      	b.n	8000c32 <__udivmoddi4+0x14a>
 8000d9e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da2:	443d      	add	r5, r7
 8000da4:	e713      	b.n	8000bce <__udivmoddi4+0xe6>
 8000da6:	3802      	subs	r0, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	e724      	b.n	8000bf6 <__udivmoddi4+0x10e>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <Test_connection>:
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_ADC_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void Test_connection(void){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	state = HAL_GPIO_ReadPin(BLUETOOTH_STATE_GPIO_Port, BLUETOOTH_STATE_Pin);
 8000db4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db8:	4813      	ldr	r0, [pc, #76]	; (8000e08 <Test_connection+0x58>)
 8000dba:	f001 fc85 	bl	80026c8 <HAL_GPIO_ReadPin>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <Test_connection+0x5c>)
 8000dc4:	701a      	strb	r2, [r3, #0]
	if(state == 0){
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <Test_connection+0x5c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d103      	bne.n	8000dd6 <Test_connection+0x26>
		print_now = "NO CONNECTION";
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <Test_connection+0x60>)
 8000dd0:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <Test_connection+0x64>)
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	e006      	b.n	8000de4 <Test_connection+0x34>
	}
	else if(state == 1){
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <Test_connection+0x5c>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d102      	bne.n	8000de4 <Test_connection+0x34>
		print_now = "CONNECTED";
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <Test_connection+0x60>)
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <Test_connection+0x68>)
 8000de2:	601a      	str	r2, [r3, #0]


	}
	if (print_now != print_old){
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <Test_connection+0x60>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <Test_connection+0x6c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d009      	beq.n	8000e04 <Test_connection+0x54>
		printf("%s\r\n\n", print_now);
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <Test_connection+0x60>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	480a      	ldr	r0, [pc, #40]	; (8000e20 <Test_connection+0x70>)
 8000df8:	f004 fa4c 	bl	8005294 <iprintf>
		print_old = print_now;
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <Test_connection+0x60>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <Test_connection+0x6c>)
 8000e02:	6013      	str	r3, [r2, #0]
	}
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	200002c0 	.word	0x200002c0
 8000e14:	08007600 	.word	0x08007600
 8000e18:	08007610 	.word	0x08007610
 8000e1c:	20000308 	.word	0x20000308
 8000e20:	0800761c 	.word	0x0800761c

08000e24 <conversion_char_int>:
void conversion_char_int()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	for(buff = 0; buff<strlen(command_sent);++buff){
 8000e28:	4b30      	ldr	r3, [pc, #192]	; (8000eec <conversion_char_int+0xc8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	e020      	b.n	8000e72 <conversion_char_int+0x4e>
				if(command_sent[buff]=='|' && born1 != 0){
 8000e30:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <conversion_char_int+0xc8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a2e      	ldr	r2, [pc, #184]	; (8000ef0 <conversion_char_int+0xcc>)
 8000e36:	5cd3      	ldrb	r3, [r2, r3]
 8000e38:	2b7c      	cmp	r3, #124	; 0x7c
 8000e3a:	d107      	bne.n	8000e4c <conversion_char_int+0x28>
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <conversion_char_int+0xd0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <conversion_char_int+0x28>
					born2 = buff;
 8000e44:	4b29      	ldr	r3, [pc, #164]	; (8000eec <conversion_char_int+0xc8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a2b      	ldr	r2, [pc, #172]	; (8000ef8 <conversion_char_int+0xd4>)
 8000e4a:	6013      	str	r3, [r2, #0]
				}
				if(command_sent[buff]=='|' && born1 == 0){
 8000e4c:	4b27      	ldr	r3, [pc, #156]	; (8000eec <conversion_char_int+0xc8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a27      	ldr	r2, [pc, #156]	; (8000ef0 <conversion_char_int+0xcc>)
 8000e52:	5cd3      	ldrb	r3, [r2, r3]
 8000e54:	2b7c      	cmp	r3, #124	; 0x7c
 8000e56:	d107      	bne.n	8000e68 <conversion_char_int+0x44>
 8000e58:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <conversion_char_int+0xd0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d103      	bne.n	8000e68 <conversion_char_int+0x44>
					born1 = buff;
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <conversion_char_int+0xc8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a23      	ldr	r2, [pc, #140]	; (8000ef4 <conversion_char_int+0xd0>)
 8000e66:	6013      	str	r3, [r2, #0]
	for(buff = 0; buff<strlen(command_sent);++buff){
 8000e68:	4b20      	ldr	r3, [pc, #128]	; (8000eec <conversion_char_int+0xc8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <conversion_char_int+0xc8>)
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	481f      	ldr	r0, [pc, #124]	; (8000ef0 <conversion_char_int+0xcc>)
 8000e74:	f7ff f984 	bl	8000180 <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <conversion_char_int+0xc8>)
 8000e7c:	6812      	ldr	r2, [r2, #0]
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d8d6      	bhi.n	8000e30 <conversion_char_int+0xc>
				}
			}
			for(born1=born1+1;born1<born2;++born1){
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <conversion_char_int+0xd0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	4a1a      	ldr	r2, [pc, #104]	; (8000ef4 <conversion_char_int+0xd0>)
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	e00d      	b.n	8000eaa <conversion_char_int+0x86>
				strncat(number_convertion,&command_sent[born1],1);
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <conversion_char_int+0xd0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <conversion_char_int+0xcc>)
 8000e94:	4413      	add	r3, r2
 8000e96:	2201      	movs	r2, #1
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4818      	ldr	r0, [pc, #96]	; (8000efc <conversion_char_int+0xd8>)
 8000e9c:	f004 fa88 	bl	80053b0 <strncat>
			for(born1=born1+1;born1<born2;++born1){
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <conversion_char_int+0xd0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <conversion_char_int+0xd0>)
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <conversion_char_int+0xd0>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <conversion_char_int+0xd4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	dbeb      	blt.n	8000e8e <conversion_char_int+0x6a>
			}
			acceleration_turn_command = atoi(number_convertion);
 8000eb6:	4811      	ldr	r0, [pc, #68]	; (8000efc <conversion_char_int+0xd8>)
 8000eb8:	f003 fd56 	bl	8004968 <atoi>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4a10      	ldr	r2, [pc, #64]	; (8000f00 <conversion_char_int+0xdc>)
 8000ec0:	6013      	str	r3, [r2, #0]
			printf("number = %d\r\n",acceleration_turn_command);
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <conversion_char_int+0xdc>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480e      	ldr	r0, [pc, #56]	; (8000f04 <conversion_char_int+0xe0>)
 8000eca:	f004 f9e3 	bl	8005294 <iprintf>
			born1=0;
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <conversion_char_int+0xd0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
			born2=0;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <conversion_char_int+0xd4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
			command_sent[0] = 0;
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <conversion_char_int+0xcc>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
			number_convertion[0] = 0;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <conversion_char_int+0xd8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000027c 	.word	0x2000027c
 8000ef0:	20000218 	.word	0x20000218
 8000ef4:	20000200 	.word	0x20000200
 8000ef8:	20000204 	.word	0x20000204
 8000efc:	2000030c 	.word	0x2000030c
 8000f00:	20000214 	.word	0x20000214
 8000f04:	08007624 	.word	0x08007624

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0c:	f000 fd9f 	bl	8001a4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f10:	f000 f822 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f14:	f000 f9ea 	bl	80012ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f18:	f000 f9be 	bl	8001298 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f1c:	f000 f992 	bl	8001244 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f20:	f000 f8c0 	bl	80010a4 <MX_TIM2_Init>
  MX_ADC_Init();
 8000f24:	f000 f866 	bl	8000ff4 <MX_ADC_Init>
  MX_TIM3_Init();
 8000f28:	f000 f90a 	bl	8001140 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	printf("Start Program\r\n\n");
 8000f2c:	4806      	ldr	r0, [pc, #24]	; (8000f48 <main+0x40>)
 8000f2e:	f004 fa37 	bl	80053a0 <puts>
	HAL_UART_Receive_IT(&huart1, RX_BUFFER, 1);
 8000f32:	2201      	movs	r2, #1
 8000f34:	4905      	ldr	r1, [pc, #20]	; (8000f4c <main+0x44>)
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <main+0x48>)
 8000f38:	f003 f867 	bl	800400a <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <main+0x4c>)
 8000f3e:	f002 fa0f 	bl	8003360 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Test_connection(); // On vérifie la connexion
 8000f42:	f7ff ff35 	bl	8000db0 <Test_connection>
 8000f46:	e7fc      	b.n	8000f42 <main+0x3a>
 8000f48:	08007634 	.word	0x08007634
 8000f4c:	200001fc 	.word	0x200001fc
 8000f50:	200002c4 	.word	0x200002c4
 8000f54:	20000318 	.word	0x20000318

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b092      	sub	sp, #72	; 0x48
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	2234      	movs	r2, #52	; 0x34
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f003 fd2c 	bl	80049c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <SystemClock_Config+0x98>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000f82:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <SystemClock_Config+0x98>)
 8000f84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f88:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f92:	2310      	movs	r3, #16
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f9e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000fa4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000fa8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 fbd2 	bl	8002758 <HAL_RCC_OscConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fba:	f000 faa1 	bl	8001500 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 feee 	bl	8002db8 <HAL_RCC_ClockConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000fe2:	f000 fa8d 	bl	8001500 <Error_Handler>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3748      	adds	r7, #72	; 0x48
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <MX_ADC_Init+0xa8>)
 8001006:	4a26      	ldr	r2, [pc, #152]	; (80010a0 <MX_ADC_Init+0xac>)
 8001008:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <MX_ADC_Init+0xa8>)
 800100c:	2200      	movs	r2, #0
 800100e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <MX_ADC_Init+0xa8>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <MX_ADC_Init+0xa8>)
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <MX_ADC_Init+0xa8>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <MX_ADC_Init+0xa8>)
 8001024:	2200      	movs	r2, #0
 8001026:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <MX_ADC_Init+0xa8>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800102e:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_ADC_Init+0xa8>)
 8001030:	2200      	movs	r2, #0
 8001032:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <MX_ADC_Init+0xa8>)
 8001036:	2200      	movs	r2, #0
 8001038:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_ADC_Init+0xa8>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_ADC_Init+0xa8>)
 8001044:	2201      	movs	r2, #1
 8001046:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_ADC_Init+0xa8>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_ADC_Init+0xa8>)
 8001052:	2210      	movs	r2, #16
 8001054:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_ADC_Init+0xa8>)
 8001058:	2200      	movs	r2, #0
 800105a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_ADC_Init+0xa8>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <MX_ADC_Init+0xa8>)
 8001066:	f000 fd61 	bl	8001b2c <HAL_ADC_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001070:	f000 fa46 	bl	8001500 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001074:	2304      	movs	r3, #4
 8001076:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001078:	2301      	movs	r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_ADC_Init+0xa8>)
 8001086:	f000 fe97 	bl	8001db8 <HAL_ADC_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001090:	f000 fa36 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000039c 	.word	0x2000039c
 80010a0:	40012400 	.word	0x40012400

080010a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b8:	463b      	mov	r3, r7
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <MX_TIM2_Init+0x98>)
 80010c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500;
 80010c8:	4b1c      	ldr	r3, [pc, #112]	; (800113c <MX_TIM2_Init+0x98>)
 80010ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_TIM2_Init+0x98>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 31999;
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <MX_TIM2_Init+0x98>)
 80010d8:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80010dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_TIM2_Init+0x98>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <MX_TIM2_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010ea:	4814      	ldr	r0, [pc, #80]	; (800113c <MX_TIM2_Init+0x98>)
 80010ec:	f002 f8f8 	bl	80032e0 <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80010f6:	f000 fa03 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4619      	mov	r1, r3
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <MX_TIM2_Init+0x98>)
 8001108:	f002 fb5e 	bl	80037c8 <HAL_TIM_ConfigClockSource>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001112:	f000 f9f5 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <MX_TIM2_Init+0x98>)
 8001124:	f002 fe34 	bl	8003d90 <HAL_TIMEx_MasterConfigSynchronization>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800112e:	f000 f9e7 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000318 	.word	0x20000318

08001140 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115e:	463b      	mov	r3, r7
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800116a:	4b34      	ldr	r3, [pc, #208]	; (800123c <MX_TIM3_Init+0xfc>)
 800116c:	4a34      	ldr	r2, [pc, #208]	; (8001240 <MX_TIM3_Init+0x100>)
 800116e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 8001170:	4b32      	ldr	r3, [pc, #200]	; (800123c <MX_TIM3_Init+0xfc>)
 8001172:	2220      	movs	r2, #32
 8001174:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001176:	4b31      	ldr	r3, [pc, #196]	; (800123c <MX_TIM3_Init+0xfc>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800117c:	4b2f      	ldr	r3, [pc, #188]	; (800123c <MX_TIM3_Init+0xfc>)
 800117e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001182:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001184:	4b2d      	ldr	r3, [pc, #180]	; (800123c <MX_TIM3_Init+0xfc>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118a:	4b2c      	ldr	r3, [pc, #176]	; (800123c <MX_TIM3_Init+0xfc>)
 800118c:	2200      	movs	r2, #0
 800118e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001190:	482a      	ldr	r0, [pc, #168]	; (800123c <MX_TIM3_Init+0xfc>)
 8001192:	f002 f8a5 	bl	80032e0 <HAL_TIM_Base_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800119c:	f000 f9b0 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	4619      	mov	r1, r3
 80011ac:	4823      	ldr	r0, [pc, #140]	; (800123c <MX_TIM3_Init+0xfc>)
 80011ae:	f002 fb0b 	bl	80037c8 <HAL_TIM_ConfigClockSource>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80011b8:	f000 f9a2 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011bc:	481f      	ldr	r0, [pc, #124]	; (800123c <MX_TIM3_Init+0xfc>)
 80011be:	f002 f921 	bl	8003404 <HAL_TIM_PWM_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011c8:	f000 f99a 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	4619      	mov	r1, r3
 80011da:	4818      	ldr	r0, [pc, #96]	; (800123c <MX_TIM3_Init+0xfc>)
 80011dc:	f002 fdd8 	bl	8003d90 <HAL_TIMEx_MasterConfigSynchronization>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80011e6:	f000 f98b 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ea:	2360      	movs	r3, #96	; 0x60
 80011ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	2200      	movs	r2, #0
 8001200:	4619      	mov	r1, r3
 8001202:	480e      	ldr	r0, [pc, #56]	; (800123c <MX_TIM3_Init+0xfc>)
 8001204:	f002 fa22 	bl	800364c <HAL_TIM_PWM_ConfigChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800120e:	f000 f977 	bl	8001500 <Error_Handler>
  }
  sConfigOC.Pulse = 550;
 8001212:	f240 2326 	movw	r3, #550	; 0x226
 8001216:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001218:	463b      	mov	r3, r7
 800121a:	2204      	movs	r2, #4
 800121c:	4619      	mov	r1, r3
 800121e:	4807      	ldr	r0, [pc, #28]	; (800123c <MX_TIM3_Init+0xfc>)
 8001220:	f002 fa14 	bl	800364c <HAL_TIM_PWM_ConfigChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800122a:	f000 f969 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800122e:	4803      	ldr	r0, [pc, #12]	; (800123c <MX_TIM3_Init+0xfc>)
 8001230:	f000 fa14 	bl	800165c <HAL_TIM_MspPostInit>

}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000280 	.word	0x20000280
 8001240:	40000400 	.word	0x40000400

08001244 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <MX_USART1_UART_Init+0x50>)
 800124c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 8001250:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001254:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 800127c:	f002 fde6 	bl	8003e4c <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001286:	f000 f93b 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200002c4 	.word	0x200002c4
 8001294:	40013800 	.word	0x40013800

08001298 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <MX_USART2_UART_Init+0x50>)
 80012a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012d0:	f002 fdbc 	bl	8003e4c <HAL_UART_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012da:	f000 f911 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000358 	.word	0x20000358
 80012e8:	40004400 	.word	0x40004400

080012ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	4b45      	ldr	r3, [pc, #276]	; (8001418 <MX_GPIO_Init+0x12c>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4a44      	ldr	r2, [pc, #272]	; (8001418 <MX_GPIO_Init+0x12c>)
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	61d3      	str	r3, [r2, #28]
 800130e:	4b42      	ldr	r3, [pc, #264]	; (8001418 <MX_GPIO_Init+0x12c>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800131a:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <MX_GPIO_Init+0x12c>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	4a3e      	ldr	r2, [pc, #248]	; (8001418 <MX_GPIO_Init+0x12c>)
 8001320:	f043 0320 	orr.w	r3, r3, #32
 8001324:	61d3      	str	r3, [r2, #28]
 8001326:	4b3c      	ldr	r3, [pc, #240]	; (8001418 <MX_GPIO_Init+0x12c>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	f003 0320 	and.w	r3, r3, #32
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	4b39      	ldr	r3, [pc, #228]	; (8001418 <MX_GPIO_Init+0x12c>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4a38      	ldr	r2, [pc, #224]	; (8001418 <MX_GPIO_Init+0x12c>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	61d3      	str	r3, [r2, #28]
 800133e:	4b36      	ldr	r3, [pc, #216]	; (8001418 <MX_GPIO_Init+0x12c>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	4b33      	ldr	r3, [pc, #204]	; (8001418 <MX_GPIO_Init+0x12c>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a32      	ldr	r2, [pc, #200]	; (8001418 <MX_GPIO_Init+0x12c>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b30      	ldr	r3, [pc, #192]	; (8001418 <MX_GPIO_Init+0x12c>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2120      	movs	r1, #32
 8001366:	482d      	ldr	r0, [pc, #180]	; (800141c <MX_GPIO_Init+0x130>)
 8001368:	f001 f9c5 	bl	80026f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED_ACCES_Pin|RC522_Rst_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f640 0146 	movw	r1, #2118	; 0x846
 8001372:	482b      	ldr	r0, [pc, #172]	; (8001420 <MX_GPIO_Init+0x134>)
 8001374:	f001 f9bf 	bl	80026f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	2140      	movs	r1, #64	; 0x40
 800137c:	4829      	ldr	r0, [pc, #164]	; (8001424 <MX_GPIO_Init+0x138>)
 800137e:	f001 f9ba 	bl	80026f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001388:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800138c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	4822      	ldr	r0, [pc, #136]	; (8001424 <MX_GPIO_Init+0x138>)
 800139a:	f001 f805 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800139e:	2320      	movs	r3, #32
 80013a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4819      	ldr	r0, [pc, #100]	; (800141c <MX_GPIO_Init+0x130>)
 80013b6:	f000 fff7 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED_ACCES_Pin RC522_Rst_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED_ACCES_Pin|RC522_Rst_Pin;
 80013ba:	f640 0346 	movw	r3, #2118	; 0x846
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	4813      	ldr	r0, [pc, #76]	; (8001420 <MX_GPIO_Init+0x134>)
 80013d4:	f000 ffe8 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RC522_CS_Pin */
  GPIO_InitStruct.Pin = RC522_CS_Pin;
 80013d8:	2340      	movs	r3, #64	; 0x40
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013dc:	2301      	movs	r3, #1
 80013de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RC522_CS_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	480d      	ldr	r0, [pc, #52]	; (8001424 <MX_GPIO_Init+0x138>)
 80013f0:	f000 ffda 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_STATE_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_STATE_Pin;
 80013f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_STATE_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_GPIO_Init+0x130>)
 800140a:	f000 ffcd 	bl	80023a8 <HAL_GPIO_Init>

}
 800140e:	bf00      	nop
 8001410:	3728      	adds	r7, #40	; 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000
 8001420:	40020400 	.word	0x40020400
 8001424:	40020800 	.word	0x40020800

08001428 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2 ) // si on est dans le timer 2
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d114      	bne.n	8001462 <HAL_TIM_PeriodElapsedCallback+0x3a>
  {
	if (state == 1){ // si la connexion est vérifiée
 8001438:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d110      	bne.n	8001462 <HAL_TIM_PeriodElapsedCallback+0x3a>

		uint8_t data[] = "test_envoi\r\n"; // Indication pour dire que la stm est connectée
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001442:	f107 0408 	add.w	r4, r7, #8
 8001446:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001448:	c407      	stmia	r4!, {r0, r1, r2}
 800144a:	7023      	strb	r3, [r4, #0]
		//uint8_t end[] = ""; // Format pour le port série
		HAL_UART_Transmit (&huart1, data, sizeof(data), 1); // Transmission UART
 800144c:	f107 0108 	add.w	r1, r7, #8
 8001450:	2301      	movs	r3, #1
 8001452:	220d      	movs	r2, #13
 8001454:	4808      	ldr	r0, [pc, #32]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001456:	f002 fd46 	bl	8003ee6 <HAL_UART_Transmit>
		//HAL_UART_Transmit (&huart1, end, sizeof(end), 1); // transmission du retour chariot et à la ligne
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // on allume la led pour voir visuellement la transmission en direct sur le système
 800145a:	2120      	movs	r1, #32
 800145c:	4807      	ldr	r0, [pc, #28]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800145e:	f001 f962 	bl	8002726 <HAL_GPIO_TogglePin>

	}
  }
}
 8001462:	bf00      	nop
 8001464:	371c      	adds	r7, #28
 8001466:	46bd      	mov	sp, r7
 8001468:	bd90      	pop	{r4, r7, pc}
 800146a:	bf00      	nop
 800146c:	20000318 	.word	0x20000318
 8001470:	20000000 	.word	0x20000000
 8001474:	08007644 	.word	0x08007644
 8001478:	200002c4 	.word	0x200002c4
 800147c:	40020000 	.word	0x40020000

08001480 <__io_putchar>:

int __io_putchar(int ch) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001488:	1d39      	adds	r1, r7, #4
 800148a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800148e:	2201      	movs	r2, #1
 8001490:	4803      	ldr	r0, [pc, #12]	; (80014a0 <__io_putchar+0x20>)
 8001492:	f002 fd28 	bl	8003ee6 <HAL_UART_Transmit>
	return ch;
 8001496:	687b      	ldr	r3, [r7, #4]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000358 	.word	0x20000358

080014a4 <HAL_UART_RxCpltCallback>:

// Reception bluetooth et mise en buffer
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_UART_RxCpltCallback+0x4c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d104      	bne.n	80014c2 <HAL_UART_RxCpltCallback+0x1e>
	{
		HAL_UART_Receive_IT(&huart1, RX_BUFFER, 1);
 80014b8:	2201      	movs	r2, #1
 80014ba:	490e      	ldr	r1, [pc, #56]	; (80014f4 <HAL_UART_RxCpltCallback+0x50>)
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <HAL_UART_RxCpltCallback+0x4c>)
 80014be:	f002 fda4 	bl	800400a <HAL_UART_Receive_IT>

	}
	//char* test = (char*) RX_BUFFER;
	//printf("%s\r\n",test);
	//Bluetooth_Receive();
	char* test = (char*) RX_BUFFER;
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_UART_RxCpltCallback+0x50>)
 80014c4:	60fb      	str	r3, [r7, #12]
	//printf("%c\r\n",test[0]);


	if (test[0] == '#'){
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b23      	cmp	r3, #35	; 0x23
 80014cc:	d106      	bne.n	80014dc <HAL_UART_RxCpltCallback+0x38>

		printf("%s\r\n",command_sent);
 80014ce:	490a      	ldr	r1, [pc, #40]	; (80014f8 <HAL_UART_RxCpltCallback+0x54>)
 80014d0:	480a      	ldr	r0, [pc, #40]	; (80014fc <HAL_UART_RxCpltCallback+0x58>)
 80014d2:	f003 fedf 	bl	8005294 <iprintf>
		conversion_char_int();
 80014d6:	f7ff fca5 	bl	8000e24 <conversion_char_int>
	}



	//RX_BUFFER[0] = 'X';
}
 80014da:	e004      	b.n	80014e6 <HAL_UART_RxCpltCallback+0x42>
		strncat(command_sent,&test[0],1);
 80014dc:	2201      	movs	r2, #1
 80014de:	68f9      	ldr	r1, [r7, #12]
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <HAL_UART_RxCpltCallback+0x54>)
 80014e2:	f003 ff65 	bl	80053b0 <strncat>
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200002c4 	.word	0x200002c4
 80014f4:	200001fc 	.word	0x200001fc
 80014f8:	20000218 	.word	0x20000218
 80014fc:	08007654 	.word	0x08007654

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001508:	e7fe      	b.n	8001508 <Error_Handler+0x8>
	...

0800150c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_MspInit+0x5c>)
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	4a14      	ldr	r2, [pc, #80]	; (8001568 <HAL_MspInit+0x5c>)
 8001518:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800151c:	6253      	str	r3, [r2, #36]	; 0x24
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_MspInit+0x5c>)
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_MspInit+0x5c>)
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <HAL_MspInit+0x5c>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6213      	str	r3, [r2, #32]
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_MspInit+0x5c>)
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_MspInit+0x5c>)
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_MspInit+0x5c>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6253      	str	r3, [r2, #36]	; 0x24
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_MspInit+0x5c>)
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800155a:	2007      	movs	r0, #7
 800155c:	f000 fe64 	bl	8002228 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800

0800156c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a15      	ldr	r2, [pc, #84]	; (80015e0 <HAL_ADC_MspInit+0x74>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d123      	bne.n	80015d6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_ADC_MspInit+0x78>)
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <HAL_ADC_MspInit+0x78>)
 8001594:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001598:	6213      	str	r3, [r2, #32]
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_ADC_MspInit+0x78>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_ADC_MspInit+0x78>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <HAL_ADC_MspInit+0x78>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	61d3      	str	r3, [r2, #28]
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <HAL_ADC_MspInit+0x78>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015be:	2310      	movs	r3, #16
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c2:	2303      	movs	r3, #3
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <HAL_ADC_MspInit+0x7c>)
 80015d2:	f000 fee9 	bl	80023a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015d6:	bf00      	nop
 80015d8:	3728      	adds	r7, #40	; 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40012400 	.word	0x40012400
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020000 	.word	0x40020000

080015ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015fc:	d114      	bne.n	8001628 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_TIM_Base_MspInit+0x68>)
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	4a14      	ldr	r2, [pc, #80]	; (8001654 <HAL_TIM_Base_MspInit+0x68>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6253      	str	r3, [r2, #36]	; 0x24
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_TIM_Base_MspInit+0x68>)
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 2);
 8001616:	2202      	movs	r2, #2
 8001618:	2100      	movs	r1, #0
 800161a:	201c      	movs	r0, #28
 800161c:	f000 fe0f 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001620:	201c      	movs	r0, #28
 8001622:	f000 fe28 	bl	8002276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001626:	e010      	b.n	800164a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <HAL_TIM_Base_MspInit+0x6c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d10b      	bne.n	800164a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_TIM_Base_MspInit+0x68>)
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_TIM_Base_MspInit+0x68>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	6253      	str	r3, [r2, #36]	; 0x24
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_TIM_Base_MspInit+0x68>)
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40000400 	.word	0x40000400

0800165c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a1f      	ldr	r2, [pc, #124]	; (80016f8 <HAL_TIM_MspPostInit+0x9c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d137      	bne.n	80016ee <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <HAL_TIM_MspPostInit+0xa0>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <HAL_TIM_MspPostInit+0xa0>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <HAL_TIM_MspPostInit+0xa0>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_TIM_MspPostInit+0xa0>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	4a18      	ldr	r2, [pc, #96]	; (80016fc <HAL_TIM_MspPostInit+0xa0>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	61d3      	str	r3, [r2, #28]
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <HAL_TIM_MspPostInit+0xa0>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016be:	2302      	movs	r3, #2
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <HAL_TIM_MspPostInit+0xa4>)
 80016ca:	f000 fe6d 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016ce:	2310      	movs	r3, #16
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016de:	2302      	movs	r3, #2
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4806      	ldr	r0, [pc, #24]	; (8001704 <HAL_TIM_MspPostInit+0xa8>)
 80016ea:	f000 fe5d 	bl	80023a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40000400 	.word	0x40000400
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020800 	.word	0x40020800
 8001704:	40020400 	.word	0x40020400

08001708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08c      	sub	sp, #48	; 0x30
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a32      	ldr	r2, [pc, #200]	; (80017f0 <HAL_UART_MspInit+0xe8>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d131      	bne.n	800178e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800172a:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <HAL_UART_MspInit+0xec>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a31      	ldr	r2, [pc, #196]	; (80017f4 <HAL_UART_MspInit+0xec>)
 8001730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001734:	6213      	str	r3, [r2, #32]
 8001736:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <HAL_UART_MspInit+0xec>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173e:	61bb      	str	r3, [r7, #24]
 8001740:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <HAL_UART_MspInit+0xec>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a2b      	ldr	r2, [pc, #172]	; (80017f4 <HAL_UART_MspInit+0xec>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	61d3      	str	r3, [r2, #28]
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <HAL_UART_MspInit+0xec>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800175a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800175e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800176c:	2307      	movs	r3, #7
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	4820      	ldr	r0, [pc, #128]	; (80017f8 <HAL_UART_MspInit+0xf0>)
 8001778:	f000 fe16 	bl	80023a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 800177c:	2201      	movs	r2, #1
 800177e:	2100      	movs	r1, #0
 8001780:	2025      	movs	r0, #37	; 0x25
 8001782:	f000 fd5c 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001786:	2025      	movs	r0, #37	; 0x25
 8001788:	f000 fd75 	bl	8002276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800178c:	e02c      	b.n	80017e8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1a      	ldr	r2, [pc, #104]	; (80017fc <HAL_UART_MspInit+0xf4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d127      	bne.n	80017e8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001798:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <HAL_UART_MspInit+0xec>)
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <HAL_UART_MspInit+0xec>)
 800179e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a2:	6253      	str	r3, [r2, #36]	; 0x24
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <HAL_UART_MspInit+0xec>)
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <HAL_UART_MspInit+0xec>)
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <HAL_UART_MspInit+0xec>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	61d3      	str	r3, [r2, #28]
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <HAL_UART_MspInit+0xec>)
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017c8:	230c      	movs	r3, #12
 80017ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017d8:	2307      	movs	r3, #7
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <HAL_UART_MspInit+0xf0>)
 80017e4:	f000 fde0 	bl	80023a8 <HAL_GPIO_Init>
}
 80017e8:	bf00      	nop
 80017ea:	3730      	adds	r7, #48	; 0x30
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40013800 	.word	0x40013800
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40004400 	.word	0x40004400

08001800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <NMI_Handler+0x4>

08001806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <HardFault_Handler+0x4>

0800180c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <MemManage_Handler+0x4>

08001812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <UsageFault_Handler+0x4>

0800181e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001846:	f000 f955 	bl	8001af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <TIM2_IRQHandler+0x10>)
 8001856:	f001 fe1d 	bl	8003494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000318 	.word	0x20000318

08001864 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <USART1_IRQHandler+0x10>)
 800186a:	f002 fbff 	bl	800406c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200002c4 	.word	0x200002c4

08001878 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
	return 1;
 800187c:	2301      	movs	r3, #1
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <_kill>:

int _kill(int pid, int sig)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001890:	f003 f86e 	bl	8004970 <__errno>
 8001894:	4603      	mov	r3, r0
 8001896:	2216      	movs	r2, #22
 8001898:	601a      	str	r2, [r3, #0]
	return -1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_exit>:

void _exit (int status)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018ae:	f04f 31ff 	mov.w	r1, #4294967295
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffe7 	bl	8001886 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018b8:	e7fe      	b.n	80018b8 <_exit+0x12>

080018ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	e00a      	b.n	80018e2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018cc:	f3af 8000 	nop.w
 80018d0:	4601      	mov	r1, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	60ba      	str	r2, [r7, #8]
 80018d8:	b2ca      	uxtb	r2, r1
 80018da:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	3301      	adds	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	dbf0      	blt.n	80018cc <_read+0x12>
	}

return len;
 80018ea:	687b      	ldr	r3, [r7, #4]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e009      	b.n	800191a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	60ba      	str	r2, [r7, #8]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fdb6 	bl	8001480 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	429a      	cmp	r2, r3
 8001920:	dbf1      	blt.n	8001906 <_write+0x12>
	}
	return len;
 8001922:	687b      	ldr	r3, [r7, #4]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_close>:

int _close(int file)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	return -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001952:	605a      	str	r2, [r3, #4]
	return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <_isatty>:

int _isatty(int file)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	return 1;
 8001968:	2301      	movs	r3, #1
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
	return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001994:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <_sbrk+0x5c>)
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <_sbrk+0x60>)
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <_sbrk+0x64>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <_sbrk+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d207      	bcs.n	80019cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019bc:	f002 ffd8 	bl	8004970 <__errno>
 80019c0:	4603      	mov	r3, r0
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	e009      	b.n	80019e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <_sbrk+0x64>)
 80019dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20014000 	.word	0x20014000
 80019ec:	00000400 	.word	0x00000400
 80019f0:	20000208 	.word	0x20000208
 80019f4:	20000408 	.word	0x20000408

080019f8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a06:	490d      	ldr	r1, [pc, #52]	; (8001a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a1c:	4c0a      	ldr	r4, [pc, #40]	; (8001a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a2a:	f7ff ffe5 	bl	80019f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f002 ffa5 	bl	800497c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a32:	f7ff fa69 	bl	8000f08 <main>
  bx lr
 8001a36:	4770      	bx	lr
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a40:	08007a74 	.word	0x08007a74
  ldr r2, =_sbss
 8001a44:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a48:	20000404 	.word	0x20000404

08001a4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC1_IRQHandler>

08001a4e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f000 fbe5 	bl	8002228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 f80e 	bl	8001a80 <HAL_InitTick>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	71fb      	strb	r3, [r7, #7]
 8001a6e:	e001      	b.n	8001a74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a70:	f7ff fd4c 	bl	800150c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a74:	79fb      	ldrb	r3, [r7, #7]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a8c:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <HAL_InitTick+0x68>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d022      	beq.n	8001ada <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_InitTick+0x6c>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_InitTick+0x68>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001aa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fbf2 	bl	8002292 <HAL_SYSTICK_Config>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10f      	bne.n	8001ad4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b0f      	cmp	r3, #15
 8001ab8:	d809      	bhi.n	8001ace <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aba:	2200      	movs	r2, #0
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac2:	f000 fbbc 	bl	800223e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_InitTick+0x70>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	e007      	b.n	8001ade <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	e004      	b.n	8001ade <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
 8001ad8:	e001      	b.n	8001ade <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2000000c 	.word	0x2000000c
 8001aec:	20000004 	.word	0x20000004
 8001af0:	20000008 	.word	0x20000008

08001af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_IncTick+0x1c>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_IncTick+0x20>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4413      	add	r3, r2
 8001b02:	4a03      	ldr	r2, [pc, #12]	; (8001b10 <HAL_IncTick+0x1c>)
 8001b04:	6013      	str	r3, [r2, #0]
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	200003f0 	.word	0x200003f0
 8001b14:	2000000c 	.word	0x2000000c

08001b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b1c:	4b02      	ldr	r3, [pc, #8]	; (8001b28 <HAL_GetTick+0x10>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	200003f0 	.word	0x200003f0

08001b2c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08e      	sub	sp, #56	; 0x38
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e127      	b.n	8001d9c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d115      	bne.n	8001b86 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b68:	4b8e      	ldr	r3, [pc, #568]	; (8001da4 <HAL_ADC_Init+0x278>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4a8d      	ldr	r2, [pc, #564]	; (8001da4 <HAL_ADC_Init+0x278>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6213      	str	r3, [r2, #32]
 8001b74:	4b8b      	ldr	r3, [pc, #556]	; (8001da4 <HAL_ADC_Init+0x278>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff fcf3 	bl	800156c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f040 80ff 	bne.w	8001d92 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b9c:	f023 0302 	bic.w	r3, r3, #2
 8001ba0:	f043 0202 	orr.w	r2, r3, #2
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001ba8:	4b7f      	ldr	r3, [pc, #508]	; (8001da8 <HAL_ADC_Init+0x27c>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	497c      	ldr	r1, [pc, #496]	; (8001da8 <HAL_ADC_Init+0x27c>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001bc2:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd0:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fab3 f383 	clz	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001be6:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001bec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	fa93 f3a3 	rbit	r3, r3
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001c0e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c12:	4313      	orrs	r3, r2
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d007      	beq.n	8001c2e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001c26:	4313      	orrs	r3, r2
 8001c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c38:	2b40      	cmp	r3, #64	; 0x40
 8001c3a:	d04f      	beq.n	8001cdc <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c42:	4313      	orrs	r3, r2
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c4e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6912      	ldr	r2, [r2, #16]
 8001c54:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001c58:	d003      	beq.n	8001c62 <HAL_ADC_Init+0x136>
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6912      	ldr	r2, [r2, #16]
 8001c5e:	2a01      	cmp	r2, #1
 8001c60:	d102      	bne.n	8001c68 <HAL_ADC_Init+0x13c>
 8001c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c66:	e000      	b.n	8001c6a <HAL_ADC_Init+0x13e>
 8001c68:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001c6a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d125      	bne.n	8001cc8 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d114      	bne.n	8001cb0 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001c90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	fa92 f2a2 	rbit	r2, r2
 8001c98:	617a      	str	r2, [r7, #20]
  return result;
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	fab2 f282 	clz	r2, r2
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	4093      	lsls	r3, r2
 8001ca4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001caa:	4313      	orrs	r3, r2
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
 8001cae:	e00b      	b.n	8001cc8 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb4:	f043 0220 	orr.w	r2, r3, #32
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc0:	f043 0201 	orr.w	r2, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	4b37      	ldr	r3, [pc, #220]	; (8001dac <HAL_ADC_Init+0x280>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	4b33      	ldr	r3, [pc, #204]	; (8001db0 <HAL_ADC_Init+0x284>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cec:	430b      	orrs	r3, r1
 8001cee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cf8:	d003      	beq.n	8001d02 <HAL_ADC_Init+0x1d6>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d119      	bne.n	8001d36 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	3b01      	subs	r3, #1
 8001d12:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001d16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	fa92 f2a2 	rbit	r2, r2
 8001d1e:	60fa      	str	r2, [r7, #12]
  return result;
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	fab2 f282 	clz	r2, r2
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	fa03 f202 	lsl.w	r2, r3, r2
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30
 8001d34:	e007      	b.n	8001d46 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001d44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_ADC_Init+0x288>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d10b      	bne.n	8001d6e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d60:	f023 0303 	bic.w	r3, r3, #3
 8001d64:	f043 0201 	orr.w	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d6c:	e014      	b.n	8001d98 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d72:	f023 0312 	bic.w	r3, r3, #18
 8001d76:	f043 0210 	orr.w	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d82:	f043 0201 	orr.w	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d90:	e002      	b.n	8001d98 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3738      	adds	r7, #56	; 0x38
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40012700 	.word	0x40012700
 8001dac:	fcfc16ff 	.word	0xfcfc16ff
 8001db0:	c0fff189 	.word	0xc0fff189
 8001db4:	bf80fffe 	.word	0xbf80fffe

08001db8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x20>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e14f      	b.n	8002078 <HAL_ADC_ConfigChannel+0x2c0>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b06      	cmp	r3, #6
 8001de6:	d81c      	bhi.n	8001e22 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	3b05      	subs	r3, #5
 8001dfa:	221f      	movs	r2, #31
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	4019      	ands	r1, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	3b05      	subs	r3, #5
 8001e14:	fa00 f203 	lsl.w	r2, r0, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	641a      	str	r2, [r3, #64]	; 0x40
 8001e20:	e07e      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	d81c      	bhi.n	8001e64 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	3b23      	subs	r3, #35	; 0x23
 8001e3c:	221f      	movs	r2, #31
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	4019      	ands	r1, r3
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	3b23      	subs	r3, #35	; 0x23
 8001e56:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e62:	e05d      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b12      	cmp	r3, #18
 8001e6a:	d81c      	bhi.n	8001ea6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3b41      	subs	r3, #65	; 0x41
 8001e7e:	221f      	movs	r2, #31
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	4019      	ands	r1, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	3b41      	subs	r3, #65	; 0x41
 8001e98:	fa00 f203 	lsl.w	r2, r0, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	639a      	str	r2, [r3, #56]	; 0x38
 8001ea4:	e03c      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b18      	cmp	r3, #24
 8001eac:	d81c      	bhi.n	8001ee8 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3b5f      	subs	r3, #95	; 0x5f
 8001ec0:	221f      	movs	r2, #31
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	4019      	ands	r1, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3b5f      	subs	r3, #95	; 0x5f
 8001eda:	fa00 f203 	lsl.w	r2, r0, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ee6:	e01b      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3b7d      	subs	r3, #125	; 0x7d
 8001efa:	221f      	movs	r2, #31
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	4019      	ands	r1, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	3b7d      	subs	r3, #125	; 0x7d
 8001f14:	fa00 f203 	lsl.w	r2, r0, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b09      	cmp	r3, #9
 8001f26:	d81a      	bhi.n	8001f5e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6959      	ldr	r1, [r3, #20]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	2207      	movs	r2, #7
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	4019      	ands	r1, r3
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6898      	ldr	r0, [r3, #8]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	fa00 f203 	lsl.w	r2, r0, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	615a      	str	r2, [r3, #20]
 8001f5c:	e05d      	b.n	800201a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b13      	cmp	r3, #19
 8001f64:	d81c      	bhi.n	8001fa0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6919      	ldr	r1, [r3, #16]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	3b1e      	subs	r3, #30
 8001f78:	2207      	movs	r2, #7
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	4019      	ands	r1, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6898      	ldr	r0, [r3, #8]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	3b1e      	subs	r3, #30
 8001f92:	fa00 f203 	lsl.w	r2, r0, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	611a      	str	r2, [r3, #16]
 8001f9e:	e03c      	b.n	800201a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b1d      	cmp	r3, #29
 8001fa6:	d81c      	bhi.n	8001fe2 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68d9      	ldr	r1, [r3, #12]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3b3c      	subs	r3, #60	; 0x3c
 8001fba:	2207      	movs	r2, #7
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4019      	ands	r1, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	6898      	ldr	r0, [r3, #8]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3b3c      	subs	r3, #60	; 0x3c
 8001fd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	e01b      	b.n	800201a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3b5a      	subs	r3, #90	; 0x5a
 8001ff4:	2207      	movs	r2, #7
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	4019      	ands	r1, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6898      	ldr	r0, [r3, #8]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	3b5a      	subs	r3, #90	; 0x5a
 800200e:	fa00 f203 	lsl.w	r2, r0, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b10      	cmp	r3, #16
 8002020:	d003      	beq.n	800202a <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002026:	2b11      	cmp	r3, #17
 8002028:	d121      	bne.n	800206e <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <HAL_ADC_ConfigChannel+0x2cc>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d11b      	bne.n	800206e <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002036:	4b13      	ldr	r3, [pc, #76]	; (8002084 <HAL_ADC_ConfigChannel+0x2cc>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4a12      	ldr	r2, [pc, #72]	; (8002084 <HAL_ADC_ConfigChannel+0x2cc>)
 800203c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002040:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b10      	cmp	r3, #16
 8002048:	d111      	bne.n	800206e <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <HAL_ADC_ConfigChannel+0x2d0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a0f      	ldr	r2, [pc, #60]	; (800208c <HAL_ADC_ConfigChannel+0x2d4>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	0c9a      	lsrs	r2, r3, #18
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002060:	e002      	b.n	8002068 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3b01      	subs	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f9      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002076:	7bfb      	ldrb	r3, [r7, #15]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40012700 	.word	0x40012700
 8002088:	20000004 	.word	0x20000004
 800208c:	431bde83 	.word	0x431bde83

08002090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c2:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	60d3      	str	r3, [r2, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <__NVIC_GetPriorityGrouping+0x18>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0307 	and.w	r3, r3, #7
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db0b      	blt.n	800211e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	4906      	ldr	r1, [pc, #24]	; (8002128 <__NVIC_EnableIRQ+0x34>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	2001      	movs	r0, #1
 8002116:	fa00 f202 	lsl.w	r2, r0, r2
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	e000e100 	.word	0xe000e100

0800212c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	2b00      	cmp	r3, #0
 800213e:	db0a      	blt.n	8002156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	b2da      	uxtb	r2, r3
 8002144:	490c      	ldr	r1, [pc, #48]	; (8002178 <__NVIC_SetPriority+0x4c>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	0112      	lsls	r2, r2, #4
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	440b      	add	r3, r1
 8002150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002154:	e00a      	b.n	800216c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4908      	ldr	r1, [pc, #32]	; (800217c <__NVIC_SetPriority+0x50>)
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	3b04      	subs	r3, #4
 8002164:	0112      	lsls	r2, r2, #4
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	440b      	add	r3, r1
 800216a:	761a      	strb	r2, [r3, #24]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000e100 	.word	0xe000e100
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f1c3 0307 	rsb	r3, r3, #7
 800219a:	2b04      	cmp	r3, #4
 800219c:	bf28      	it	cs
 800219e:	2304      	movcs	r3, #4
 80021a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3304      	adds	r3, #4
 80021a6:	2b06      	cmp	r3, #6
 80021a8:	d902      	bls.n	80021b0 <NVIC_EncodePriority+0x30>
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3b03      	subs	r3, #3
 80021ae:	e000      	b.n	80021b2 <NVIC_EncodePriority+0x32>
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	f04f 32ff 	mov.w	r2, #4294967295
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43da      	mvns	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	401a      	ands	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c8:	f04f 31ff 	mov.w	r1, #4294967295
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	43d9      	mvns	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	4313      	orrs	r3, r2
         );
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3724      	adds	r7, #36	; 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f4:	d301      	bcc.n	80021fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00f      	b.n	800221a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <SysTick_Config+0x40>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002202:	210f      	movs	r1, #15
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	f7ff ff90 	bl	800212c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <SysTick_Config+0x40>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002212:	4b04      	ldr	r3, [pc, #16]	; (8002224 <SysTick_Config+0x40>)
 8002214:	2207      	movs	r2, #7
 8002216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	e000e010 	.word	0xe000e010

08002228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff2d 	bl	8002090 <__NVIC_SetPriorityGrouping>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002250:	f7ff ff42 	bl	80020d8 <__NVIC_GetPriorityGrouping>
 8002254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f7ff ff90 	bl	8002180 <NVIC_EncodePriority>
 8002260:	4602      	mov	r2, r0
 8002262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff5f 	bl	800212c <__NVIC_SetPriority>
}
 800226e:	bf00      	nop
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff35 	bl	80020f4 <__NVIC_EnableIRQ>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ffa2 	bl	80021e4 <SysTick_Config>
 80022a0:	4603      	mov	r3, r0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b085      	sub	sp, #20
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d008      	beq.n	80022d4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2204      	movs	r2, #4
 80022c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e022      	b.n	800231a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 020e 	bic.w	r2, r2, #14
 80022e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0201 	bic.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f003 021c 	and.w	r2, r3, #28
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002300:	2101      	movs	r1, #1
 8002302:	fa01 f202 	lsl.w	r2, r1, r2
 8002306:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002318:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d005      	beq.n	8002348 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2204      	movs	r2, #4
 8002340:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	e029      	b.n	800239c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 020e 	bic.w	r2, r2, #14
 8002356:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f003 021c 	and.w	r2, r3, #28
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002374:	2101      	movs	r1, #1
 8002376:	fa01 f202 	lsl.w	r2, r1, r2
 800237a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4798      	blx	r3
    }
  }
  return status;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80023be:	e160      	b.n	8002682 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	2101      	movs	r1, #1
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	4013      	ands	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8152 	beq.w	800267c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d005      	beq.n	80023f0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d130      	bne.n	8002452 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	2203      	movs	r2, #3
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002426:	2201      	movs	r2, #1
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	f003 0201 	and.w	r2, r3, #1
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b03      	cmp	r3, #3
 800245c:	d017      	beq.n	800248e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2203      	movs	r2, #3
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d123      	bne.n	80024e2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	08da      	lsrs	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3208      	adds	r2, #8
 80024dc:	6939      	ldr	r1, [r7, #16]
 80024de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0203 	and.w	r2, r3, #3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 80ac 	beq.w	800267c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002524:	4b5e      	ldr	r3, [pc, #376]	; (80026a0 <HAL_GPIO_Init+0x2f8>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	4a5d      	ldr	r2, [pc, #372]	; (80026a0 <HAL_GPIO_Init+0x2f8>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6213      	str	r3, [r2, #32]
 8002530:	4b5b      	ldr	r3, [pc, #364]	; (80026a0 <HAL_GPIO_Init+0x2f8>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800253c:	4a59      	ldr	r2, [pc, #356]	; (80026a4 <HAL_GPIO_Init+0x2fc>)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3302      	adds	r3, #2
 8002544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002548:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	220f      	movs	r2, #15
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a51      	ldr	r2, [pc, #324]	; (80026a8 <HAL_GPIO_Init+0x300>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d025      	beq.n	80025b4 <HAL_GPIO_Init+0x20c>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a50      	ldr	r2, [pc, #320]	; (80026ac <HAL_GPIO_Init+0x304>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d01f      	beq.n	80025b0 <HAL_GPIO_Init+0x208>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a4f      	ldr	r2, [pc, #316]	; (80026b0 <HAL_GPIO_Init+0x308>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d019      	beq.n	80025ac <HAL_GPIO_Init+0x204>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a4e      	ldr	r2, [pc, #312]	; (80026b4 <HAL_GPIO_Init+0x30c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d013      	beq.n	80025a8 <HAL_GPIO_Init+0x200>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a4d      	ldr	r2, [pc, #308]	; (80026b8 <HAL_GPIO_Init+0x310>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00d      	beq.n	80025a4 <HAL_GPIO_Init+0x1fc>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a4c      	ldr	r2, [pc, #304]	; (80026bc <HAL_GPIO_Init+0x314>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d007      	beq.n	80025a0 <HAL_GPIO_Init+0x1f8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a4b      	ldr	r2, [pc, #300]	; (80026c0 <HAL_GPIO_Init+0x318>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_GPIO_Init+0x1f4>
 8002598:	2306      	movs	r3, #6
 800259a:	e00c      	b.n	80025b6 <HAL_GPIO_Init+0x20e>
 800259c:	2307      	movs	r3, #7
 800259e:	e00a      	b.n	80025b6 <HAL_GPIO_Init+0x20e>
 80025a0:	2305      	movs	r3, #5
 80025a2:	e008      	b.n	80025b6 <HAL_GPIO_Init+0x20e>
 80025a4:	2304      	movs	r3, #4
 80025a6:	e006      	b.n	80025b6 <HAL_GPIO_Init+0x20e>
 80025a8:	2303      	movs	r3, #3
 80025aa:	e004      	b.n	80025b6 <HAL_GPIO_Init+0x20e>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e002      	b.n	80025b6 <HAL_GPIO_Init+0x20e>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <HAL_GPIO_Init+0x20e>
 80025b4:	2300      	movs	r3, #0
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	f002 0203 	and.w	r2, r2, #3
 80025bc:	0092      	lsls	r2, r2, #2
 80025be:	4093      	lsls	r3, r2
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025c6:	4937      	ldr	r1, [pc, #220]	; (80026a4 <HAL_GPIO_Init+0x2fc>)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	3302      	adds	r3, #2
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025d4:	4b3b      	ldr	r3, [pc, #236]	; (80026c4 <HAL_GPIO_Init+0x31c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	43db      	mvns	r3, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025f8:	4a32      	ldr	r2, [pc, #200]	; (80026c4 <HAL_GPIO_Init+0x31c>)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025fe:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <HAL_GPIO_Init+0x31c>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002622:	4a28      	ldr	r2, [pc, #160]	; (80026c4 <HAL_GPIO_Init+0x31c>)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002628:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <HAL_GPIO_Init+0x31c>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	43db      	mvns	r3, r3
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800264c:	4a1d      	ldr	r2, [pc, #116]	; (80026c4 <HAL_GPIO_Init+0x31c>)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002652:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <HAL_GPIO_Init+0x31c>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002676:	4a13      	ldr	r2, [pc, #76]	; (80026c4 <HAL_GPIO_Init+0x31c>)
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	3301      	adds	r3, #1
 8002680:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	f47f ae97 	bne.w	80023c0 <HAL_GPIO_Init+0x18>
  }
}
 8002692:	bf00      	nop
 8002694:	bf00      	nop
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40010000 	.word	0x40010000
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40020c00 	.word	0x40020c00
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40021400 	.word	0x40021400
 80026c0:	40021800 	.word	0x40021800
 80026c4:	40010400 	.word	0x40010400

080026c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	887b      	ldrh	r3, [r7, #2]
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	e001      	b.n	80026ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	460b      	mov	r3, r1
 8002700:	807b      	strh	r3, [r7, #2]
 8002702:	4613      	mov	r3, r2
 8002704:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002706:	787b      	ldrb	r3, [r7, #1]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800270c:	887a      	ldrh	r2, [r7, #2]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002712:	e003      	b.n	800271c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002714:	887b      	ldrh	r3, [r7, #2]
 8002716:	041a      	lsls	r2, r3, #16
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	619a      	str	r2, [r3, #24]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002726:	b480      	push	{r7}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	460b      	mov	r3, r1
 8002730:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002738:	887a      	ldrh	r2, [r7, #2]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4013      	ands	r3, r2
 800273e:	041a      	lsls	r2, r3, #16
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	43d9      	mvns	r1, r3
 8002744:	887b      	ldrh	r3, [r7, #2]
 8002746:	400b      	ands	r3, r1
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	619a      	str	r2, [r3, #24]
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e31d      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800276a:	4b94      	ldr	r3, [pc, #592]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002774:	4b91      	ldr	r3, [pc, #580]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d07b      	beq.n	8002882 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b08      	cmp	r3, #8
 800278e:	d006      	beq.n	800279e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b0c      	cmp	r3, #12
 8002794:	d10f      	bne.n	80027b6 <HAL_RCC_OscConfig+0x5e>
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279c:	d10b      	bne.n	80027b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800279e:	4b87      	ldr	r3, [pc, #540]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d06a      	beq.n	8002880 <HAL_RCC_OscConfig+0x128>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d166      	bne.n	8002880 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e2f7      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d106      	bne.n	80027cc <HAL_RCC_OscConfig+0x74>
 80027be:	4b7f      	ldr	r3, [pc, #508]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a7e      	ldr	r2, [pc, #504]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 80027c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e02d      	b.n	8002828 <HAL_RCC_OscConfig+0xd0>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10c      	bne.n	80027ee <HAL_RCC_OscConfig+0x96>
 80027d4:	4b79      	ldr	r3, [pc, #484]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a78      	ldr	r2, [pc, #480]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 80027da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4b76      	ldr	r3, [pc, #472]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a75      	ldr	r2, [pc, #468]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 80027e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	e01c      	b.n	8002828 <HAL_RCC_OscConfig+0xd0>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0xb8>
 80027f6:	4b71      	ldr	r3, [pc, #452]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a70      	ldr	r2, [pc, #448]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 80027fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	4b6e      	ldr	r3, [pc, #440]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a6d      	ldr	r2, [pc, #436]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 8002808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	e00b      	b.n	8002828 <HAL_RCC_OscConfig+0xd0>
 8002810:	4b6a      	ldr	r3, [pc, #424]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a69      	ldr	r2, [pc, #420]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 8002816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	4b67      	ldr	r3, [pc, #412]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a66      	ldr	r2, [pc, #408]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 8002822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d013      	beq.n	8002858 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7ff f972 	bl	8001b18 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002838:	f7ff f96e 	bl	8001b18 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b64      	cmp	r3, #100	; 0x64
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e2ad      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800284a:	4b5c      	ldr	r3, [pc, #368]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0xe0>
 8002856:	e014      	b.n	8002882 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7ff f95e 	bl	8001b18 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002860:	f7ff f95a 	bl	8001b18 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e299      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002872:	4b52      	ldr	r3, [pc, #328]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x108>
 800287e:	e000      	b.n	8002882 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d05a      	beq.n	8002944 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2b04      	cmp	r3, #4
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	2b0c      	cmp	r3, #12
 8002898:	d119      	bne.n	80028ce <HAL_RCC_OscConfig+0x176>
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d116      	bne.n	80028ce <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a0:	4b46      	ldr	r3, [pc, #280]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_OscConfig+0x160>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e276      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b8:	4b40      	ldr	r3, [pc, #256]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	493d      	ldr	r1, [pc, #244]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028cc:	e03a      	b.n	8002944 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d020      	beq.n	8002918 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d6:	4b3a      	ldr	r3, [pc, #232]	; (80029c0 <HAL_RCC_OscConfig+0x268>)
 80028d8:	2201      	movs	r2, #1
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7ff f91c 	bl	8001b18 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e4:	f7ff f918 	bl	8001b18 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e257      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028f6:	4b31      	ldr	r3, [pc, #196]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002902:	4b2e      	ldr	r3, [pc, #184]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	492a      	ldr	r1, [pc, #168]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
 8002916:	e015      	b.n	8002944 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002918:	4b29      	ldr	r3, [pc, #164]	; (80029c0 <HAL_RCC_OscConfig+0x268>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7ff f8fb 	bl	8001b18 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002926:	f7ff f8f7 	bl	8001b18 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e236      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002938:	4b20      	ldr	r3, [pc, #128]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80b8 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d170      	bne.n	8002a3a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002958:	4b18      	ldr	r3, [pc, #96]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_OscConfig+0x218>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e21a      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1a      	ldr	r2, [r3, #32]
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800297c:	429a      	cmp	r2, r3
 800297e:	d921      	bls.n	80029c4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fc4b 	bl	8003220 <RCC_SetFlashLatencyFromMSIRange>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e208      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4906      	ldr	r1, [pc, #24]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	061b      	lsls	r3, r3, #24
 80029b4:	4901      	ldr	r1, [pc, #4]	; (80029bc <HAL_RCC_OscConfig+0x264>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
 80029ba:	e020      	b.n	80029fe <HAL_RCC_OscConfig+0x2a6>
 80029bc:	40023800 	.word	0x40023800
 80029c0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029c4:	4ba4      	ldr	r3, [pc, #656]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	49a1      	ldr	r1, [pc, #644]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029d6:	4ba0      	ldr	r3, [pc, #640]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	061b      	lsls	r3, r3, #24
 80029e4:	499c      	ldr	r1, [pc, #624]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fc16 	bl	8003220 <RCC_SetFlashLatencyFromMSIRange>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e1d3      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	0b5b      	lsrs	r3, r3, #13
 8002a04:	3301      	adds	r3, #1
 8002a06:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002a0e:	4a92      	ldr	r2, [pc, #584]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002a10:	6892      	ldr	r2, [r2, #8]
 8002a12:	0912      	lsrs	r2, r2, #4
 8002a14:	f002 020f 	and.w	r2, r2, #15
 8002a18:	4990      	ldr	r1, [pc, #576]	; (8002c5c <HAL_RCC_OscConfig+0x504>)
 8002a1a:	5c8a      	ldrb	r2, [r1, r2]
 8002a1c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a1e:	4a90      	ldr	r2, [pc, #576]	; (8002c60 <HAL_RCC_OscConfig+0x508>)
 8002a20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a22:	4b90      	ldr	r3, [pc, #576]	; (8002c64 <HAL_RCC_OscConfig+0x50c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff f82a 	bl	8001a80 <HAL_InitTick>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d045      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	e1b5      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d029      	beq.n	8002a96 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a42:	4b89      	ldr	r3, [pc, #548]	; (8002c68 <HAL_RCC_OscConfig+0x510>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7ff f866 	bl	8001b18 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a50:	f7ff f862 	bl	8001b18 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e1a1      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a62:	4b7d      	ldr	r3, [pc, #500]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a6e:	4b7a      	ldr	r3, [pc, #488]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4977      	ldr	r1, [pc, #476]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a80:	4b75      	ldr	r3, [pc, #468]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	061b      	lsls	r3, r3, #24
 8002a8e:	4972      	ldr	r1, [pc, #456]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
 8002a94:	e015      	b.n	8002ac2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a96:	4b74      	ldr	r3, [pc, #464]	; (8002c68 <HAL_RCC_OscConfig+0x510>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7ff f83c 	bl	8001b18 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aa4:	f7ff f838 	bl	8001b18 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e177      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ab6:	4b68      	ldr	r3, [pc, #416]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d030      	beq.n	8002b30 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d016      	beq.n	8002b04 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad6:	4b65      	ldr	r3, [pc, #404]	; (8002c6c <HAL_RCC_OscConfig+0x514>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002adc:	f7ff f81c 	bl	8001b18 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae4:	f7ff f818 	bl	8001b18 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e157      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002af6:	4b58      	ldr	r3, [pc, #352]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x38c>
 8002b02:	e015      	b.n	8002b30 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b04:	4b59      	ldr	r3, [pc, #356]	; (8002c6c <HAL_RCC_OscConfig+0x514>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0a:	f7ff f805 	bl	8001b18 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b12:	f7ff f801 	bl	8001b18 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e140      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b24:	4b4c      	ldr	r3, [pc, #304]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f0      	bne.n	8002b12 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80b5 	beq.w	8002ca8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b42:	4b45      	ldr	r3, [pc, #276]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10d      	bne.n	8002b6a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	4b42      	ldr	r3, [pc, #264]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	4a41      	ldr	r2, [pc, #260]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b58:	6253      	str	r3, [r2, #36]	; 0x24
 8002b5a:	4b3f      	ldr	r3, [pc, #252]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b66:	2301      	movs	r3, #1
 8002b68:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	4b41      	ldr	r3, [pc, #260]	; (8002c70 <HAL_RCC_OscConfig+0x518>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d118      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b76:	4b3e      	ldr	r3, [pc, #248]	; (8002c70 <HAL_RCC_OscConfig+0x518>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a3d      	ldr	r2, [pc, #244]	; (8002c70 <HAL_RCC_OscConfig+0x518>)
 8002b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b82:	f7fe ffc9 	bl	8001b18 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8a:	f7fe ffc5 	bl	8001b18 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b64      	cmp	r3, #100	; 0x64
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e104      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <HAL_RCC_OscConfig+0x518>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_OscConfig+0x466>
 8002bb0:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb4:	4a28      	ldr	r2, [pc, #160]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bba:	6353      	str	r3, [r2, #52]	; 0x34
 8002bbc:	e02d      	b.n	8002c1a <HAL_RCC_OscConfig+0x4c2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x488>
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bca:	4a23      	ldr	r2, [pc, #140]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd0:	6353      	str	r3, [r2, #52]	; 0x34
 8002bd2:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd6:	4a20      	ldr	r2, [pc, #128]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002bd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bdc:	6353      	str	r3, [r2, #52]	; 0x34
 8002bde:	e01c      	b.n	8002c1a <HAL_RCC_OscConfig+0x4c2>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b05      	cmp	r3, #5
 8002be6:	d10c      	bne.n	8002c02 <HAL_RCC_OscConfig+0x4aa>
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bec:	4a1a      	ldr	r2, [pc, #104]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bf2:	6353      	str	r3, [r2, #52]	; 0x34
 8002bf4:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf8:	4a17      	ldr	r2, [pc, #92]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfe:	6353      	str	r3, [r2, #52]	; 0x34
 8002c00:	e00b      	b.n	8002c1a <HAL_RCC_OscConfig+0x4c2>
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c06:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c0c:	6353      	str	r3, [r2, #52]	; 0x34
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c12:	4a11      	ldr	r2, [pc, #68]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002c14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c18:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d015      	beq.n	8002c4e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c22:	f7fe ff79 	bl	8001b18 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fe ff75 	bl	8001b18 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e0b2      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCC_OscConfig+0x500>)
 8002c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0ee      	beq.n	8002c2a <HAL_RCC_OscConfig+0x4d2>
 8002c4c:	e023      	b.n	8002c96 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4e:	f7fe ff63 	bl	8001b18 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c54:	e019      	b.n	8002c8a <HAL_RCC_OscConfig+0x532>
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	08007668 	.word	0x08007668
 8002c60:	20000004 	.word	0x20000004
 8002c64:	20000008 	.word	0x20000008
 8002c68:	42470020 	.word	0x42470020
 8002c6c:	42470680 	.word	0x42470680
 8002c70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c74:	f7fe ff50 	bl	8001b18 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e08d      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c8a:	4b49      	ldr	r3, [pc, #292]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1ee      	bne.n	8002c74 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c96:	7ffb      	ldrb	r3, [r7, #31]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d105      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9c:	4b44      	ldr	r3, [pc, #272]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	4a43      	ldr	r2, [pc, #268]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d079      	beq.n	8002da4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b0c      	cmp	r3, #12
 8002cb4:	d056      	beq.n	8002d64 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d13b      	bne.n	8002d36 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbe:	4b3d      	ldr	r3, [pc, #244]	; (8002db4 <HAL_RCC_OscConfig+0x65c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7fe ff28 	bl	8001b18 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fe ff24 	bl	8001b18 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e063      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cde:	4b34      	ldr	r3, [pc, #208]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cea:	4b31      	ldr	r3, [pc, #196]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	4319      	orrs	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	430b      	orrs	r3, r1
 8002d02:	492b      	ldr	r1, [pc, #172]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d08:	4b2a      	ldr	r3, [pc, #168]	; (8002db4 <HAL_RCC_OscConfig+0x65c>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7fe ff03 	bl	8001b18 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d16:	f7fe feff 	bl	8001b18 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e03e      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d28:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x5be>
 8002d34:	e036      	b.n	8002da4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d36:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <HAL_RCC_OscConfig+0x65c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7fe feec 	bl	8001b18 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d44:	f7fe fee8 	bl	8001b18 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e027      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d56:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x5ec>
 8002d62:	e01f      	b.n	8002da4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e01a      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <HAL_RCC_OscConfig+0x658>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d10d      	bne.n	8002da0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d106      	bne.n	8002da0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800
 8002db4:	42470060 	.word	0x42470060

08002db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e11a      	b.n	8003002 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b8f      	ldr	r3, [pc, #572]	; (800300c <HAL_RCC_ClockConfig+0x254>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d919      	bls.n	8002e0e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d105      	bne.n	8002dec <HAL_RCC_ClockConfig+0x34>
 8002de0:	4b8a      	ldr	r3, [pc, #552]	; (800300c <HAL_RCC_ClockConfig+0x254>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a89      	ldr	r2, [pc, #548]	; (800300c <HAL_RCC_ClockConfig+0x254>)
 8002de6:	f043 0304 	orr.w	r3, r3, #4
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	4b87      	ldr	r3, [pc, #540]	; (800300c <HAL_RCC_ClockConfig+0x254>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f023 0201 	bic.w	r2, r3, #1
 8002df4:	4985      	ldr	r1, [pc, #532]	; (800300c <HAL_RCC_ClockConfig+0x254>)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfc:	4b83      	ldr	r3, [pc, #524]	; (800300c <HAL_RCC_ClockConfig+0x254>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e0f9      	b.n	8003002 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e1a:	4b7d      	ldr	r3, [pc, #500]	; (8003010 <HAL_RCC_ClockConfig+0x258>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	497a      	ldr	r1, [pc, #488]	; (8003010 <HAL_RCC_ClockConfig+0x258>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 808e 	beq.w	8002f56 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e42:	4b73      	ldr	r3, [pc, #460]	; (8003010 <HAL_RCC_ClockConfig+0x258>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d121      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e0d7      	b.n	8003002 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d107      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e5a:	4b6d      	ldr	r3, [pc, #436]	; (8003010 <HAL_RCC_ClockConfig+0x258>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d115      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0cb      	b.n	8003002 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e72:	4b67      	ldr	r3, [pc, #412]	; (8003010 <HAL_RCC_ClockConfig+0x258>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e0bf      	b.n	8003002 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e82:	4b63      	ldr	r3, [pc, #396]	; (8003010 <HAL_RCC_ClockConfig+0x258>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e0b7      	b.n	8003002 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e92:	4b5f      	ldr	r3, [pc, #380]	; (8003010 <HAL_RCC_ClockConfig+0x258>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f023 0203 	bic.w	r2, r3, #3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	495c      	ldr	r1, [pc, #368]	; (8003010 <HAL_RCC_ClockConfig+0x258>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea4:	f7fe fe38 	bl	8001b18 <HAL_GetTick>
 8002ea8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d112      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb4:	f7fe fe30 	bl	8001b18 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e09b      	b.n	8003002 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eca:	4b51      	ldr	r3, [pc, #324]	; (8003010 <HAL_RCC_ClockConfig+0x258>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d1ee      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xfc>
 8002ed6:	e03e      	b.n	8002f56 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d112      	bne.n	8002f06 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee2:	f7fe fe19 	bl	8001b18 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e084      	b.n	8003002 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ef8:	4b45      	ldr	r3, [pc, #276]	; (8003010 <HAL_RCC_ClockConfig+0x258>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b0c      	cmp	r3, #12
 8002f02:	d1ee      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0x12a>
 8002f04:	e027      	b.n	8002f56 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d11d      	bne.n	8002f4a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f10:	f7fe fe02 	bl	8001b18 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e06d      	b.n	8003002 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f26:	4b3a      	ldr	r3, [pc, #232]	; (8003010 <HAL_RCC_ClockConfig+0x258>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d1ee      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x158>
 8002f32:	e010      	b.n	8002f56 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f34:	f7fe fdf0 	bl	8001b18 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e05b      	b.n	8003002 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f4a:	4b31      	ldr	r3, [pc, #196]	; (8003010 <HAL_RCC_ClockConfig+0x258>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1ee      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f56:	4b2d      	ldr	r3, [pc, #180]	; (800300c <HAL_RCC_ClockConfig+0x254>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d219      	bcs.n	8002f98 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d105      	bne.n	8002f76 <HAL_RCC_ClockConfig+0x1be>
 8002f6a:	4b28      	ldr	r3, [pc, #160]	; (800300c <HAL_RCC_ClockConfig+0x254>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a27      	ldr	r2, [pc, #156]	; (800300c <HAL_RCC_ClockConfig+0x254>)
 8002f70:	f043 0304 	orr.w	r3, r3, #4
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	4b25      	ldr	r3, [pc, #148]	; (800300c <HAL_RCC_ClockConfig+0x254>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 0201 	bic.w	r2, r3, #1
 8002f7e:	4923      	ldr	r1, [pc, #140]	; (800300c <HAL_RCC_ClockConfig+0x254>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b21      	ldr	r3, [pc, #132]	; (800300c <HAL_RCC_ClockConfig+0x254>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e034      	b.n	8003002 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa4:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <HAL_RCC_ClockConfig+0x258>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4917      	ldr	r1, [pc, #92]	; (8003010 <HAL_RCC_ClockConfig+0x258>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <HAL_RCC_ClockConfig+0x258>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	490f      	ldr	r1, [pc, #60]	; (8003010 <HAL_RCC_ClockConfig+0x258>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fd6:	f000 f823 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <HAL_RCC_ClockConfig+0x258>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	490b      	ldr	r1, [pc, #44]	; (8003014 <HAL_RCC_ClockConfig+0x25c>)
 8002fe8:	5ccb      	ldrb	r3, [r1, r3]
 8002fea:	fa22 f303 	lsr.w	r3, r2, r3
 8002fee:	4a0a      	ldr	r2, [pc, #40]	; (8003018 <HAL_RCC_ClockConfig+0x260>)
 8002ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_RCC_ClockConfig+0x264>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe fd42 	bl	8001a80 <HAL_InitTick>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	72fb      	strb	r3, [r7, #11]

  return status;
 8003000:	7afb      	ldrb	r3, [r7, #11]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40023c00 	.word	0x40023c00
 8003010:	40023800 	.word	0x40023800
 8003014:	08007668 	.word	0x08007668
 8003018:	20000004 	.word	0x20000004
 800301c:	20000008 	.word	0x20000008

08003020 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003020:	b5b0      	push	{r4, r5, r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003026:	4b61      	ldr	r3, [pc, #388]	; (80031ac <HAL_RCC_GetSysClockFreq+0x18c>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d00d      	beq.n	8003052 <HAL_RCC_GetSysClockFreq+0x32>
 8003036:	2b0c      	cmp	r3, #12
 8003038:	f200 80a4 	bhi.w	8003184 <HAL_RCC_GetSysClockFreq+0x164>
 800303c:	2b04      	cmp	r3, #4
 800303e:	d002      	beq.n	8003046 <HAL_RCC_GetSysClockFreq+0x26>
 8003040:	2b08      	cmp	r3, #8
 8003042:	d003      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0x2c>
 8003044:	e09e      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003046:	4b5a      	ldr	r3, [pc, #360]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x190>)
 8003048:	613b      	str	r3, [r7, #16]
      break;
 800304a:	e0a9      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800304c:	4b59      	ldr	r3, [pc, #356]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x194>)
 800304e:	613b      	str	r3, [r7, #16]
      break;
 8003050:	e0a6      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	0c9b      	lsrs	r3, r3, #18
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	4a57      	ldr	r2, [pc, #348]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x198>)
 800305c:	5cd3      	ldrb	r3, [r2, r3]
 800305e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	0d9b      	lsrs	r3, r3, #22
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	3301      	adds	r3, #1
 800306a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800306c:	4b4f      	ldr	r3, [pc, #316]	; (80031ac <HAL_RCC_GetSysClockFreq+0x18c>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d041      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	461c      	mov	r4, r3
 800307c:	f04f 0500 	mov.w	r5, #0
 8003080:	4620      	mov	r0, r4
 8003082:	4629      	mov	r1, r5
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	014b      	lsls	r3, r1, #5
 800308e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003092:	0142      	lsls	r2, r0, #5
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	1b00      	subs	r0, r0, r4
 800309a:	eb61 0105 	sbc.w	r1, r1, r5
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	018b      	lsls	r3, r1, #6
 80030a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030ac:	0182      	lsls	r2, r0, #6
 80030ae:	1a12      	subs	r2, r2, r0
 80030b0:	eb63 0301 	sbc.w	r3, r3, r1
 80030b4:	f04f 0000 	mov.w	r0, #0
 80030b8:	f04f 0100 	mov.w	r1, #0
 80030bc:	00d9      	lsls	r1, r3, #3
 80030be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030c2:	00d0      	lsls	r0, r2, #3
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	1912      	adds	r2, r2, r4
 80030ca:	eb45 0303 	adc.w	r3, r5, r3
 80030ce:	f04f 0000 	mov.w	r0, #0
 80030d2:	f04f 0100 	mov.w	r1, #0
 80030d6:	0259      	lsls	r1, r3, #9
 80030d8:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80030dc:	0250      	lsls	r0, r2, #9
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	461a      	mov	r2, r3
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	f7fd fce3 	bl	8000ab8 <__aeabi_uldivmod>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4613      	mov	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	e040      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	461c      	mov	r4, r3
 8003100:	f04f 0500 	mov.w	r5, #0
 8003104:	4620      	mov	r0, r4
 8003106:	4629      	mov	r1, r5
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	014b      	lsls	r3, r1, #5
 8003112:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003116:	0142      	lsls	r2, r0, #5
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	1b00      	subs	r0, r0, r4
 800311e:	eb61 0105 	sbc.w	r1, r1, r5
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	018b      	lsls	r3, r1, #6
 800312c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003130:	0182      	lsls	r2, r0, #6
 8003132:	1a12      	subs	r2, r2, r0
 8003134:	eb63 0301 	sbc.w	r3, r3, r1
 8003138:	f04f 0000 	mov.w	r0, #0
 800313c:	f04f 0100 	mov.w	r1, #0
 8003140:	00d9      	lsls	r1, r3, #3
 8003142:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003146:	00d0      	lsls	r0, r2, #3
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	1912      	adds	r2, r2, r4
 800314e:	eb45 0303 	adc.w	r3, r5, r3
 8003152:	f04f 0000 	mov.w	r0, #0
 8003156:	f04f 0100 	mov.w	r1, #0
 800315a:	0299      	lsls	r1, r3, #10
 800315c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003160:	0290      	lsls	r0, r2, #10
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4610      	mov	r0, r2
 8003168:	4619      	mov	r1, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	461a      	mov	r2, r3
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	f7fd fca1 	bl	8000ab8 <__aeabi_uldivmod>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4613      	mov	r3, r2
 800317c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	613b      	str	r3, [r7, #16]
      break;
 8003182:	e00d      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_RCC_GetSysClockFreq+0x18c>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	0b5b      	lsrs	r3, r3, #13
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	3301      	adds	r3, #1
 8003194:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	613b      	str	r3, [r7, #16]
      break;
 800319e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a0:	693b      	ldr	r3, [r7, #16]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bdb0      	pop	{r4, r5, r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800
 80031b0:	00f42400 	.word	0x00f42400
 80031b4:	007a1200 	.word	0x007a1200
 80031b8:	0800765c 	.word	0x0800765c

080031bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c0:	4b02      	ldr	r3, [pc, #8]	; (80031cc <HAL_RCC_GetHCLKFreq+0x10>)
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	20000004 	.word	0x20000004

080031d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031d4:	f7ff fff2 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	0a1b      	lsrs	r3, r3, #8
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4903      	ldr	r1, [pc, #12]	; (80031f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40023800 	.word	0x40023800
 80031f4:	08007678 	.word	0x08007678

080031f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031fc:	f7ff ffde 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	0adb      	lsrs	r3, r3, #11
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4903      	ldr	r1, [pc, #12]	; (800321c <HAL_RCC_GetPCLK2Freq+0x24>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40023800 	.word	0x40023800
 800321c:	08007678 	.word	0x08007678

08003220 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003228:	2300      	movs	r3, #0
 800322a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800322c:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d12c      	bne.n	8003292 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003238:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003244:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	e016      	b.n	800327e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003250:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	4a1f      	ldr	r2, [pc, #124]	; (80032d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325a:	6253      	str	r3, [r2, #36]	; 0x24
 800325c:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003268:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003270:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003272:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	4a17      	ldr	r2, [pc, #92]	; (80032d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800327c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003284:	d105      	bne.n	8003292 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800328c:	d101      	bne.n	8003292 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800328e:	2301      	movs	r3, #1
 8003290:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d105      	bne.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003298:	4b10      	ldr	r3, [pc, #64]	; (80032dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a0f      	ldr	r2, [pc, #60]	; (80032dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800329e:	f043 0304 	orr.w	r3, r3, #4
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f023 0201 	bic.w	r2, r3, #1
 80032ac:	490b      	ldr	r1, [pc, #44]	; (80032dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d001      	beq.n	80032c6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	371c      	adds	r7, #28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40007000 	.word	0x40007000
 80032dc:	40023c00 	.word	0x40023c00

080032e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e031      	b.n	8003356 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fe f970 	bl	80015ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f000 fb3a 	bl	8003998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d001      	beq.n	8003378 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e03a      	b.n	80033ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003398:	d00e      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x58>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <HAL_TIM_Base_Start_IT+0x98>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d009      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x58>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a14      	ldr	r2, [pc, #80]	; (80033fc <HAL_TIM_Base_Start_IT+0x9c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x58>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a13      	ldr	r2, [pc, #76]	; (8003400 <HAL_TIM_Base_Start_IT+0xa0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d111      	bne.n	80033dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d010      	beq.n	80033ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033da:	e007      	b.n	80033ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	40000400 	.word	0x40000400
 80033fc:	40000800 	.word	0x40000800
 8003400:	40010800 	.word	0x40010800

08003404 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e031      	b.n	800347a <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f829 	bl	8003482 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3304      	adds	r3, #4
 8003440:	4619      	mov	r1, r3
 8003442:	4610      	mov	r0, r2
 8003444:	f000 faa8 	bl	8003998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d122      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d11b      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0202 	mvn.w	r2, #2
 80034c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fa43 	bl	8003962 <HAL_TIM_IC_CaptureCallback>
 80034dc:	e005      	b.n	80034ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa36 	bl	8003950 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fa45 	bl	8003974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d122      	bne.n	8003544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b04      	cmp	r3, #4
 800350a:	d11b      	bne.n	8003544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0204 	mvn.w	r2, #4
 8003514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2202      	movs	r2, #2
 800351a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fa19 	bl	8003962 <HAL_TIM_IC_CaptureCallback>
 8003530:	e005      	b.n	800353e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fa0c 	bl	8003950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fa1b 	bl	8003974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b08      	cmp	r3, #8
 8003550:	d122      	bne.n	8003598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b08      	cmp	r3, #8
 800355e:	d11b      	bne.n	8003598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0208 	mvn.w	r2, #8
 8003568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2204      	movs	r2, #4
 800356e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f9ef 	bl	8003962 <HAL_TIM_IC_CaptureCallback>
 8003584:	e005      	b.n	8003592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f9e2 	bl	8003950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f9f1 	bl	8003974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	2b10      	cmp	r3, #16
 80035a4:	d122      	bne.n	80035ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b10      	cmp	r3, #16
 80035b2:	d11b      	bne.n	80035ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0210 	mvn.w	r2, #16
 80035bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2208      	movs	r2, #8
 80035c2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f9c5 	bl	8003962 <HAL_TIM_IC_CaptureCallback>
 80035d8:	e005      	b.n	80035e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f9b8 	bl	8003950 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f9c7 	bl	8003974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d10e      	bne.n	8003618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b01      	cmp	r3, #1
 8003606:	d107      	bne.n	8003618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0201 	mvn.w	r2, #1
 8003610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd ff08 	bl	8001428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b40      	cmp	r3, #64	; 0x40
 8003624:	d10e      	bne.n	8003644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003630:	2b40      	cmp	r3, #64	; 0x40
 8003632:	d107      	bne.n	8003644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800363c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f9a1 	bl	8003986 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003662:	2302      	movs	r3, #2
 8003664:	e0ac      	b.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b0c      	cmp	r3, #12
 8003672:	f200 809f 	bhi.w	80037b4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003676:	a201      	add	r2, pc, #4	; (adr r2, 800367c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367c:	080036b1 	.word	0x080036b1
 8003680:	080037b5 	.word	0x080037b5
 8003684:	080037b5 	.word	0x080037b5
 8003688:	080037b5 	.word	0x080037b5
 800368c:	080036f1 	.word	0x080036f1
 8003690:	080037b5 	.word	0x080037b5
 8003694:	080037b5 	.word	0x080037b5
 8003698:	080037b5 	.word	0x080037b5
 800369c:	08003733 	.word	0x08003733
 80036a0:	080037b5 	.word	0x080037b5
 80036a4:	080037b5 	.word	0x080037b5
 80036a8:	080037b5 	.word	0x080037b5
 80036ac:	08003773 	.word	0x08003773
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f9de 	bl	8003a78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0208 	orr.w	r2, r2, #8
 80036ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0204 	bic.w	r2, r2, #4
 80036da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6999      	ldr	r1, [r3, #24]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	619a      	str	r2, [r3, #24]
      break;
 80036ee:	e062      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f9fa 	bl	8003af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800370a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6999      	ldr	r1, [r3, #24]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	021a      	lsls	r2, r3, #8
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	619a      	str	r2, [r3, #24]
      break;
 8003730:	e041      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	4618      	mov	r0, r3
 800373a:	f000 fa17 	bl	8003b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69da      	ldr	r2, [r3, #28]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0208 	orr.w	r2, r2, #8
 800374c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0204 	bic.w	r2, r2, #4
 800375c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69d9      	ldr	r1, [r3, #28]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	61da      	str	r2, [r3, #28]
      break;
 8003770:	e021      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fa34 	bl	8003be6 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800378c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800379c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69d9      	ldr	r1, [r3, #28]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	021a      	lsls	r2, r3, #8
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	61da      	str	r2, [r3, #28]
      break;
 80037b2:	e000      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80037b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_TIM_ConfigClockSource+0x18>
 80037dc:	2302      	movs	r3, #2
 80037de:	e0b3      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x180>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003806:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003818:	d03e      	beq.n	8003898 <HAL_TIM_ConfigClockSource+0xd0>
 800381a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381e:	f200 8087 	bhi.w	8003930 <HAL_TIM_ConfigClockSource+0x168>
 8003822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003826:	f000 8085 	beq.w	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 800382a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382e:	d87f      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x168>
 8003830:	2b70      	cmp	r3, #112	; 0x70
 8003832:	d01a      	beq.n	800386a <HAL_TIM_ConfigClockSource+0xa2>
 8003834:	2b70      	cmp	r3, #112	; 0x70
 8003836:	d87b      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x168>
 8003838:	2b60      	cmp	r3, #96	; 0x60
 800383a:	d050      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x116>
 800383c:	2b60      	cmp	r3, #96	; 0x60
 800383e:	d877      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x168>
 8003840:	2b50      	cmp	r3, #80	; 0x50
 8003842:	d03c      	beq.n	80038be <HAL_TIM_ConfigClockSource+0xf6>
 8003844:	2b50      	cmp	r3, #80	; 0x50
 8003846:	d873      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x168>
 8003848:	2b40      	cmp	r3, #64	; 0x40
 800384a:	d058      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x136>
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d86f      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x168>
 8003850:	2b30      	cmp	r3, #48	; 0x30
 8003852:	d064      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x156>
 8003854:	2b30      	cmp	r3, #48	; 0x30
 8003856:	d86b      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x168>
 8003858:	2b20      	cmp	r3, #32
 800385a:	d060      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x156>
 800385c:	2b20      	cmp	r3, #32
 800385e:	d867      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x168>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d05c      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x156>
 8003864:	2b10      	cmp	r3, #16
 8003866:	d05a      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003868:	e062      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6899      	ldr	r1, [r3, #8]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f000 fa69 	bl	8003d50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800388c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	609a      	str	r2, [r3, #8]
      break;
 8003896:	e04e      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6899      	ldr	r1, [r3, #8]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f000 fa52 	bl	8003d50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ba:	609a      	str	r2, [r3, #8]
      break;
 80038bc:	e03b      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f000 f9c9 	bl	8003c62 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2150      	movs	r1, #80	; 0x50
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fa20 	bl	8003d1c <TIM_ITRx_SetConfig>
      break;
 80038dc:	e02b      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6859      	ldr	r1, [r3, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	461a      	mov	r2, r3
 80038ec:	f000 f9e7 	bl	8003cbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2160      	movs	r1, #96	; 0x60
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fa10 	bl	8003d1c <TIM_ITRx_SetConfig>
      break;
 80038fc:	e01b      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6859      	ldr	r1, [r3, #4]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	461a      	mov	r2, r3
 800390c:	f000 f9a9 	bl	8003c62 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2140      	movs	r1, #64	; 0x40
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fa00 	bl	8003d1c <TIM_ITRx_SetConfig>
      break;
 800391c:	e00b      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4619      	mov	r1, r3
 8003928:	4610      	mov	r0, r2
 800392a:	f000 f9f7 	bl	8003d1c <TIM_ITRx_SetConfig>
        break;
 800392e:	e002      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003930:	bf00      	nop
 8003932:	e000      	b.n	8003936 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003934:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr

08003962 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr

08003974 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr

08003986 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ae:	d00f      	beq.n	80039d0 <TIM_Base_SetConfig+0x38>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a2b      	ldr	r2, [pc, #172]	; (8003a60 <TIM_Base_SetConfig+0xc8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00b      	beq.n	80039d0 <TIM_Base_SetConfig+0x38>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a2a      	ldr	r2, [pc, #168]	; (8003a64 <TIM_Base_SetConfig+0xcc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d007      	beq.n	80039d0 <TIM_Base_SetConfig+0x38>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a29      	ldr	r2, [pc, #164]	; (8003a68 <TIM_Base_SetConfig+0xd0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d003      	beq.n	80039d0 <TIM_Base_SetConfig+0x38>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a28      	ldr	r2, [pc, #160]	; (8003a6c <TIM_Base_SetConfig+0xd4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d108      	bne.n	80039e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e8:	d017      	beq.n	8003a1a <TIM_Base_SetConfig+0x82>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a1c      	ldr	r2, [pc, #112]	; (8003a60 <TIM_Base_SetConfig+0xc8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <TIM_Base_SetConfig+0x82>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a1b      	ldr	r2, [pc, #108]	; (8003a64 <TIM_Base_SetConfig+0xcc>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00f      	beq.n	8003a1a <TIM_Base_SetConfig+0x82>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a1a      	ldr	r2, [pc, #104]	; (8003a68 <TIM_Base_SetConfig+0xd0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <TIM_Base_SetConfig+0x82>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a19      	ldr	r2, [pc, #100]	; (8003a6c <TIM_Base_SetConfig+0xd4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d007      	beq.n	8003a1a <TIM_Base_SetConfig+0x82>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a18      	ldr	r2, [pc, #96]	; (8003a70 <TIM_Base_SetConfig+0xd8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d003      	beq.n	8003a1a <TIM_Base_SetConfig+0x82>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a17      	ldr	r2, [pc, #92]	; (8003a74 <TIM_Base_SetConfig+0xdc>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d108      	bne.n	8003a2c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	615a      	str	r2, [r3, #20]
}
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr
 8003a60:	40000400 	.word	0x40000400
 8003a64:	40000800 	.word	0x40000800
 8003a68:	40000c00 	.word	0x40000c00
 8003a6c:	40010800 	.word	0x40010800
 8003a70:	40010c00 	.word	0x40010c00
 8003a74:	40011000 	.word	0x40011000

08003a78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f023 0201 	bic.w	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0303 	bic.w	r3, r3, #3
 8003aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f023 0302 	bic.w	r3, r3, #2
 8003ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	621a      	str	r2, [r3, #32]
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f023 0210 	bic.w	r2, r3, #16
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 0320 	bic.w	r3, r3, #32
 8003b3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	621a      	str	r2, [r3, #32]
}
 8003b62:	bf00      	nop
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	621a      	str	r2, [r3, #32]
}
 8003bdc:	bf00      	nop
 8003bde:	371c      	adds	r7, #28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr

08003be6 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b087      	sub	sp, #28
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	031b      	lsls	r3, r3, #12
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	621a      	str	r2, [r3, #32]
}
 8003c58:	bf00      	nop
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr

08003c62 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b087      	sub	sp, #28
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f023 0201 	bic.w	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f023 030a 	bic.w	r3, r3, #10
 8003c9e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	621a      	str	r2, [r3, #32]
}
 8003cb4:	bf00      	nop
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr

08003cbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b087      	sub	sp, #28
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f023 0210 	bic.w	r2, r3, #16
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ce8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	031b      	lsls	r3, r3, #12
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f043 0307 	orr.w	r3, r3, #7
 8003d3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	609a      	str	r2, [r3, #8]
}
 8003d46:	bf00      	nop
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	021a      	lsls	r2, r3, #8
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	609a      	str	r2, [r3, #8]
}
 8003d84:	bf00      	nop
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr
	...

08003d90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e046      	b.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dea:	d00e      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d009      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a12      	ldr	r2, [pc, #72]	; (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d004      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a10      	ldr	r2, [pc, #64]	; (8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d10c      	bne.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr
 8003e40:	40000400 	.word	0x40000400
 8003e44:	40000800 	.word	0x40000800
 8003e48:	40010800 	.word	0x40010800

08003e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e03f      	b.n	8003ede <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fd fc48 	bl	8001708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2224      	movs	r2, #36	; 0x24
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fc85 	bl	80047a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695a      	ldr	r2, [r3, #20]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b08a      	sub	sp, #40	; 0x28
 8003eea:	af02      	add	r7, sp, #8
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d17c      	bne.n	8004000 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_UART_Transmit+0x2c>
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e075      	b.n	8004002 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_UART_Transmit+0x3e>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e06e      	b.n	8004002 <HAL_UART_Transmit+0x11c>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2221      	movs	r2, #33	; 0x21
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f3a:	f7fd fded 	bl	8001b18 <HAL_GetTick>
 8003f3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	88fa      	ldrh	r2, [r7, #6]
 8003f44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	88fa      	ldrh	r2, [r7, #6]
 8003f4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f54:	d108      	bne.n	8003f68 <HAL_UART_Transmit+0x82>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d104      	bne.n	8003f68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	e003      	b.n	8003f70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f78:	e02a      	b.n	8003fd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2200      	movs	r2, #0
 8003f82:	2180      	movs	r1, #128	; 0x80
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 fa38 	bl	80043fa <UART_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e036      	b.n	8004002 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10b      	bne.n	8003fb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	3302      	adds	r3, #2
 8003fae:	61bb      	str	r3, [r7, #24]
 8003fb0:	e007      	b.n	8003fc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	781a      	ldrb	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1cf      	bne.n	8003f7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2140      	movs	r1, #64	; 0x40
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fa08 	bl	80043fa <UART_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e006      	b.n	8004002 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e000      	b.n	8004002 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004000:	2302      	movs	r3, #2
  }
}
 8004002:	4618      	mov	r0, r3
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	4613      	mov	r3, r2
 8004016:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b20      	cmp	r3, #32
 8004022:	d11d      	bne.n	8004060 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_UART_Receive_IT+0x26>
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e016      	b.n	8004062 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_UART_Receive_IT+0x38>
 800403e:	2302      	movs	r3, #2
 8004040:	e00f      	b.n	8004062 <HAL_UART_Receive_IT+0x58>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	461a      	mov	r2, r3
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fa19 	bl	800448e <UART_Start_Receive_IT>
 800405c:	4603      	mov	r3, r0
 800405e:	e000      	b.n	8004062 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004060:	2302      	movs	r3, #2
  }
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	; 0x28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800408c:	2300      	movs	r3, #0
 800408e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10d      	bne.n	80040be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	f003 0320 	and.w	r3, r3, #32
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_UART_IRQHandler+0x52>
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fac9 	bl	800464e <UART_Receive_IT>
      return;
 80040bc:	e17b      	b.n	80043b6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80b1 	beq.w	8004228 <HAL_UART_IRQHandler+0x1bc>
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d105      	bne.n	80040dc <HAL_UART_IRQHandler+0x70>
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 80a6 	beq.w	8004228 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <HAL_UART_IRQHandler+0x90>
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	f043 0201 	orr.w	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_UART_IRQHandler+0xb0>
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	f043 0202 	orr.w	r2, r3, #2
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <HAL_UART_IRQHandler+0xd0>
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	f043 0204 	orr.w	r2, r3, #4
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00f      	beq.n	8004166 <HAL_UART_IRQHandler+0xfa>
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b00      	cmp	r3, #0
 800414e:	d104      	bne.n	800415a <HAL_UART_IRQHandler+0xee>
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f043 0208 	orr.w	r2, r3, #8
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 811e 	beq.w	80043ac <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <HAL_UART_IRQHandler+0x11e>
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	f003 0320 	and.w	r3, r3, #32
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 fa62 	bl	800464e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004194:	2b40      	cmp	r3, #64	; 0x40
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d102      	bne.n	80041b2 <HAL_UART_IRQHandler+0x146>
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d031      	beq.n	8004216 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f9a4 	bl	8004500 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b40      	cmp	r3, #64	; 0x40
 80041c4:	d123      	bne.n	800420e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695a      	ldr	r2, [r3, #20]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d013      	beq.n	8004206 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	4a76      	ldr	r2, [pc, #472]	; (80043bc <HAL_UART_IRQHandler+0x350>)
 80041e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fe f89a 	bl	8002324 <HAL_DMA_Abort_IT>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d016      	beq.n	8004224 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004200:	4610      	mov	r0, r2
 8004202:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004204:	e00e      	b.n	8004224 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f8e3 	bl	80043d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800420c:	e00a      	b.n	8004224 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f8df 	bl	80043d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	e006      	b.n	8004224 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f8db 	bl	80043d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004222:	e0c3      	b.n	80043ac <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004224:	bf00      	nop
    return;
 8004226:	e0c1      	b.n	80043ac <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	2b01      	cmp	r3, #1
 800422e:	f040 80a1 	bne.w	8004374 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 809b 	beq.w	8004374 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8095 	beq.w	8004374 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426a:	2b40      	cmp	r3, #64	; 0x40
 800426c:	d14e      	bne.n	800430c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004278:	8a3b      	ldrh	r3, [r7, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 8098 	beq.w	80043b0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004284:	8a3a      	ldrh	r2, [r7, #16]
 8004286:	429a      	cmp	r2, r3
 8004288:	f080 8092 	bcs.w	80043b0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8a3a      	ldrh	r2, [r7, #16]
 8004290:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	2b20      	cmp	r3, #32
 800429a:	d02b      	beq.n	80042f4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042aa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695a      	ldr	r2, [r3, #20]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0201 	bic.w	r2, r2, #1
 80042ba:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695a      	ldr	r2, [r3, #20]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ca:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0210 	bic.w	r2, r2, #16
 80042e8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fd ffdb 	bl	80022aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	b29b      	uxth	r3, r3
 8004302:	4619      	mov	r1, r3
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f86d 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800430a:	e051      	b.n	80043b0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004314:	b29b      	uxth	r3, r3
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d047      	beq.n	80043b4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004324:	8a7b      	ldrh	r3, [r7, #18]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d044      	beq.n	80043b4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004338:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695a      	ldr	r2, [r3, #20]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0201 	bic.w	r2, r2, #1
 8004348:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0210 	bic.w	r2, r2, #16
 8004366:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004368:	8a7b      	ldrh	r3, [r7, #18]
 800436a:	4619      	mov	r1, r3
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f839 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004372:	e01f      	b.n	80043b4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437a:	2b00      	cmp	r3, #0
 800437c:	d008      	beq.n	8004390 <HAL_UART_IRQHandler+0x324>
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f8f9 	bl	8004580 <UART_Transmit_IT>
    return;
 800438e:	e012      	b.n	80043b6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00d      	beq.n	80043b6 <HAL_UART_IRQHandler+0x34a>
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f93a 	bl	800461e <UART_EndTransmit_IT>
    return;
 80043aa:	e004      	b.n	80043b6 <HAL_UART_IRQHandler+0x34a>
    return;
 80043ac:	bf00      	nop
 80043ae:	e002      	b.n	80043b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80043b0:	bf00      	nop
 80043b2:	e000      	b.n	80043b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80043b4:	bf00      	nop
  }
}
 80043b6:	3728      	adds	r7, #40	; 0x28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	08004559 	.word	0x08004559

080043c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr

080043fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	603b      	str	r3, [r7, #0]
 8004406:	4613      	mov	r3, r2
 8004408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800440a:	e02c      	b.n	8004466 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004412:	d028      	beq.n	8004466 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <UART_WaitOnFlagUntilTimeout+0x30>
 800441a:	f7fd fb7d 	bl	8001b18 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	429a      	cmp	r2, r3
 8004428:	d21d      	bcs.n	8004466 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004438:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695a      	ldr	r2, [r3, #20]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0201 	bic.w	r2, r2, #1
 8004448:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e00f      	b.n	8004486 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4013      	ands	r3, r2
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	429a      	cmp	r2, r3
 8004474:	bf0c      	ite	eq
 8004476:	2301      	moveq	r3, #1
 8004478:	2300      	movne	r3, #0
 800447a:	b2db      	uxtb	r3, r3
 800447c:	461a      	mov	r2, r3
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	429a      	cmp	r2, r3
 8004482:	d0c3      	beq.n	800440c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800448e:	b480      	push	{r7}
 8004490:	b085      	sub	sp, #20
 8004492:	af00      	add	r7, sp, #0
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	4613      	mov	r3, r2
 800449a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	88fa      	ldrh	r2, [r7, #6]
 80044a6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	88fa      	ldrh	r2, [r7, #6]
 80044ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2222      	movs	r2, #34	; 0x22
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695a      	ldr	r2, [r3, #20]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0220 	orr.w	r2, r2, #32
 80044f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004516:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452c:	2b01      	cmp	r3, #1
 800452e:	d107      	bne.n	8004540 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0210 	bic.w	r2, r2, #16
 800453e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7ff ff2d 	bl	80043d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004578:	bf00      	nop
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b21      	cmp	r3, #33	; 0x21
 8004592:	d13e      	bne.n	8004612 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459c:	d114      	bne.n	80045c8 <UART_Transmit_IT+0x48>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d110      	bne.n	80045c8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	1c9a      	adds	r2, r3, #2
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	621a      	str	r2, [r3, #32]
 80045c6:	e008      	b.n	80045da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	1c59      	adds	r1, r3, #1
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6211      	str	r1, [r2, #32]
 80045d2:	781a      	ldrb	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	4619      	mov	r1, r3
 80045e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10f      	bne.n	800460e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800460c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	e000      	b.n	8004614 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004612:	2302      	movs	r3, #2
  }
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr

0800461e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004634:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff febe 	bl	80043c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b086      	sub	sp, #24
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b22      	cmp	r3, #34	; 0x22
 8004660:	f040 8099 	bne.w	8004796 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466c:	d117      	bne.n	800469e <UART_Receive_IT+0x50>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d113      	bne.n	800469e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	b29b      	uxth	r3, r3
 8004688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468c:	b29a      	uxth	r2, r3
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	1c9a      	adds	r2, r3, #2
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	629a      	str	r2, [r3, #40]	; 0x28
 800469c:	e026      	b.n	80046ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b0:	d007      	beq.n	80046c2 <UART_Receive_IT+0x74>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <UART_Receive_IT+0x82>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	e008      	b.n	80046e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	4619      	mov	r1, r3
 80046fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d148      	bne.n	8004792 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0220 	bic.w	r2, r2, #32
 800470e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800471e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0201 	bic.w	r2, r2, #1
 800472e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	2b01      	cmp	r3, #1
 800473e:	d123      	bne.n	8004788 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0210 	bic.w	r2, r2, #16
 8004754:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	2b10      	cmp	r3, #16
 8004762:	d10a      	bne.n	800477a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800477e:	4619      	mov	r1, r3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff fe2f 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
 8004786:	e002      	b.n	800478e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7fc fe8b 	bl	80014a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	e002      	b.n	8004798 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	e000      	b.n	8004798 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004796:	2302      	movs	r3, #2
  }
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80047e0:	f023 030c 	bic.w	r3, r3, #12
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	430b      	orrs	r3, r1
 80047ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a55      	ldr	r2, [pc, #340]	; (8004960 <UART_SetConfig+0x1c0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d103      	bne.n	8004816 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800480e:	f7fe fcf3 	bl	80031f8 <HAL_RCC_GetPCLK2Freq>
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	e002      	b.n	800481c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004816:	f7fe fcdb 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 800481a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004824:	d14c      	bne.n	80048c0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009a      	lsls	r2, r3, #2
 8004830:	441a      	add	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	4a49      	ldr	r2, [pc, #292]	; (8004964 <UART_SetConfig+0x1c4>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	0119      	lsls	r1, r3, #4
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009a      	lsls	r2, r3, #2
 8004850:	441a      	add	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	fbb2 f2f3 	udiv	r2, r2, r3
 800485c:	4b41      	ldr	r3, [pc, #260]	; (8004964 <UART_SetConfig+0x1c4>)
 800485e:	fba3 0302 	umull	r0, r3, r3, r2
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	2064      	movs	r0, #100	; 0x64
 8004866:	fb00 f303 	mul.w	r3, r0, r3
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	3332      	adds	r3, #50	; 0x32
 8004870:	4a3c      	ldr	r2, [pc, #240]	; (8004964 <UART_SetConfig+0x1c4>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800487e:	4419      	add	r1, r3
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	009a      	lsls	r2, r3, #2
 800488a:	441a      	add	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	fbb2 f2f3 	udiv	r2, r2, r3
 8004896:	4b33      	ldr	r3, [pc, #204]	; (8004964 <UART_SetConfig+0x1c4>)
 8004898:	fba3 0302 	umull	r0, r3, r3, r2
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	2064      	movs	r0, #100	; 0x64
 80048a0:	fb00 f303 	mul.w	r3, r0, r3
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	3332      	adds	r3, #50	; 0x32
 80048aa:	4a2e      	ldr	r2, [pc, #184]	; (8004964 <UART_SetConfig+0x1c4>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	095b      	lsrs	r3, r3, #5
 80048b2:	f003 0207 	and.w	r2, r3, #7
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	440a      	add	r2, r1
 80048bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048be:	e04a      	b.n	8004956 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009a      	lsls	r2, r3, #2
 80048ca:	441a      	add	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d6:	4a23      	ldr	r2, [pc, #140]	; (8004964 <UART_SetConfig+0x1c4>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	0119      	lsls	r1, r3, #4
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	009a      	lsls	r2, r3, #2
 80048ea:	441a      	add	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80048f6:	4b1b      	ldr	r3, [pc, #108]	; (8004964 <UART_SetConfig+0x1c4>)
 80048f8:	fba3 0302 	umull	r0, r3, r3, r2
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	2064      	movs	r0, #100	; 0x64
 8004900:	fb00 f303 	mul.w	r3, r0, r3
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	3332      	adds	r3, #50	; 0x32
 800490a:	4a16      	ldr	r2, [pc, #88]	; (8004964 <UART_SetConfig+0x1c4>)
 800490c:	fba2 2303 	umull	r2, r3, r2, r3
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004916:	4419      	add	r1, r3
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4613      	mov	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	009a      	lsls	r2, r3, #2
 8004922:	441a      	add	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	fbb2 f2f3 	udiv	r2, r2, r3
 800492e:	4b0d      	ldr	r3, [pc, #52]	; (8004964 <UART_SetConfig+0x1c4>)
 8004930:	fba3 0302 	umull	r0, r3, r3, r2
 8004934:	095b      	lsrs	r3, r3, #5
 8004936:	2064      	movs	r0, #100	; 0x64
 8004938:	fb00 f303 	mul.w	r3, r0, r3
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	3332      	adds	r3, #50	; 0x32
 8004942:	4a08      	ldr	r2, [pc, #32]	; (8004964 <UART_SetConfig+0x1c4>)
 8004944:	fba2 2303 	umull	r2, r3, r2, r3
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	f003 020f 	and.w	r2, r3, #15
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	440a      	add	r2, r1
 8004954:	609a      	str	r2, [r3, #8]
}
 8004956:	bf00      	nop
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40013800 	.word	0x40013800
 8004964:	51eb851f 	.word	0x51eb851f

08004968 <atoi>:
 8004968:	220a      	movs	r2, #10
 800496a:	2100      	movs	r1, #0
 800496c:	f000 bdba 	b.w	80054e4 <strtol>

08004970 <__errno>:
 8004970:	4b01      	ldr	r3, [pc, #4]	; (8004978 <__errno+0x8>)
 8004972:	6818      	ldr	r0, [r3, #0]
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000010 	.word	0x20000010

0800497c <__libc_init_array>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	2600      	movs	r6, #0
 8004980:	4d0c      	ldr	r5, [pc, #48]	; (80049b4 <__libc_init_array+0x38>)
 8004982:	4c0d      	ldr	r4, [pc, #52]	; (80049b8 <__libc_init_array+0x3c>)
 8004984:	1b64      	subs	r4, r4, r5
 8004986:	10a4      	asrs	r4, r4, #2
 8004988:	42a6      	cmp	r6, r4
 800498a:	d109      	bne.n	80049a0 <__libc_init_array+0x24>
 800498c:	f002 fe2a 	bl	80075e4 <_init>
 8004990:	2600      	movs	r6, #0
 8004992:	4d0a      	ldr	r5, [pc, #40]	; (80049bc <__libc_init_array+0x40>)
 8004994:	4c0a      	ldr	r4, [pc, #40]	; (80049c0 <__libc_init_array+0x44>)
 8004996:	1b64      	subs	r4, r4, r5
 8004998:	10a4      	asrs	r4, r4, #2
 800499a:	42a6      	cmp	r6, r4
 800499c:	d105      	bne.n	80049aa <__libc_init_array+0x2e>
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a4:	4798      	blx	r3
 80049a6:	3601      	adds	r6, #1
 80049a8:	e7ee      	b.n	8004988 <__libc_init_array+0xc>
 80049aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ae:	4798      	blx	r3
 80049b0:	3601      	adds	r6, #1
 80049b2:	e7f2      	b.n	800499a <__libc_init_array+0x1e>
 80049b4:	08007a6c 	.word	0x08007a6c
 80049b8:	08007a6c 	.word	0x08007a6c
 80049bc:	08007a6c 	.word	0x08007a6c
 80049c0:	08007a70 	.word	0x08007a70

080049c4 <memset>:
 80049c4:	4603      	mov	r3, r0
 80049c6:	4402      	add	r2, r0
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d100      	bne.n	80049ce <memset+0xa>
 80049cc:	4770      	bx	lr
 80049ce:	f803 1b01 	strb.w	r1, [r3], #1
 80049d2:	e7f9      	b.n	80049c8 <memset+0x4>

080049d4 <__cvt>:
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049da:	461f      	mov	r7, r3
 80049dc:	bfbb      	ittet	lt
 80049de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80049e2:	461f      	movlt	r7, r3
 80049e4:	2300      	movge	r3, #0
 80049e6:	232d      	movlt	r3, #45	; 0x2d
 80049e8:	b088      	sub	sp, #32
 80049ea:	4614      	mov	r4, r2
 80049ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80049ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80049f0:	7013      	strb	r3, [r2, #0]
 80049f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80049f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80049f8:	f023 0820 	bic.w	r8, r3, #32
 80049fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a00:	d005      	beq.n	8004a0e <__cvt+0x3a>
 8004a02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a06:	d100      	bne.n	8004a0a <__cvt+0x36>
 8004a08:	3501      	adds	r5, #1
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e000      	b.n	8004a10 <__cvt+0x3c>
 8004a0e:	2303      	movs	r3, #3
 8004a10:	aa07      	add	r2, sp, #28
 8004a12:	9204      	str	r2, [sp, #16]
 8004a14:	aa06      	add	r2, sp, #24
 8004a16:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a1a:	e9cd 3500 	strd	r3, r5, [sp]
 8004a1e:	4622      	mov	r2, r4
 8004a20:	463b      	mov	r3, r7
 8004a22:	f000 feb9 	bl	8005798 <_dtoa_r>
 8004a26:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a2a:	4606      	mov	r6, r0
 8004a2c:	d102      	bne.n	8004a34 <__cvt+0x60>
 8004a2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a30:	07db      	lsls	r3, r3, #31
 8004a32:	d522      	bpl.n	8004a7a <__cvt+0xa6>
 8004a34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a38:	eb06 0905 	add.w	r9, r6, r5
 8004a3c:	d110      	bne.n	8004a60 <__cvt+0x8c>
 8004a3e:	7833      	ldrb	r3, [r6, #0]
 8004a40:	2b30      	cmp	r3, #48	; 0x30
 8004a42:	d10a      	bne.n	8004a5a <__cvt+0x86>
 8004a44:	2200      	movs	r2, #0
 8004a46:	2300      	movs	r3, #0
 8004a48:	4620      	mov	r0, r4
 8004a4a:	4639      	mov	r1, r7
 8004a4c:	f7fb ffc4 	bl	80009d8 <__aeabi_dcmpeq>
 8004a50:	b918      	cbnz	r0, 8004a5a <__cvt+0x86>
 8004a52:	f1c5 0501 	rsb	r5, r5, #1
 8004a56:	f8ca 5000 	str.w	r5, [sl]
 8004a5a:	f8da 3000 	ldr.w	r3, [sl]
 8004a5e:	4499      	add	r9, r3
 8004a60:	2200      	movs	r2, #0
 8004a62:	2300      	movs	r3, #0
 8004a64:	4620      	mov	r0, r4
 8004a66:	4639      	mov	r1, r7
 8004a68:	f7fb ffb6 	bl	80009d8 <__aeabi_dcmpeq>
 8004a6c:	b108      	cbz	r0, 8004a72 <__cvt+0x9e>
 8004a6e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a72:	2230      	movs	r2, #48	; 0x30
 8004a74:	9b07      	ldr	r3, [sp, #28]
 8004a76:	454b      	cmp	r3, r9
 8004a78:	d307      	bcc.n	8004a8a <__cvt+0xb6>
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	9b07      	ldr	r3, [sp, #28]
 8004a7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a80:	1b9b      	subs	r3, r3, r6
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	b008      	add	sp, #32
 8004a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a8a:	1c59      	adds	r1, r3, #1
 8004a8c:	9107      	str	r1, [sp, #28]
 8004a8e:	701a      	strb	r2, [r3, #0]
 8004a90:	e7f0      	b.n	8004a74 <__cvt+0xa0>

08004a92 <__exponent>:
 8004a92:	4603      	mov	r3, r0
 8004a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a96:	2900      	cmp	r1, #0
 8004a98:	f803 2b02 	strb.w	r2, [r3], #2
 8004a9c:	bfb6      	itet	lt
 8004a9e:	222d      	movlt	r2, #45	; 0x2d
 8004aa0:	222b      	movge	r2, #43	; 0x2b
 8004aa2:	4249      	neglt	r1, r1
 8004aa4:	2909      	cmp	r1, #9
 8004aa6:	7042      	strb	r2, [r0, #1]
 8004aa8:	dd2b      	ble.n	8004b02 <__exponent+0x70>
 8004aaa:	f10d 0407 	add.w	r4, sp, #7
 8004aae:	46a4      	mov	ip, r4
 8004ab0:	270a      	movs	r7, #10
 8004ab2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004ab6:	460a      	mov	r2, r1
 8004ab8:	46a6      	mov	lr, r4
 8004aba:	fb07 1516 	mls	r5, r7, r6, r1
 8004abe:	2a63      	cmp	r2, #99	; 0x63
 8004ac0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004ac4:	4631      	mov	r1, r6
 8004ac6:	f104 34ff 	add.w	r4, r4, #4294967295
 8004aca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004ace:	dcf0      	bgt.n	8004ab2 <__exponent+0x20>
 8004ad0:	3130      	adds	r1, #48	; 0x30
 8004ad2:	f1ae 0502 	sub.w	r5, lr, #2
 8004ad6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004ada:	4629      	mov	r1, r5
 8004adc:	1c44      	adds	r4, r0, #1
 8004ade:	4561      	cmp	r1, ip
 8004ae0:	d30a      	bcc.n	8004af8 <__exponent+0x66>
 8004ae2:	f10d 0209 	add.w	r2, sp, #9
 8004ae6:	eba2 020e 	sub.w	r2, r2, lr
 8004aea:	4565      	cmp	r5, ip
 8004aec:	bf88      	it	hi
 8004aee:	2200      	movhi	r2, #0
 8004af0:	4413      	add	r3, r2
 8004af2:	1a18      	subs	r0, r3, r0
 8004af4:	b003      	add	sp, #12
 8004af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004afc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004b00:	e7ed      	b.n	8004ade <__exponent+0x4c>
 8004b02:	2330      	movs	r3, #48	; 0x30
 8004b04:	3130      	adds	r1, #48	; 0x30
 8004b06:	7083      	strb	r3, [r0, #2]
 8004b08:	70c1      	strb	r1, [r0, #3]
 8004b0a:	1d03      	adds	r3, r0, #4
 8004b0c:	e7f1      	b.n	8004af2 <__exponent+0x60>
	...

08004b10 <_printf_float>:
 8004b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b14:	b091      	sub	sp, #68	; 0x44
 8004b16:	460c      	mov	r4, r1
 8004b18:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004b1c:	4616      	mov	r6, r2
 8004b1e:	461f      	mov	r7, r3
 8004b20:	4605      	mov	r5, r0
 8004b22:	f001 fddf 	bl	80066e4 <_localeconv_r>
 8004b26:	6803      	ldr	r3, [r0, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b2c:	f7fb fb28 	bl	8000180 <strlen>
 8004b30:	2300      	movs	r3, #0
 8004b32:	930e      	str	r3, [sp, #56]	; 0x38
 8004b34:	f8d8 3000 	ldr.w	r3, [r8]
 8004b38:	900a      	str	r0, [sp, #40]	; 0x28
 8004b3a:	3307      	adds	r3, #7
 8004b3c:	f023 0307 	bic.w	r3, r3, #7
 8004b40:	f103 0208 	add.w	r2, r3, #8
 8004b44:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004b48:	f8d4 b000 	ldr.w	fp, [r4]
 8004b4c:	f8c8 2000 	str.w	r2, [r8]
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b58:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004b5c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004b60:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b62:	f04f 32ff 	mov.w	r2, #4294967295
 8004b66:	4640      	mov	r0, r8
 8004b68:	4b9c      	ldr	r3, [pc, #624]	; (8004ddc <_printf_float+0x2cc>)
 8004b6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b6c:	f7fb ff66 	bl	8000a3c <__aeabi_dcmpun>
 8004b70:	bb70      	cbnz	r0, 8004bd0 <_printf_float+0xc0>
 8004b72:	f04f 32ff 	mov.w	r2, #4294967295
 8004b76:	4640      	mov	r0, r8
 8004b78:	4b98      	ldr	r3, [pc, #608]	; (8004ddc <_printf_float+0x2cc>)
 8004b7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b7c:	f7fb ff40 	bl	8000a00 <__aeabi_dcmple>
 8004b80:	bb30      	cbnz	r0, 8004bd0 <_printf_float+0xc0>
 8004b82:	2200      	movs	r2, #0
 8004b84:	2300      	movs	r3, #0
 8004b86:	4640      	mov	r0, r8
 8004b88:	4651      	mov	r1, sl
 8004b8a:	f7fb ff2f 	bl	80009ec <__aeabi_dcmplt>
 8004b8e:	b110      	cbz	r0, 8004b96 <_printf_float+0x86>
 8004b90:	232d      	movs	r3, #45	; 0x2d
 8004b92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b96:	4b92      	ldr	r3, [pc, #584]	; (8004de0 <_printf_float+0x2d0>)
 8004b98:	4892      	ldr	r0, [pc, #584]	; (8004de4 <_printf_float+0x2d4>)
 8004b9a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004b9e:	bf94      	ite	ls
 8004ba0:	4698      	movls	r8, r3
 8004ba2:	4680      	movhi	r8, r0
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	f04f 0a00 	mov.w	sl, #0
 8004baa:	6123      	str	r3, [r4, #16]
 8004bac:	f02b 0304 	bic.w	r3, fp, #4
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	4633      	mov	r3, r6
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	9700      	str	r7, [sp, #0]
 8004bba:	aa0f      	add	r2, sp, #60	; 0x3c
 8004bbc:	f000 f9d4 	bl	8004f68 <_printf_common>
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	f040 8090 	bne.w	8004ce6 <_printf_float+0x1d6>
 8004bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bca:	b011      	add	sp, #68	; 0x44
 8004bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	4653      	mov	r3, sl
 8004bd4:	4640      	mov	r0, r8
 8004bd6:	4651      	mov	r1, sl
 8004bd8:	f7fb ff30 	bl	8000a3c <__aeabi_dcmpun>
 8004bdc:	b148      	cbz	r0, 8004bf2 <_printf_float+0xe2>
 8004bde:	f1ba 0f00 	cmp.w	sl, #0
 8004be2:	bfb8      	it	lt
 8004be4:	232d      	movlt	r3, #45	; 0x2d
 8004be6:	4880      	ldr	r0, [pc, #512]	; (8004de8 <_printf_float+0x2d8>)
 8004be8:	bfb8      	it	lt
 8004bea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004bee:	4b7f      	ldr	r3, [pc, #508]	; (8004dec <_printf_float+0x2dc>)
 8004bf0:	e7d3      	b.n	8004b9a <_printf_float+0x8a>
 8004bf2:	6863      	ldr	r3, [r4, #4]
 8004bf4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	d142      	bne.n	8004c82 <_printf_float+0x172>
 8004bfc:	2306      	movs	r3, #6
 8004bfe:	6063      	str	r3, [r4, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	9206      	str	r2, [sp, #24]
 8004c04:	aa0e      	add	r2, sp, #56	; 0x38
 8004c06:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004c0a:	aa0d      	add	r2, sp, #52	; 0x34
 8004c0c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004c10:	9203      	str	r2, [sp, #12]
 8004c12:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004c16:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004c1a:	6023      	str	r3, [r4, #0]
 8004c1c:	6863      	ldr	r3, [r4, #4]
 8004c1e:	4642      	mov	r2, r8
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	4628      	mov	r0, r5
 8004c24:	4653      	mov	r3, sl
 8004c26:	910b      	str	r1, [sp, #44]	; 0x2c
 8004c28:	f7ff fed4 	bl	80049d4 <__cvt>
 8004c2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c2e:	4680      	mov	r8, r0
 8004c30:	2947      	cmp	r1, #71	; 0x47
 8004c32:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c34:	d108      	bne.n	8004c48 <_printf_float+0x138>
 8004c36:	1cc8      	adds	r0, r1, #3
 8004c38:	db02      	blt.n	8004c40 <_printf_float+0x130>
 8004c3a:	6863      	ldr	r3, [r4, #4]
 8004c3c:	4299      	cmp	r1, r3
 8004c3e:	dd40      	ble.n	8004cc2 <_printf_float+0x1b2>
 8004c40:	f1a9 0902 	sub.w	r9, r9, #2
 8004c44:	fa5f f989 	uxtb.w	r9, r9
 8004c48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c4c:	d81f      	bhi.n	8004c8e <_printf_float+0x17e>
 8004c4e:	464a      	mov	r2, r9
 8004c50:	3901      	subs	r1, #1
 8004c52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c56:	910d      	str	r1, [sp, #52]	; 0x34
 8004c58:	f7ff ff1b 	bl	8004a92 <__exponent>
 8004c5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c5e:	4682      	mov	sl, r0
 8004c60:	1813      	adds	r3, r2, r0
 8004c62:	2a01      	cmp	r2, #1
 8004c64:	6123      	str	r3, [r4, #16]
 8004c66:	dc02      	bgt.n	8004c6e <_printf_float+0x15e>
 8004c68:	6822      	ldr	r2, [r4, #0]
 8004c6a:	07d2      	lsls	r2, r2, #31
 8004c6c:	d501      	bpl.n	8004c72 <_printf_float+0x162>
 8004c6e:	3301      	adds	r3, #1
 8004c70:	6123      	str	r3, [r4, #16]
 8004c72:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d09b      	beq.n	8004bb2 <_printf_float+0xa2>
 8004c7a:	232d      	movs	r3, #45	; 0x2d
 8004c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c80:	e797      	b.n	8004bb2 <_printf_float+0xa2>
 8004c82:	2947      	cmp	r1, #71	; 0x47
 8004c84:	d1bc      	bne.n	8004c00 <_printf_float+0xf0>
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1ba      	bne.n	8004c00 <_printf_float+0xf0>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e7b7      	b.n	8004bfe <_printf_float+0xee>
 8004c8e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004c92:	d118      	bne.n	8004cc6 <_printf_float+0x1b6>
 8004c94:	2900      	cmp	r1, #0
 8004c96:	6863      	ldr	r3, [r4, #4]
 8004c98:	dd0b      	ble.n	8004cb2 <_printf_float+0x1a2>
 8004c9a:	6121      	str	r1, [r4, #16]
 8004c9c:	b913      	cbnz	r3, 8004ca4 <_printf_float+0x194>
 8004c9e:	6822      	ldr	r2, [r4, #0]
 8004ca0:	07d0      	lsls	r0, r2, #31
 8004ca2:	d502      	bpl.n	8004caa <_printf_float+0x19a>
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	440b      	add	r3, r1
 8004ca8:	6123      	str	r3, [r4, #16]
 8004caa:	f04f 0a00 	mov.w	sl, #0
 8004cae:	65a1      	str	r1, [r4, #88]	; 0x58
 8004cb0:	e7df      	b.n	8004c72 <_printf_float+0x162>
 8004cb2:	b913      	cbnz	r3, 8004cba <_printf_float+0x1aa>
 8004cb4:	6822      	ldr	r2, [r4, #0]
 8004cb6:	07d2      	lsls	r2, r2, #31
 8004cb8:	d501      	bpl.n	8004cbe <_printf_float+0x1ae>
 8004cba:	3302      	adds	r3, #2
 8004cbc:	e7f4      	b.n	8004ca8 <_printf_float+0x198>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e7f2      	b.n	8004ca8 <_printf_float+0x198>
 8004cc2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004cc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cc8:	4299      	cmp	r1, r3
 8004cca:	db05      	blt.n	8004cd8 <_printf_float+0x1c8>
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	6121      	str	r1, [r4, #16]
 8004cd0:	07d8      	lsls	r0, r3, #31
 8004cd2:	d5ea      	bpl.n	8004caa <_printf_float+0x19a>
 8004cd4:	1c4b      	adds	r3, r1, #1
 8004cd6:	e7e7      	b.n	8004ca8 <_printf_float+0x198>
 8004cd8:	2900      	cmp	r1, #0
 8004cda:	bfcc      	ite	gt
 8004cdc:	2201      	movgt	r2, #1
 8004cde:	f1c1 0202 	rsble	r2, r1, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	e7e0      	b.n	8004ca8 <_printf_float+0x198>
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	055a      	lsls	r2, r3, #21
 8004cea:	d407      	bmi.n	8004cfc <_printf_float+0x1ec>
 8004cec:	6923      	ldr	r3, [r4, #16]
 8004cee:	4642      	mov	r2, r8
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	47b8      	blx	r7
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	d12b      	bne.n	8004d52 <_printf_float+0x242>
 8004cfa:	e764      	b.n	8004bc6 <_printf_float+0xb6>
 8004cfc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004d00:	f240 80dd 	bls.w	8004ebe <_printf_float+0x3ae>
 8004d04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f7fb fe64 	bl	80009d8 <__aeabi_dcmpeq>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d033      	beq.n	8004d7c <_printf_float+0x26c>
 8004d14:	2301      	movs	r3, #1
 8004d16:	4631      	mov	r1, r6
 8004d18:	4628      	mov	r0, r5
 8004d1a:	4a35      	ldr	r2, [pc, #212]	; (8004df0 <_printf_float+0x2e0>)
 8004d1c:	47b8      	blx	r7
 8004d1e:	3001      	adds	r0, #1
 8004d20:	f43f af51 	beq.w	8004bc6 <_printf_float+0xb6>
 8004d24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	db02      	blt.n	8004d32 <_printf_float+0x222>
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	07d8      	lsls	r0, r3, #31
 8004d30:	d50f      	bpl.n	8004d52 <_printf_float+0x242>
 8004d32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d36:	4631      	mov	r1, r6
 8004d38:	4628      	mov	r0, r5
 8004d3a:	47b8      	blx	r7
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	f43f af42 	beq.w	8004bc6 <_printf_float+0xb6>
 8004d42:	f04f 0800 	mov.w	r8, #0
 8004d46:	f104 091a 	add.w	r9, r4, #26
 8004d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	4543      	cmp	r3, r8
 8004d50:	dc09      	bgt.n	8004d66 <_printf_float+0x256>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	079b      	lsls	r3, r3, #30
 8004d56:	f100 8102 	bmi.w	8004f5e <_printf_float+0x44e>
 8004d5a:	68e0      	ldr	r0, [r4, #12]
 8004d5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d5e:	4298      	cmp	r0, r3
 8004d60:	bfb8      	it	lt
 8004d62:	4618      	movlt	r0, r3
 8004d64:	e731      	b.n	8004bca <_printf_float+0xba>
 8004d66:	2301      	movs	r3, #1
 8004d68:	464a      	mov	r2, r9
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	47b8      	blx	r7
 8004d70:	3001      	adds	r0, #1
 8004d72:	f43f af28 	beq.w	8004bc6 <_printf_float+0xb6>
 8004d76:	f108 0801 	add.w	r8, r8, #1
 8004d7a:	e7e6      	b.n	8004d4a <_printf_float+0x23a>
 8004d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	dc38      	bgt.n	8004df4 <_printf_float+0x2e4>
 8004d82:	2301      	movs	r3, #1
 8004d84:	4631      	mov	r1, r6
 8004d86:	4628      	mov	r0, r5
 8004d88:	4a19      	ldr	r2, [pc, #100]	; (8004df0 <_printf_float+0x2e0>)
 8004d8a:	47b8      	blx	r7
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	f43f af1a 	beq.w	8004bc6 <_printf_float+0xb6>
 8004d92:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d96:	4313      	orrs	r3, r2
 8004d98:	d102      	bne.n	8004da0 <_printf_float+0x290>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	07d9      	lsls	r1, r3, #31
 8004d9e:	d5d8      	bpl.n	8004d52 <_printf_float+0x242>
 8004da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004da4:	4631      	mov	r1, r6
 8004da6:	4628      	mov	r0, r5
 8004da8:	47b8      	blx	r7
 8004daa:	3001      	adds	r0, #1
 8004dac:	f43f af0b 	beq.w	8004bc6 <_printf_float+0xb6>
 8004db0:	f04f 0900 	mov.w	r9, #0
 8004db4:	f104 0a1a 	add.w	sl, r4, #26
 8004db8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dba:	425b      	negs	r3, r3
 8004dbc:	454b      	cmp	r3, r9
 8004dbe:	dc01      	bgt.n	8004dc4 <_printf_float+0x2b4>
 8004dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dc2:	e794      	b.n	8004cee <_printf_float+0x1de>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	4652      	mov	r2, sl
 8004dc8:	4631      	mov	r1, r6
 8004dca:	4628      	mov	r0, r5
 8004dcc:	47b8      	blx	r7
 8004dce:	3001      	adds	r0, #1
 8004dd0:	f43f aef9 	beq.w	8004bc6 <_printf_float+0xb6>
 8004dd4:	f109 0901 	add.w	r9, r9, #1
 8004dd8:	e7ee      	b.n	8004db8 <_printf_float+0x2a8>
 8004dda:	bf00      	nop
 8004ddc:	7fefffff 	.word	0x7fefffff
 8004de0:	08007684 	.word	0x08007684
 8004de4:	08007688 	.word	0x08007688
 8004de8:	08007690 	.word	0x08007690
 8004dec:	0800768c 	.word	0x0800768c
 8004df0:	08007694 	.word	0x08007694
 8004df4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004df6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	bfa8      	it	ge
 8004dfc:	461a      	movge	r2, r3
 8004dfe:	2a00      	cmp	r2, #0
 8004e00:	4691      	mov	r9, r2
 8004e02:	dc37      	bgt.n	8004e74 <_printf_float+0x364>
 8004e04:	f04f 0b00 	mov.w	fp, #0
 8004e08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e0c:	f104 021a 	add.w	r2, r4, #26
 8004e10:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004e14:	ebaa 0309 	sub.w	r3, sl, r9
 8004e18:	455b      	cmp	r3, fp
 8004e1a:	dc33      	bgt.n	8004e84 <_printf_float+0x374>
 8004e1c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e20:	429a      	cmp	r2, r3
 8004e22:	db3b      	blt.n	8004e9c <_printf_float+0x38c>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	07da      	lsls	r2, r3, #31
 8004e28:	d438      	bmi.n	8004e9c <_printf_float+0x38c>
 8004e2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e2e:	eba2 030a 	sub.w	r3, r2, sl
 8004e32:	eba2 0901 	sub.w	r9, r2, r1
 8004e36:	4599      	cmp	r9, r3
 8004e38:	bfa8      	it	ge
 8004e3a:	4699      	movge	r9, r3
 8004e3c:	f1b9 0f00 	cmp.w	r9, #0
 8004e40:	dc34      	bgt.n	8004eac <_printf_float+0x39c>
 8004e42:	f04f 0800 	mov.w	r8, #0
 8004e46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e4a:	f104 0a1a 	add.w	sl, r4, #26
 8004e4e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	eba3 0309 	sub.w	r3, r3, r9
 8004e58:	4543      	cmp	r3, r8
 8004e5a:	f77f af7a 	ble.w	8004d52 <_printf_float+0x242>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	4652      	mov	r2, sl
 8004e62:	4631      	mov	r1, r6
 8004e64:	4628      	mov	r0, r5
 8004e66:	47b8      	blx	r7
 8004e68:	3001      	adds	r0, #1
 8004e6a:	f43f aeac 	beq.w	8004bc6 <_printf_float+0xb6>
 8004e6e:	f108 0801 	add.w	r8, r8, #1
 8004e72:	e7ec      	b.n	8004e4e <_printf_float+0x33e>
 8004e74:	4613      	mov	r3, r2
 8004e76:	4631      	mov	r1, r6
 8004e78:	4642      	mov	r2, r8
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	47b8      	blx	r7
 8004e7e:	3001      	adds	r0, #1
 8004e80:	d1c0      	bne.n	8004e04 <_printf_float+0x2f4>
 8004e82:	e6a0      	b.n	8004bc6 <_printf_float+0xb6>
 8004e84:	2301      	movs	r3, #1
 8004e86:	4631      	mov	r1, r6
 8004e88:	4628      	mov	r0, r5
 8004e8a:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e8c:	47b8      	blx	r7
 8004e8e:	3001      	adds	r0, #1
 8004e90:	f43f ae99 	beq.w	8004bc6 <_printf_float+0xb6>
 8004e94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e96:	f10b 0b01 	add.w	fp, fp, #1
 8004e9a:	e7b9      	b.n	8004e10 <_printf_float+0x300>
 8004e9c:	4631      	mov	r1, r6
 8004e9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	47b8      	blx	r7
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d1bf      	bne.n	8004e2a <_printf_float+0x31a>
 8004eaa:	e68c      	b.n	8004bc6 <_printf_float+0xb6>
 8004eac:	464b      	mov	r3, r9
 8004eae:	4631      	mov	r1, r6
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	eb08 020a 	add.w	r2, r8, sl
 8004eb6:	47b8      	blx	r7
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d1c2      	bne.n	8004e42 <_printf_float+0x332>
 8004ebc:	e683      	b.n	8004bc6 <_printf_float+0xb6>
 8004ebe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ec0:	2a01      	cmp	r2, #1
 8004ec2:	dc01      	bgt.n	8004ec8 <_printf_float+0x3b8>
 8004ec4:	07db      	lsls	r3, r3, #31
 8004ec6:	d537      	bpl.n	8004f38 <_printf_float+0x428>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	4642      	mov	r2, r8
 8004ecc:	4631      	mov	r1, r6
 8004ece:	4628      	mov	r0, r5
 8004ed0:	47b8      	blx	r7
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	f43f ae77 	beq.w	8004bc6 <_printf_float+0xb6>
 8004ed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004edc:	4631      	mov	r1, r6
 8004ede:	4628      	mov	r0, r5
 8004ee0:	47b8      	blx	r7
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	f43f ae6f 	beq.w	8004bc6 <_printf_float+0xb6>
 8004ee8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004eec:	2200      	movs	r2, #0
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f7fb fd72 	bl	80009d8 <__aeabi_dcmpeq>
 8004ef4:	b9d8      	cbnz	r0, 8004f2e <_printf_float+0x41e>
 8004ef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ef8:	f108 0201 	add.w	r2, r8, #1
 8004efc:	3b01      	subs	r3, #1
 8004efe:	4631      	mov	r1, r6
 8004f00:	4628      	mov	r0, r5
 8004f02:	47b8      	blx	r7
 8004f04:	3001      	adds	r0, #1
 8004f06:	d10e      	bne.n	8004f26 <_printf_float+0x416>
 8004f08:	e65d      	b.n	8004bc6 <_printf_float+0xb6>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	464a      	mov	r2, r9
 8004f0e:	4631      	mov	r1, r6
 8004f10:	4628      	mov	r0, r5
 8004f12:	47b8      	blx	r7
 8004f14:	3001      	adds	r0, #1
 8004f16:	f43f ae56 	beq.w	8004bc6 <_printf_float+0xb6>
 8004f1a:	f108 0801 	add.w	r8, r8, #1
 8004f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f20:	3b01      	subs	r3, #1
 8004f22:	4543      	cmp	r3, r8
 8004f24:	dcf1      	bgt.n	8004f0a <_printf_float+0x3fa>
 8004f26:	4653      	mov	r3, sl
 8004f28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f2c:	e6e0      	b.n	8004cf0 <_printf_float+0x1e0>
 8004f2e:	f04f 0800 	mov.w	r8, #0
 8004f32:	f104 091a 	add.w	r9, r4, #26
 8004f36:	e7f2      	b.n	8004f1e <_printf_float+0x40e>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	4642      	mov	r2, r8
 8004f3c:	e7df      	b.n	8004efe <_printf_float+0x3ee>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	464a      	mov	r2, r9
 8004f42:	4631      	mov	r1, r6
 8004f44:	4628      	mov	r0, r5
 8004f46:	47b8      	blx	r7
 8004f48:	3001      	adds	r0, #1
 8004f4a:	f43f ae3c 	beq.w	8004bc6 <_printf_float+0xb6>
 8004f4e:	f108 0801 	add.w	r8, r8, #1
 8004f52:	68e3      	ldr	r3, [r4, #12]
 8004f54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004f56:	1a5b      	subs	r3, r3, r1
 8004f58:	4543      	cmp	r3, r8
 8004f5a:	dcf0      	bgt.n	8004f3e <_printf_float+0x42e>
 8004f5c:	e6fd      	b.n	8004d5a <_printf_float+0x24a>
 8004f5e:	f04f 0800 	mov.w	r8, #0
 8004f62:	f104 0919 	add.w	r9, r4, #25
 8004f66:	e7f4      	b.n	8004f52 <_printf_float+0x442>

08004f68 <_printf_common>:
 8004f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f6c:	4616      	mov	r6, r2
 8004f6e:	4699      	mov	r9, r3
 8004f70:	688a      	ldr	r2, [r1, #8]
 8004f72:	690b      	ldr	r3, [r1, #16]
 8004f74:	4607      	mov	r7, r0
 8004f76:	4293      	cmp	r3, r2
 8004f78:	bfb8      	it	lt
 8004f7a:	4613      	movlt	r3, r2
 8004f7c:	6033      	str	r3, [r6, #0]
 8004f7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f82:	460c      	mov	r4, r1
 8004f84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f88:	b10a      	cbz	r2, 8004f8e <_printf_common+0x26>
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	6033      	str	r3, [r6, #0]
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	0699      	lsls	r1, r3, #26
 8004f92:	bf42      	ittt	mi
 8004f94:	6833      	ldrmi	r3, [r6, #0]
 8004f96:	3302      	addmi	r3, #2
 8004f98:	6033      	strmi	r3, [r6, #0]
 8004f9a:	6825      	ldr	r5, [r4, #0]
 8004f9c:	f015 0506 	ands.w	r5, r5, #6
 8004fa0:	d106      	bne.n	8004fb0 <_printf_common+0x48>
 8004fa2:	f104 0a19 	add.w	sl, r4, #25
 8004fa6:	68e3      	ldr	r3, [r4, #12]
 8004fa8:	6832      	ldr	r2, [r6, #0]
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	42ab      	cmp	r3, r5
 8004fae:	dc28      	bgt.n	8005002 <_printf_common+0x9a>
 8004fb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fb4:	1e13      	subs	r3, r2, #0
 8004fb6:	6822      	ldr	r2, [r4, #0]
 8004fb8:	bf18      	it	ne
 8004fba:	2301      	movne	r3, #1
 8004fbc:	0692      	lsls	r2, r2, #26
 8004fbe:	d42d      	bmi.n	800501c <_printf_common+0xb4>
 8004fc0:	4649      	mov	r1, r9
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fc8:	47c0      	blx	r8
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d020      	beq.n	8005010 <_printf_common+0xa8>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	68e5      	ldr	r5, [r4, #12]
 8004fd2:	f003 0306 	and.w	r3, r3, #6
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	bf18      	it	ne
 8004fda:	2500      	movne	r5, #0
 8004fdc:	6832      	ldr	r2, [r6, #0]
 8004fde:	f04f 0600 	mov.w	r6, #0
 8004fe2:	68a3      	ldr	r3, [r4, #8]
 8004fe4:	bf08      	it	eq
 8004fe6:	1aad      	subeq	r5, r5, r2
 8004fe8:	6922      	ldr	r2, [r4, #16]
 8004fea:	bf08      	it	eq
 8004fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	bfc4      	itt	gt
 8004ff4:	1a9b      	subgt	r3, r3, r2
 8004ff6:	18ed      	addgt	r5, r5, r3
 8004ff8:	341a      	adds	r4, #26
 8004ffa:	42b5      	cmp	r5, r6
 8004ffc:	d11a      	bne.n	8005034 <_printf_common+0xcc>
 8004ffe:	2000      	movs	r0, #0
 8005000:	e008      	b.n	8005014 <_printf_common+0xac>
 8005002:	2301      	movs	r3, #1
 8005004:	4652      	mov	r2, sl
 8005006:	4649      	mov	r1, r9
 8005008:	4638      	mov	r0, r7
 800500a:	47c0      	blx	r8
 800500c:	3001      	adds	r0, #1
 800500e:	d103      	bne.n	8005018 <_printf_common+0xb0>
 8005010:	f04f 30ff 	mov.w	r0, #4294967295
 8005014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005018:	3501      	adds	r5, #1
 800501a:	e7c4      	b.n	8004fa6 <_printf_common+0x3e>
 800501c:	2030      	movs	r0, #48	; 0x30
 800501e:	18e1      	adds	r1, r4, r3
 8005020:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800502a:	4422      	add	r2, r4
 800502c:	3302      	adds	r3, #2
 800502e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005032:	e7c5      	b.n	8004fc0 <_printf_common+0x58>
 8005034:	2301      	movs	r3, #1
 8005036:	4622      	mov	r2, r4
 8005038:	4649      	mov	r1, r9
 800503a:	4638      	mov	r0, r7
 800503c:	47c0      	blx	r8
 800503e:	3001      	adds	r0, #1
 8005040:	d0e6      	beq.n	8005010 <_printf_common+0xa8>
 8005042:	3601      	adds	r6, #1
 8005044:	e7d9      	b.n	8004ffa <_printf_common+0x92>
	...

08005048 <_printf_i>:
 8005048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800504c:	460c      	mov	r4, r1
 800504e:	7e27      	ldrb	r7, [r4, #24]
 8005050:	4691      	mov	r9, r2
 8005052:	2f78      	cmp	r7, #120	; 0x78
 8005054:	4680      	mov	r8, r0
 8005056:	469a      	mov	sl, r3
 8005058:	990c      	ldr	r1, [sp, #48]	; 0x30
 800505a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800505e:	d807      	bhi.n	8005070 <_printf_i+0x28>
 8005060:	2f62      	cmp	r7, #98	; 0x62
 8005062:	d80a      	bhi.n	800507a <_printf_i+0x32>
 8005064:	2f00      	cmp	r7, #0
 8005066:	f000 80d9 	beq.w	800521c <_printf_i+0x1d4>
 800506a:	2f58      	cmp	r7, #88	; 0x58
 800506c:	f000 80a4 	beq.w	80051b8 <_printf_i+0x170>
 8005070:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005078:	e03a      	b.n	80050f0 <_printf_i+0xa8>
 800507a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800507e:	2b15      	cmp	r3, #21
 8005080:	d8f6      	bhi.n	8005070 <_printf_i+0x28>
 8005082:	a001      	add	r0, pc, #4	; (adr r0, 8005088 <_printf_i+0x40>)
 8005084:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005088:	080050e1 	.word	0x080050e1
 800508c:	080050f5 	.word	0x080050f5
 8005090:	08005071 	.word	0x08005071
 8005094:	08005071 	.word	0x08005071
 8005098:	08005071 	.word	0x08005071
 800509c:	08005071 	.word	0x08005071
 80050a0:	080050f5 	.word	0x080050f5
 80050a4:	08005071 	.word	0x08005071
 80050a8:	08005071 	.word	0x08005071
 80050ac:	08005071 	.word	0x08005071
 80050b0:	08005071 	.word	0x08005071
 80050b4:	08005203 	.word	0x08005203
 80050b8:	08005125 	.word	0x08005125
 80050bc:	080051e5 	.word	0x080051e5
 80050c0:	08005071 	.word	0x08005071
 80050c4:	08005071 	.word	0x08005071
 80050c8:	08005225 	.word	0x08005225
 80050cc:	08005071 	.word	0x08005071
 80050d0:	08005125 	.word	0x08005125
 80050d4:	08005071 	.word	0x08005071
 80050d8:	08005071 	.word	0x08005071
 80050dc:	080051ed 	.word	0x080051ed
 80050e0:	680b      	ldr	r3, [r1, #0]
 80050e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050e6:	1d1a      	adds	r2, r3, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	600a      	str	r2, [r1, #0]
 80050ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050f0:	2301      	movs	r3, #1
 80050f2:	e0a4      	b.n	800523e <_printf_i+0x1f6>
 80050f4:	6825      	ldr	r5, [r4, #0]
 80050f6:	6808      	ldr	r0, [r1, #0]
 80050f8:	062e      	lsls	r6, r5, #24
 80050fa:	f100 0304 	add.w	r3, r0, #4
 80050fe:	d50a      	bpl.n	8005116 <_printf_i+0xce>
 8005100:	6805      	ldr	r5, [r0, #0]
 8005102:	600b      	str	r3, [r1, #0]
 8005104:	2d00      	cmp	r5, #0
 8005106:	da03      	bge.n	8005110 <_printf_i+0xc8>
 8005108:	232d      	movs	r3, #45	; 0x2d
 800510a:	426d      	negs	r5, r5
 800510c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005110:	230a      	movs	r3, #10
 8005112:	485e      	ldr	r0, [pc, #376]	; (800528c <_printf_i+0x244>)
 8005114:	e019      	b.n	800514a <_printf_i+0x102>
 8005116:	f015 0f40 	tst.w	r5, #64	; 0x40
 800511a:	6805      	ldr	r5, [r0, #0]
 800511c:	600b      	str	r3, [r1, #0]
 800511e:	bf18      	it	ne
 8005120:	b22d      	sxthne	r5, r5
 8005122:	e7ef      	b.n	8005104 <_printf_i+0xbc>
 8005124:	680b      	ldr	r3, [r1, #0]
 8005126:	6825      	ldr	r5, [r4, #0]
 8005128:	1d18      	adds	r0, r3, #4
 800512a:	6008      	str	r0, [r1, #0]
 800512c:	0628      	lsls	r0, r5, #24
 800512e:	d501      	bpl.n	8005134 <_printf_i+0xec>
 8005130:	681d      	ldr	r5, [r3, #0]
 8005132:	e002      	b.n	800513a <_printf_i+0xf2>
 8005134:	0669      	lsls	r1, r5, #25
 8005136:	d5fb      	bpl.n	8005130 <_printf_i+0xe8>
 8005138:	881d      	ldrh	r5, [r3, #0]
 800513a:	2f6f      	cmp	r7, #111	; 0x6f
 800513c:	bf0c      	ite	eq
 800513e:	2308      	moveq	r3, #8
 8005140:	230a      	movne	r3, #10
 8005142:	4852      	ldr	r0, [pc, #328]	; (800528c <_printf_i+0x244>)
 8005144:	2100      	movs	r1, #0
 8005146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800514a:	6866      	ldr	r6, [r4, #4]
 800514c:	2e00      	cmp	r6, #0
 800514e:	bfa8      	it	ge
 8005150:	6821      	ldrge	r1, [r4, #0]
 8005152:	60a6      	str	r6, [r4, #8]
 8005154:	bfa4      	itt	ge
 8005156:	f021 0104 	bicge.w	r1, r1, #4
 800515a:	6021      	strge	r1, [r4, #0]
 800515c:	b90d      	cbnz	r5, 8005162 <_printf_i+0x11a>
 800515e:	2e00      	cmp	r6, #0
 8005160:	d04d      	beq.n	80051fe <_printf_i+0x1b6>
 8005162:	4616      	mov	r6, r2
 8005164:	fbb5 f1f3 	udiv	r1, r5, r3
 8005168:	fb03 5711 	mls	r7, r3, r1, r5
 800516c:	5dc7      	ldrb	r7, [r0, r7]
 800516e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005172:	462f      	mov	r7, r5
 8005174:	42bb      	cmp	r3, r7
 8005176:	460d      	mov	r5, r1
 8005178:	d9f4      	bls.n	8005164 <_printf_i+0x11c>
 800517a:	2b08      	cmp	r3, #8
 800517c:	d10b      	bne.n	8005196 <_printf_i+0x14e>
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	07df      	lsls	r7, r3, #31
 8005182:	d508      	bpl.n	8005196 <_printf_i+0x14e>
 8005184:	6923      	ldr	r3, [r4, #16]
 8005186:	6861      	ldr	r1, [r4, #4]
 8005188:	4299      	cmp	r1, r3
 800518a:	bfde      	ittt	le
 800518c:	2330      	movle	r3, #48	; 0x30
 800518e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005192:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005196:	1b92      	subs	r2, r2, r6
 8005198:	6122      	str	r2, [r4, #16]
 800519a:	464b      	mov	r3, r9
 800519c:	4621      	mov	r1, r4
 800519e:	4640      	mov	r0, r8
 80051a0:	f8cd a000 	str.w	sl, [sp]
 80051a4:	aa03      	add	r2, sp, #12
 80051a6:	f7ff fedf 	bl	8004f68 <_printf_common>
 80051aa:	3001      	adds	r0, #1
 80051ac:	d14c      	bne.n	8005248 <_printf_i+0x200>
 80051ae:	f04f 30ff 	mov.w	r0, #4294967295
 80051b2:	b004      	add	sp, #16
 80051b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b8:	4834      	ldr	r0, [pc, #208]	; (800528c <_printf_i+0x244>)
 80051ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051be:	680e      	ldr	r6, [r1, #0]
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80051c6:	061f      	lsls	r7, r3, #24
 80051c8:	600e      	str	r6, [r1, #0]
 80051ca:	d514      	bpl.n	80051f6 <_printf_i+0x1ae>
 80051cc:	07d9      	lsls	r1, r3, #31
 80051ce:	bf44      	itt	mi
 80051d0:	f043 0320 	orrmi.w	r3, r3, #32
 80051d4:	6023      	strmi	r3, [r4, #0]
 80051d6:	b91d      	cbnz	r5, 80051e0 <_printf_i+0x198>
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	f023 0320 	bic.w	r3, r3, #32
 80051de:	6023      	str	r3, [r4, #0]
 80051e0:	2310      	movs	r3, #16
 80051e2:	e7af      	b.n	8005144 <_printf_i+0xfc>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	f043 0320 	orr.w	r3, r3, #32
 80051ea:	6023      	str	r3, [r4, #0]
 80051ec:	2378      	movs	r3, #120	; 0x78
 80051ee:	4828      	ldr	r0, [pc, #160]	; (8005290 <_printf_i+0x248>)
 80051f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051f4:	e7e3      	b.n	80051be <_printf_i+0x176>
 80051f6:	065e      	lsls	r6, r3, #25
 80051f8:	bf48      	it	mi
 80051fa:	b2ad      	uxthmi	r5, r5
 80051fc:	e7e6      	b.n	80051cc <_printf_i+0x184>
 80051fe:	4616      	mov	r6, r2
 8005200:	e7bb      	b.n	800517a <_printf_i+0x132>
 8005202:	680b      	ldr	r3, [r1, #0]
 8005204:	6826      	ldr	r6, [r4, #0]
 8005206:	1d1d      	adds	r5, r3, #4
 8005208:	6960      	ldr	r0, [r4, #20]
 800520a:	600d      	str	r5, [r1, #0]
 800520c:	0635      	lsls	r5, r6, #24
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	d501      	bpl.n	8005216 <_printf_i+0x1ce>
 8005212:	6018      	str	r0, [r3, #0]
 8005214:	e002      	b.n	800521c <_printf_i+0x1d4>
 8005216:	0671      	lsls	r1, r6, #25
 8005218:	d5fb      	bpl.n	8005212 <_printf_i+0x1ca>
 800521a:	8018      	strh	r0, [r3, #0]
 800521c:	2300      	movs	r3, #0
 800521e:	4616      	mov	r6, r2
 8005220:	6123      	str	r3, [r4, #16]
 8005222:	e7ba      	b.n	800519a <_printf_i+0x152>
 8005224:	680b      	ldr	r3, [r1, #0]
 8005226:	1d1a      	adds	r2, r3, #4
 8005228:	600a      	str	r2, [r1, #0]
 800522a:	681e      	ldr	r6, [r3, #0]
 800522c:	2100      	movs	r1, #0
 800522e:	4630      	mov	r0, r6
 8005230:	6862      	ldr	r2, [r4, #4]
 8005232:	f001 facb 	bl	80067cc <memchr>
 8005236:	b108      	cbz	r0, 800523c <_printf_i+0x1f4>
 8005238:	1b80      	subs	r0, r0, r6
 800523a:	6060      	str	r0, [r4, #4]
 800523c:	6863      	ldr	r3, [r4, #4]
 800523e:	6123      	str	r3, [r4, #16]
 8005240:	2300      	movs	r3, #0
 8005242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005246:	e7a8      	b.n	800519a <_printf_i+0x152>
 8005248:	4632      	mov	r2, r6
 800524a:	4649      	mov	r1, r9
 800524c:	4640      	mov	r0, r8
 800524e:	6923      	ldr	r3, [r4, #16]
 8005250:	47d0      	blx	sl
 8005252:	3001      	adds	r0, #1
 8005254:	d0ab      	beq.n	80051ae <_printf_i+0x166>
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	079b      	lsls	r3, r3, #30
 800525a:	d413      	bmi.n	8005284 <_printf_i+0x23c>
 800525c:	68e0      	ldr	r0, [r4, #12]
 800525e:	9b03      	ldr	r3, [sp, #12]
 8005260:	4298      	cmp	r0, r3
 8005262:	bfb8      	it	lt
 8005264:	4618      	movlt	r0, r3
 8005266:	e7a4      	b.n	80051b2 <_printf_i+0x16a>
 8005268:	2301      	movs	r3, #1
 800526a:	4632      	mov	r2, r6
 800526c:	4649      	mov	r1, r9
 800526e:	4640      	mov	r0, r8
 8005270:	47d0      	blx	sl
 8005272:	3001      	adds	r0, #1
 8005274:	d09b      	beq.n	80051ae <_printf_i+0x166>
 8005276:	3501      	adds	r5, #1
 8005278:	68e3      	ldr	r3, [r4, #12]
 800527a:	9903      	ldr	r1, [sp, #12]
 800527c:	1a5b      	subs	r3, r3, r1
 800527e:	42ab      	cmp	r3, r5
 8005280:	dcf2      	bgt.n	8005268 <_printf_i+0x220>
 8005282:	e7eb      	b.n	800525c <_printf_i+0x214>
 8005284:	2500      	movs	r5, #0
 8005286:	f104 0619 	add.w	r6, r4, #25
 800528a:	e7f5      	b.n	8005278 <_printf_i+0x230>
 800528c:	08007696 	.word	0x08007696
 8005290:	080076a7 	.word	0x080076a7

08005294 <iprintf>:
 8005294:	b40f      	push	{r0, r1, r2, r3}
 8005296:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <iprintf+0x2c>)
 8005298:	b513      	push	{r0, r1, r4, lr}
 800529a:	681c      	ldr	r4, [r3, #0]
 800529c:	b124      	cbz	r4, 80052a8 <iprintf+0x14>
 800529e:	69a3      	ldr	r3, [r4, #24]
 80052a0:	b913      	cbnz	r3, 80052a8 <iprintf+0x14>
 80052a2:	4620      	mov	r0, r4
 80052a4:	f001 f980 	bl	80065a8 <__sinit>
 80052a8:	ab05      	add	r3, sp, #20
 80052aa:	4620      	mov	r0, r4
 80052ac:	9a04      	ldr	r2, [sp, #16]
 80052ae:	68a1      	ldr	r1, [r4, #8]
 80052b0:	9301      	str	r3, [sp, #4]
 80052b2:	f001 ff05 	bl	80070c0 <_vfiprintf_r>
 80052b6:	b002      	add	sp, #8
 80052b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052bc:	b004      	add	sp, #16
 80052be:	4770      	bx	lr
 80052c0:	20000010 	.word	0x20000010

080052c4 <_puts_r>:
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	460e      	mov	r6, r1
 80052c8:	4605      	mov	r5, r0
 80052ca:	b118      	cbz	r0, 80052d4 <_puts_r+0x10>
 80052cc:	6983      	ldr	r3, [r0, #24]
 80052ce:	b90b      	cbnz	r3, 80052d4 <_puts_r+0x10>
 80052d0:	f001 f96a 	bl	80065a8 <__sinit>
 80052d4:	69ab      	ldr	r3, [r5, #24]
 80052d6:	68ac      	ldr	r4, [r5, #8]
 80052d8:	b913      	cbnz	r3, 80052e0 <_puts_r+0x1c>
 80052da:	4628      	mov	r0, r5
 80052dc:	f001 f964 	bl	80065a8 <__sinit>
 80052e0:	4b2c      	ldr	r3, [pc, #176]	; (8005394 <_puts_r+0xd0>)
 80052e2:	429c      	cmp	r4, r3
 80052e4:	d120      	bne.n	8005328 <_puts_r+0x64>
 80052e6:	686c      	ldr	r4, [r5, #4]
 80052e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052ea:	07db      	lsls	r3, r3, #31
 80052ec:	d405      	bmi.n	80052fa <_puts_r+0x36>
 80052ee:	89a3      	ldrh	r3, [r4, #12]
 80052f0:	0598      	lsls	r0, r3, #22
 80052f2:	d402      	bmi.n	80052fa <_puts_r+0x36>
 80052f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052f6:	f001 f9fa 	bl	80066ee <__retarget_lock_acquire_recursive>
 80052fa:	89a3      	ldrh	r3, [r4, #12]
 80052fc:	0719      	lsls	r1, r3, #28
 80052fe:	d51d      	bpl.n	800533c <_puts_r+0x78>
 8005300:	6923      	ldr	r3, [r4, #16]
 8005302:	b1db      	cbz	r3, 800533c <_puts_r+0x78>
 8005304:	3e01      	subs	r6, #1
 8005306:	68a3      	ldr	r3, [r4, #8]
 8005308:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800530c:	3b01      	subs	r3, #1
 800530e:	60a3      	str	r3, [r4, #8]
 8005310:	bb39      	cbnz	r1, 8005362 <_puts_r+0x9e>
 8005312:	2b00      	cmp	r3, #0
 8005314:	da38      	bge.n	8005388 <_puts_r+0xc4>
 8005316:	4622      	mov	r2, r4
 8005318:	210a      	movs	r1, #10
 800531a:	4628      	mov	r0, r5
 800531c:	f000 f8ec 	bl	80054f8 <__swbuf_r>
 8005320:	3001      	adds	r0, #1
 8005322:	d011      	beq.n	8005348 <_puts_r+0x84>
 8005324:	250a      	movs	r5, #10
 8005326:	e011      	b.n	800534c <_puts_r+0x88>
 8005328:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <_puts_r+0xd4>)
 800532a:	429c      	cmp	r4, r3
 800532c:	d101      	bne.n	8005332 <_puts_r+0x6e>
 800532e:	68ac      	ldr	r4, [r5, #8]
 8005330:	e7da      	b.n	80052e8 <_puts_r+0x24>
 8005332:	4b1a      	ldr	r3, [pc, #104]	; (800539c <_puts_r+0xd8>)
 8005334:	429c      	cmp	r4, r3
 8005336:	bf08      	it	eq
 8005338:	68ec      	ldreq	r4, [r5, #12]
 800533a:	e7d5      	b.n	80052e8 <_puts_r+0x24>
 800533c:	4621      	mov	r1, r4
 800533e:	4628      	mov	r0, r5
 8005340:	f000 f92c 	bl	800559c <__swsetup_r>
 8005344:	2800      	cmp	r0, #0
 8005346:	d0dd      	beq.n	8005304 <_puts_r+0x40>
 8005348:	f04f 35ff 	mov.w	r5, #4294967295
 800534c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800534e:	07da      	lsls	r2, r3, #31
 8005350:	d405      	bmi.n	800535e <_puts_r+0x9a>
 8005352:	89a3      	ldrh	r3, [r4, #12]
 8005354:	059b      	lsls	r3, r3, #22
 8005356:	d402      	bmi.n	800535e <_puts_r+0x9a>
 8005358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800535a:	f001 f9c9 	bl	80066f0 <__retarget_lock_release_recursive>
 800535e:	4628      	mov	r0, r5
 8005360:	bd70      	pop	{r4, r5, r6, pc}
 8005362:	2b00      	cmp	r3, #0
 8005364:	da04      	bge.n	8005370 <_puts_r+0xac>
 8005366:	69a2      	ldr	r2, [r4, #24]
 8005368:	429a      	cmp	r2, r3
 800536a:	dc06      	bgt.n	800537a <_puts_r+0xb6>
 800536c:	290a      	cmp	r1, #10
 800536e:	d004      	beq.n	800537a <_puts_r+0xb6>
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	6022      	str	r2, [r4, #0]
 8005376:	7019      	strb	r1, [r3, #0]
 8005378:	e7c5      	b.n	8005306 <_puts_r+0x42>
 800537a:	4622      	mov	r2, r4
 800537c:	4628      	mov	r0, r5
 800537e:	f000 f8bb 	bl	80054f8 <__swbuf_r>
 8005382:	3001      	adds	r0, #1
 8005384:	d1bf      	bne.n	8005306 <_puts_r+0x42>
 8005386:	e7df      	b.n	8005348 <_puts_r+0x84>
 8005388:	250a      	movs	r5, #10
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	6022      	str	r2, [r4, #0]
 8005390:	701d      	strb	r5, [r3, #0]
 8005392:	e7db      	b.n	800534c <_puts_r+0x88>
 8005394:	08007870 	.word	0x08007870
 8005398:	08007890 	.word	0x08007890
 800539c:	08007850 	.word	0x08007850

080053a0 <puts>:
 80053a0:	4b02      	ldr	r3, [pc, #8]	; (80053ac <puts+0xc>)
 80053a2:	4601      	mov	r1, r0
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	f7ff bf8d 	b.w	80052c4 <_puts_r>
 80053aa:	bf00      	nop
 80053ac:	20000010 	.word	0x20000010

080053b0 <strncat>:
 80053b0:	b530      	push	{r4, r5, lr}
 80053b2:	4604      	mov	r4, r0
 80053b4:	7825      	ldrb	r5, [r4, #0]
 80053b6:	4623      	mov	r3, r4
 80053b8:	3401      	adds	r4, #1
 80053ba:	2d00      	cmp	r5, #0
 80053bc:	d1fa      	bne.n	80053b4 <strncat+0x4>
 80053be:	3a01      	subs	r2, #1
 80053c0:	d304      	bcc.n	80053cc <strncat+0x1c>
 80053c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053c6:	f803 4b01 	strb.w	r4, [r3], #1
 80053ca:	b904      	cbnz	r4, 80053ce <strncat+0x1e>
 80053cc:	bd30      	pop	{r4, r5, pc}
 80053ce:	2a00      	cmp	r2, #0
 80053d0:	d1f5      	bne.n	80053be <strncat+0xe>
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	e7f3      	b.n	80053be <strncat+0xe>
	...

080053d8 <_strtol_l.isra.0>:
 80053d8:	2b01      	cmp	r3, #1
 80053da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053de:	4686      	mov	lr, r0
 80053e0:	d001      	beq.n	80053e6 <_strtol_l.isra.0+0xe>
 80053e2:	2b24      	cmp	r3, #36	; 0x24
 80053e4:	d906      	bls.n	80053f4 <_strtol_l.isra.0+0x1c>
 80053e6:	f7ff fac3 	bl	8004970 <__errno>
 80053ea:	2316      	movs	r3, #22
 80053ec:	6003      	str	r3, [r0, #0]
 80053ee:	2000      	movs	r0, #0
 80053f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f4:	468c      	mov	ip, r1
 80053f6:	4e3a      	ldr	r6, [pc, #232]	; (80054e0 <_strtol_l.isra.0+0x108>)
 80053f8:	4660      	mov	r0, ip
 80053fa:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80053fe:	5da5      	ldrb	r5, [r4, r6]
 8005400:	f015 0508 	ands.w	r5, r5, #8
 8005404:	d1f8      	bne.n	80053f8 <_strtol_l.isra.0+0x20>
 8005406:	2c2d      	cmp	r4, #45	; 0x2d
 8005408:	d133      	bne.n	8005472 <_strtol_l.isra.0+0x9a>
 800540a:	f04f 0801 	mov.w	r8, #1
 800540e:	f89c 4000 	ldrb.w	r4, [ip]
 8005412:	f100 0c02 	add.w	ip, r0, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d05d      	beq.n	80054d6 <_strtol_l.isra.0+0xfe>
 800541a:	2b10      	cmp	r3, #16
 800541c:	d10c      	bne.n	8005438 <_strtol_l.isra.0+0x60>
 800541e:	2c30      	cmp	r4, #48	; 0x30
 8005420:	d10a      	bne.n	8005438 <_strtol_l.isra.0+0x60>
 8005422:	f89c 0000 	ldrb.w	r0, [ip]
 8005426:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800542a:	2858      	cmp	r0, #88	; 0x58
 800542c:	d14e      	bne.n	80054cc <_strtol_l.isra.0+0xf4>
 800542e:	2310      	movs	r3, #16
 8005430:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8005434:	f10c 0c02 	add.w	ip, ip, #2
 8005438:	2500      	movs	r5, #0
 800543a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800543e:	3f01      	subs	r7, #1
 8005440:	fbb7 f9f3 	udiv	r9, r7, r3
 8005444:	4628      	mov	r0, r5
 8005446:	fb03 7a19 	mls	sl, r3, r9, r7
 800544a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800544e:	2e09      	cmp	r6, #9
 8005450:	d818      	bhi.n	8005484 <_strtol_l.isra.0+0xac>
 8005452:	4634      	mov	r4, r6
 8005454:	42a3      	cmp	r3, r4
 8005456:	dd24      	ble.n	80054a2 <_strtol_l.isra.0+0xca>
 8005458:	2d00      	cmp	r5, #0
 800545a:	db1f      	blt.n	800549c <_strtol_l.isra.0+0xc4>
 800545c:	4581      	cmp	r9, r0
 800545e:	d31d      	bcc.n	800549c <_strtol_l.isra.0+0xc4>
 8005460:	d101      	bne.n	8005466 <_strtol_l.isra.0+0x8e>
 8005462:	45a2      	cmp	sl, r4
 8005464:	db1a      	blt.n	800549c <_strtol_l.isra.0+0xc4>
 8005466:	2501      	movs	r5, #1
 8005468:	fb00 4003 	mla	r0, r0, r3, r4
 800546c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005470:	e7eb      	b.n	800544a <_strtol_l.isra.0+0x72>
 8005472:	2c2b      	cmp	r4, #43	; 0x2b
 8005474:	bf08      	it	eq
 8005476:	f89c 4000 	ldrbeq.w	r4, [ip]
 800547a:	46a8      	mov	r8, r5
 800547c:	bf08      	it	eq
 800547e:	f100 0c02 	addeq.w	ip, r0, #2
 8005482:	e7c8      	b.n	8005416 <_strtol_l.isra.0+0x3e>
 8005484:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005488:	2e19      	cmp	r6, #25
 800548a:	d801      	bhi.n	8005490 <_strtol_l.isra.0+0xb8>
 800548c:	3c37      	subs	r4, #55	; 0x37
 800548e:	e7e1      	b.n	8005454 <_strtol_l.isra.0+0x7c>
 8005490:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005494:	2e19      	cmp	r6, #25
 8005496:	d804      	bhi.n	80054a2 <_strtol_l.isra.0+0xca>
 8005498:	3c57      	subs	r4, #87	; 0x57
 800549a:	e7db      	b.n	8005454 <_strtol_l.isra.0+0x7c>
 800549c:	f04f 35ff 	mov.w	r5, #4294967295
 80054a0:	e7e4      	b.n	800546c <_strtol_l.isra.0+0x94>
 80054a2:	2d00      	cmp	r5, #0
 80054a4:	da08      	bge.n	80054b8 <_strtol_l.isra.0+0xe0>
 80054a6:	2322      	movs	r3, #34	; 0x22
 80054a8:	4638      	mov	r0, r7
 80054aa:	f8ce 3000 	str.w	r3, [lr]
 80054ae:	2a00      	cmp	r2, #0
 80054b0:	d09e      	beq.n	80053f0 <_strtol_l.isra.0+0x18>
 80054b2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80054b6:	e007      	b.n	80054c8 <_strtol_l.isra.0+0xf0>
 80054b8:	f1b8 0f00 	cmp.w	r8, #0
 80054bc:	d000      	beq.n	80054c0 <_strtol_l.isra.0+0xe8>
 80054be:	4240      	negs	r0, r0
 80054c0:	2a00      	cmp	r2, #0
 80054c2:	d095      	beq.n	80053f0 <_strtol_l.isra.0+0x18>
 80054c4:	2d00      	cmp	r5, #0
 80054c6:	d1f4      	bne.n	80054b2 <_strtol_l.isra.0+0xda>
 80054c8:	6011      	str	r1, [r2, #0]
 80054ca:	e791      	b.n	80053f0 <_strtol_l.isra.0+0x18>
 80054cc:	2430      	movs	r4, #48	; 0x30
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1b2      	bne.n	8005438 <_strtol_l.isra.0+0x60>
 80054d2:	2308      	movs	r3, #8
 80054d4:	e7b0      	b.n	8005438 <_strtol_l.isra.0+0x60>
 80054d6:	2c30      	cmp	r4, #48	; 0x30
 80054d8:	d0a3      	beq.n	8005422 <_strtol_l.isra.0+0x4a>
 80054da:	230a      	movs	r3, #10
 80054dc:	e7ac      	b.n	8005438 <_strtol_l.isra.0+0x60>
 80054de:	bf00      	nop
 80054e0:	080076b9 	.word	0x080076b9

080054e4 <strtol>:
 80054e4:	4613      	mov	r3, r2
 80054e6:	460a      	mov	r2, r1
 80054e8:	4601      	mov	r1, r0
 80054ea:	4802      	ldr	r0, [pc, #8]	; (80054f4 <strtol+0x10>)
 80054ec:	6800      	ldr	r0, [r0, #0]
 80054ee:	f7ff bf73 	b.w	80053d8 <_strtol_l.isra.0>
 80054f2:	bf00      	nop
 80054f4:	20000010 	.word	0x20000010

080054f8 <__swbuf_r>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	460e      	mov	r6, r1
 80054fc:	4614      	mov	r4, r2
 80054fe:	4605      	mov	r5, r0
 8005500:	b118      	cbz	r0, 800550a <__swbuf_r+0x12>
 8005502:	6983      	ldr	r3, [r0, #24]
 8005504:	b90b      	cbnz	r3, 800550a <__swbuf_r+0x12>
 8005506:	f001 f84f 	bl	80065a8 <__sinit>
 800550a:	4b21      	ldr	r3, [pc, #132]	; (8005590 <__swbuf_r+0x98>)
 800550c:	429c      	cmp	r4, r3
 800550e:	d12b      	bne.n	8005568 <__swbuf_r+0x70>
 8005510:	686c      	ldr	r4, [r5, #4]
 8005512:	69a3      	ldr	r3, [r4, #24]
 8005514:	60a3      	str	r3, [r4, #8]
 8005516:	89a3      	ldrh	r3, [r4, #12]
 8005518:	071a      	lsls	r2, r3, #28
 800551a:	d52f      	bpl.n	800557c <__swbuf_r+0x84>
 800551c:	6923      	ldr	r3, [r4, #16]
 800551e:	b36b      	cbz	r3, 800557c <__swbuf_r+0x84>
 8005520:	6923      	ldr	r3, [r4, #16]
 8005522:	6820      	ldr	r0, [r4, #0]
 8005524:	b2f6      	uxtb	r6, r6
 8005526:	1ac0      	subs	r0, r0, r3
 8005528:	6963      	ldr	r3, [r4, #20]
 800552a:	4637      	mov	r7, r6
 800552c:	4283      	cmp	r3, r0
 800552e:	dc04      	bgt.n	800553a <__swbuf_r+0x42>
 8005530:	4621      	mov	r1, r4
 8005532:	4628      	mov	r0, r5
 8005534:	f000 ffa4 	bl	8006480 <_fflush_r>
 8005538:	bb30      	cbnz	r0, 8005588 <__swbuf_r+0x90>
 800553a:	68a3      	ldr	r3, [r4, #8]
 800553c:	3001      	adds	r0, #1
 800553e:	3b01      	subs	r3, #1
 8005540:	60a3      	str	r3, [r4, #8]
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	6022      	str	r2, [r4, #0]
 8005548:	701e      	strb	r6, [r3, #0]
 800554a:	6963      	ldr	r3, [r4, #20]
 800554c:	4283      	cmp	r3, r0
 800554e:	d004      	beq.n	800555a <__swbuf_r+0x62>
 8005550:	89a3      	ldrh	r3, [r4, #12]
 8005552:	07db      	lsls	r3, r3, #31
 8005554:	d506      	bpl.n	8005564 <__swbuf_r+0x6c>
 8005556:	2e0a      	cmp	r6, #10
 8005558:	d104      	bne.n	8005564 <__swbuf_r+0x6c>
 800555a:	4621      	mov	r1, r4
 800555c:	4628      	mov	r0, r5
 800555e:	f000 ff8f 	bl	8006480 <_fflush_r>
 8005562:	b988      	cbnz	r0, 8005588 <__swbuf_r+0x90>
 8005564:	4638      	mov	r0, r7
 8005566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005568:	4b0a      	ldr	r3, [pc, #40]	; (8005594 <__swbuf_r+0x9c>)
 800556a:	429c      	cmp	r4, r3
 800556c:	d101      	bne.n	8005572 <__swbuf_r+0x7a>
 800556e:	68ac      	ldr	r4, [r5, #8]
 8005570:	e7cf      	b.n	8005512 <__swbuf_r+0x1a>
 8005572:	4b09      	ldr	r3, [pc, #36]	; (8005598 <__swbuf_r+0xa0>)
 8005574:	429c      	cmp	r4, r3
 8005576:	bf08      	it	eq
 8005578:	68ec      	ldreq	r4, [r5, #12]
 800557a:	e7ca      	b.n	8005512 <__swbuf_r+0x1a>
 800557c:	4621      	mov	r1, r4
 800557e:	4628      	mov	r0, r5
 8005580:	f000 f80c 	bl	800559c <__swsetup_r>
 8005584:	2800      	cmp	r0, #0
 8005586:	d0cb      	beq.n	8005520 <__swbuf_r+0x28>
 8005588:	f04f 37ff 	mov.w	r7, #4294967295
 800558c:	e7ea      	b.n	8005564 <__swbuf_r+0x6c>
 800558e:	bf00      	nop
 8005590:	08007870 	.word	0x08007870
 8005594:	08007890 	.word	0x08007890
 8005598:	08007850 	.word	0x08007850

0800559c <__swsetup_r>:
 800559c:	4b32      	ldr	r3, [pc, #200]	; (8005668 <__swsetup_r+0xcc>)
 800559e:	b570      	push	{r4, r5, r6, lr}
 80055a0:	681d      	ldr	r5, [r3, #0]
 80055a2:	4606      	mov	r6, r0
 80055a4:	460c      	mov	r4, r1
 80055a6:	b125      	cbz	r5, 80055b2 <__swsetup_r+0x16>
 80055a8:	69ab      	ldr	r3, [r5, #24]
 80055aa:	b913      	cbnz	r3, 80055b2 <__swsetup_r+0x16>
 80055ac:	4628      	mov	r0, r5
 80055ae:	f000 fffb 	bl	80065a8 <__sinit>
 80055b2:	4b2e      	ldr	r3, [pc, #184]	; (800566c <__swsetup_r+0xd0>)
 80055b4:	429c      	cmp	r4, r3
 80055b6:	d10f      	bne.n	80055d8 <__swsetup_r+0x3c>
 80055b8:	686c      	ldr	r4, [r5, #4]
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055c0:	0719      	lsls	r1, r3, #28
 80055c2:	d42c      	bmi.n	800561e <__swsetup_r+0x82>
 80055c4:	06dd      	lsls	r5, r3, #27
 80055c6:	d411      	bmi.n	80055ec <__swsetup_r+0x50>
 80055c8:	2309      	movs	r3, #9
 80055ca:	6033      	str	r3, [r6, #0]
 80055cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055d0:	f04f 30ff 	mov.w	r0, #4294967295
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	e03e      	b.n	8005656 <__swsetup_r+0xba>
 80055d8:	4b25      	ldr	r3, [pc, #148]	; (8005670 <__swsetup_r+0xd4>)
 80055da:	429c      	cmp	r4, r3
 80055dc:	d101      	bne.n	80055e2 <__swsetup_r+0x46>
 80055de:	68ac      	ldr	r4, [r5, #8]
 80055e0:	e7eb      	b.n	80055ba <__swsetup_r+0x1e>
 80055e2:	4b24      	ldr	r3, [pc, #144]	; (8005674 <__swsetup_r+0xd8>)
 80055e4:	429c      	cmp	r4, r3
 80055e6:	bf08      	it	eq
 80055e8:	68ec      	ldreq	r4, [r5, #12]
 80055ea:	e7e6      	b.n	80055ba <__swsetup_r+0x1e>
 80055ec:	0758      	lsls	r0, r3, #29
 80055ee:	d512      	bpl.n	8005616 <__swsetup_r+0x7a>
 80055f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055f2:	b141      	cbz	r1, 8005606 <__swsetup_r+0x6a>
 80055f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055f8:	4299      	cmp	r1, r3
 80055fa:	d002      	beq.n	8005602 <__swsetup_r+0x66>
 80055fc:	4630      	mov	r0, r6
 80055fe:	f001 fc91 	bl	8006f24 <_free_r>
 8005602:	2300      	movs	r3, #0
 8005604:	6363      	str	r3, [r4, #52]	; 0x34
 8005606:	89a3      	ldrh	r3, [r4, #12]
 8005608:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800560c:	81a3      	strh	r3, [r4, #12]
 800560e:	2300      	movs	r3, #0
 8005610:	6063      	str	r3, [r4, #4]
 8005612:	6923      	ldr	r3, [r4, #16]
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	89a3      	ldrh	r3, [r4, #12]
 8005618:	f043 0308 	orr.w	r3, r3, #8
 800561c:	81a3      	strh	r3, [r4, #12]
 800561e:	6923      	ldr	r3, [r4, #16]
 8005620:	b94b      	cbnz	r3, 8005636 <__swsetup_r+0x9a>
 8005622:	89a3      	ldrh	r3, [r4, #12]
 8005624:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800562c:	d003      	beq.n	8005636 <__swsetup_r+0x9a>
 800562e:	4621      	mov	r1, r4
 8005630:	4630      	mov	r0, r6
 8005632:	f001 f883 	bl	800673c <__smakebuf_r>
 8005636:	89a0      	ldrh	r0, [r4, #12]
 8005638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800563c:	f010 0301 	ands.w	r3, r0, #1
 8005640:	d00a      	beq.n	8005658 <__swsetup_r+0xbc>
 8005642:	2300      	movs	r3, #0
 8005644:	60a3      	str	r3, [r4, #8]
 8005646:	6963      	ldr	r3, [r4, #20]
 8005648:	425b      	negs	r3, r3
 800564a:	61a3      	str	r3, [r4, #24]
 800564c:	6923      	ldr	r3, [r4, #16]
 800564e:	b943      	cbnz	r3, 8005662 <__swsetup_r+0xc6>
 8005650:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005654:	d1ba      	bne.n	80055cc <__swsetup_r+0x30>
 8005656:	bd70      	pop	{r4, r5, r6, pc}
 8005658:	0781      	lsls	r1, r0, #30
 800565a:	bf58      	it	pl
 800565c:	6963      	ldrpl	r3, [r4, #20]
 800565e:	60a3      	str	r3, [r4, #8]
 8005660:	e7f4      	b.n	800564c <__swsetup_r+0xb0>
 8005662:	2000      	movs	r0, #0
 8005664:	e7f7      	b.n	8005656 <__swsetup_r+0xba>
 8005666:	bf00      	nop
 8005668:	20000010 	.word	0x20000010
 800566c:	08007870 	.word	0x08007870
 8005670:	08007890 	.word	0x08007890
 8005674:	08007850 	.word	0x08007850

08005678 <quorem>:
 8005678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	6903      	ldr	r3, [r0, #16]
 800567e:	690c      	ldr	r4, [r1, #16]
 8005680:	4607      	mov	r7, r0
 8005682:	42a3      	cmp	r3, r4
 8005684:	f2c0 8083 	blt.w	800578e <quorem+0x116>
 8005688:	3c01      	subs	r4, #1
 800568a:	f100 0514 	add.w	r5, r0, #20
 800568e:	f101 0814 	add.w	r8, r1, #20
 8005692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005696:	9301      	str	r3, [sp, #4]
 8005698:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800569c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056a0:	3301      	adds	r3, #1
 80056a2:	429a      	cmp	r2, r3
 80056a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80056a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80056ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056b0:	d332      	bcc.n	8005718 <quorem+0xa0>
 80056b2:	f04f 0e00 	mov.w	lr, #0
 80056b6:	4640      	mov	r0, r8
 80056b8:	46ac      	mov	ip, r5
 80056ba:	46f2      	mov	sl, lr
 80056bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80056c0:	b293      	uxth	r3, r2
 80056c2:	fb06 e303 	mla	r3, r6, r3, lr
 80056c6:	0c12      	lsrs	r2, r2, #16
 80056c8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80056cc:	fb06 e202 	mla	r2, r6, r2, lr
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	ebaa 0303 	sub.w	r3, sl, r3
 80056d6:	f8dc a000 	ldr.w	sl, [ip]
 80056da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80056de:	fa1f fa8a 	uxth.w	sl, sl
 80056e2:	4453      	add	r3, sl
 80056e4:	fa1f fa82 	uxth.w	sl, r2
 80056e8:	f8dc 2000 	ldr.w	r2, [ip]
 80056ec:	4581      	cmp	r9, r0
 80056ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80056f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005700:	f84c 3b04 	str.w	r3, [ip], #4
 8005704:	d2da      	bcs.n	80056bc <quorem+0x44>
 8005706:	f855 300b 	ldr.w	r3, [r5, fp]
 800570a:	b92b      	cbnz	r3, 8005718 <quorem+0xa0>
 800570c:	9b01      	ldr	r3, [sp, #4]
 800570e:	3b04      	subs	r3, #4
 8005710:	429d      	cmp	r5, r3
 8005712:	461a      	mov	r2, r3
 8005714:	d32f      	bcc.n	8005776 <quorem+0xfe>
 8005716:	613c      	str	r4, [r7, #16]
 8005718:	4638      	mov	r0, r7
 800571a:	f001 faed 	bl	8006cf8 <__mcmp>
 800571e:	2800      	cmp	r0, #0
 8005720:	db25      	blt.n	800576e <quorem+0xf6>
 8005722:	4628      	mov	r0, r5
 8005724:	f04f 0c00 	mov.w	ip, #0
 8005728:	3601      	adds	r6, #1
 800572a:	f858 1b04 	ldr.w	r1, [r8], #4
 800572e:	f8d0 e000 	ldr.w	lr, [r0]
 8005732:	b28b      	uxth	r3, r1
 8005734:	ebac 0303 	sub.w	r3, ip, r3
 8005738:	fa1f f28e 	uxth.w	r2, lr
 800573c:	4413      	add	r3, r2
 800573e:	0c0a      	lsrs	r2, r1, #16
 8005740:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005744:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005748:	b29b      	uxth	r3, r3
 800574a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800574e:	45c1      	cmp	r9, r8
 8005750:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005754:	f840 3b04 	str.w	r3, [r0], #4
 8005758:	d2e7      	bcs.n	800572a <quorem+0xb2>
 800575a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800575e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005762:	b922      	cbnz	r2, 800576e <quorem+0xf6>
 8005764:	3b04      	subs	r3, #4
 8005766:	429d      	cmp	r5, r3
 8005768:	461a      	mov	r2, r3
 800576a:	d30a      	bcc.n	8005782 <quorem+0x10a>
 800576c:	613c      	str	r4, [r7, #16]
 800576e:	4630      	mov	r0, r6
 8005770:	b003      	add	sp, #12
 8005772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005776:	6812      	ldr	r2, [r2, #0]
 8005778:	3b04      	subs	r3, #4
 800577a:	2a00      	cmp	r2, #0
 800577c:	d1cb      	bne.n	8005716 <quorem+0x9e>
 800577e:	3c01      	subs	r4, #1
 8005780:	e7c6      	b.n	8005710 <quorem+0x98>
 8005782:	6812      	ldr	r2, [r2, #0]
 8005784:	3b04      	subs	r3, #4
 8005786:	2a00      	cmp	r2, #0
 8005788:	d1f0      	bne.n	800576c <quorem+0xf4>
 800578a:	3c01      	subs	r4, #1
 800578c:	e7eb      	b.n	8005766 <quorem+0xee>
 800578e:	2000      	movs	r0, #0
 8005790:	e7ee      	b.n	8005770 <quorem+0xf8>
 8005792:	0000      	movs	r0, r0
 8005794:	0000      	movs	r0, r0
	...

08005798 <_dtoa_r>:
 8005798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579c:	4616      	mov	r6, r2
 800579e:	461f      	mov	r7, r3
 80057a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80057a2:	b099      	sub	sp, #100	; 0x64
 80057a4:	4605      	mov	r5, r0
 80057a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80057aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80057ae:	b974      	cbnz	r4, 80057ce <_dtoa_r+0x36>
 80057b0:	2010      	movs	r0, #16
 80057b2:	f001 f803 	bl	80067bc <malloc>
 80057b6:	4602      	mov	r2, r0
 80057b8:	6268      	str	r0, [r5, #36]	; 0x24
 80057ba:	b920      	cbnz	r0, 80057c6 <_dtoa_r+0x2e>
 80057bc:	21ea      	movs	r1, #234	; 0xea
 80057be:	4bae      	ldr	r3, [pc, #696]	; (8005a78 <_dtoa_r+0x2e0>)
 80057c0:	48ae      	ldr	r0, [pc, #696]	; (8005a7c <_dtoa_r+0x2e4>)
 80057c2:	f001 fe13 	bl	80073ec <__assert_func>
 80057c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057ca:	6004      	str	r4, [r0, #0]
 80057cc:	60c4      	str	r4, [r0, #12]
 80057ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80057d0:	6819      	ldr	r1, [r3, #0]
 80057d2:	b151      	cbz	r1, 80057ea <_dtoa_r+0x52>
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	2301      	movs	r3, #1
 80057d8:	4093      	lsls	r3, r2
 80057da:	604a      	str	r2, [r1, #4]
 80057dc:	608b      	str	r3, [r1, #8]
 80057de:	4628      	mov	r0, r5
 80057e0:	f001 f850 	bl	8006884 <_Bfree>
 80057e4:	2200      	movs	r2, #0
 80057e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	1e3b      	subs	r3, r7, #0
 80057ec:	bfaf      	iteee	ge
 80057ee:	2300      	movge	r3, #0
 80057f0:	2201      	movlt	r2, #1
 80057f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80057f6:	9305      	strlt	r3, [sp, #20]
 80057f8:	bfa8      	it	ge
 80057fa:	f8c8 3000 	strge.w	r3, [r8]
 80057fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005802:	4b9f      	ldr	r3, [pc, #636]	; (8005a80 <_dtoa_r+0x2e8>)
 8005804:	bfb8      	it	lt
 8005806:	f8c8 2000 	strlt.w	r2, [r8]
 800580a:	ea33 0309 	bics.w	r3, r3, r9
 800580e:	d119      	bne.n	8005844 <_dtoa_r+0xac>
 8005810:	f242 730f 	movw	r3, #9999	; 0x270f
 8005814:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800581c:	4333      	orrs	r3, r6
 800581e:	f000 8580 	beq.w	8006322 <_dtoa_r+0xb8a>
 8005822:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005824:	b953      	cbnz	r3, 800583c <_dtoa_r+0xa4>
 8005826:	4b97      	ldr	r3, [pc, #604]	; (8005a84 <_dtoa_r+0x2ec>)
 8005828:	e022      	b.n	8005870 <_dtoa_r+0xd8>
 800582a:	4b97      	ldr	r3, [pc, #604]	; (8005a88 <_dtoa_r+0x2f0>)
 800582c:	9308      	str	r3, [sp, #32]
 800582e:	3308      	adds	r3, #8
 8005830:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	9808      	ldr	r0, [sp, #32]
 8005836:	b019      	add	sp, #100	; 0x64
 8005838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800583c:	4b91      	ldr	r3, [pc, #580]	; (8005a84 <_dtoa_r+0x2ec>)
 800583e:	9308      	str	r3, [sp, #32]
 8005840:	3303      	adds	r3, #3
 8005842:	e7f5      	b.n	8005830 <_dtoa_r+0x98>
 8005844:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005848:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800584c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005850:	2200      	movs	r2, #0
 8005852:	2300      	movs	r3, #0
 8005854:	f7fb f8c0 	bl	80009d8 <__aeabi_dcmpeq>
 8005858:	4680      	mov	r8, r0
 800585a:	b158      	cbz	r0, 8005874 <_dtoa_r+0xdc>
 800585c:	2301      	movs	r3, #1
 800585e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 8559 	beq.w	800631c <_dtoa_r+0xb84>
 800586a:	4888      	ldr	r0, [pc, #544]	; (8005a8c <_dtoa_r+0x2f4>)
 800586c:	6018      	str	r0, [r3, #0]
 800586e:	1e43      	subs	r3, r0, #1
 8005870:	9308      	str	r3, [sp, #32]
 8005872:	e7df      	b.n	8005834 <_dtoa_r+0x9c>
 8005874:	ab16      	add	r3, sp, #88	; 0x58
 8005876:	9301      	str	r3, [sp, #4]
 8005878:	ab17      	add	r3, sp, #92	; 0x5c
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	4628      	mov	r0, r5
 800587e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005882:	f001 fae5 	bl	8006e50 <__d2b>
 8005886:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800588a:	4682      	mov	sl, r0
 800588c:	2c00      	cmp	r4, #0
 800588e:	d07e      	beq.n	800598e <_dtoa_r+0x1f6>
 8005890:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005896:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800589a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800589e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80058a2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80058a6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80058aa:	2200      	movs	r2, #0
 80058ac:	4b78      	ldr	r3, [pc, #480]	; (8005a90 <_dtoa_r+0x2f8>)
 80058ae:	f7fa fc73 	bl	8000198 <__aeabi_dsub>
 80058b2:	a36b      	add	r3, pc, #428	; (adr r3, 8005a60 <_dtoa_r+0x2c8>)
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	f7fa fe26 	bl	8000508 <__aeabi_dmul>
 80058bc:	a36a      	add	r3, pc, #424	; (adr r3, 8005a68 <_dtoa_r+0x2d0>)
 80058be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c2:	f7fa fc6b 	bl	800019c <__adddf3>
 80058c6:	4606      	mov	r6, r0
 80058c8:	4620      	mov	r0, r4
 80058ca:	460f      	mov	r7, r1
 80058cc:	f7fa fdb2 	bl	8000434 <__aeabi_i2d>
 80058d0:	a367      	add	r3, pc, #412	; (adr r3, 8005a70 <_dtoa_r+0x2d8>)
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	f7fa fe17 	bl	8000508 <__aeabi_dmul>
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	4630      	mov	r0, r6
 80058e0:	4639      	mov	r1, r7
 80058e2:	f7fa fc5b 	bl	800019c <__adddf3>
 80058e6:	4606      	mov	r6, r0
 80058e8:	460f      	mov	r7, r1
 80058ea:	f7fb f8bd 	bl	8000a68 <__aeabi_d2iz>
 80058ee:	2200      	movs	r2, #0
 80058f0:	4681      	mov	r9, r0
 80058f2:	2300      	movs	r3, #0
 80058f4:	4630      	mov	r0, r6
 80058f6:	4639      	mov	r1, r7
 80058f8:	f7fb f878 	bl	80009ec <__aeabi_dcmplt>
 80058fc:	b148      	cbz	r0, 8005912 <_dtoa_r+0x17a>
 80058fe:	4648      	mov	r0, r9
 8005900:	f7fa fd98 	bl	8000434 <__aeabi_i2d>
 8005904:	4632      	mov	r2, r6
 8005906:	463b      	mov	r3, r7
 8005908:	f7fb f866 	bl	80009d8 <__aeabi_dcmpeq>
 800590c:	b908      	cbnz	r0, 8005912 <_dtoa_r+0x17a>
 800590e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005912:	f1b9 0f16 	cmp.w	r9, #22
 8005916:	d857      	bhi.n	80059c8 <_dtoa_r+0x230>
 8005918:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800591c:	4b5d      	ldr	r3, [pc, #372]	; (8005a94 <_dtoa_r+0x2fc>)
 800591e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005926:	f7fb f861 	bl	80009ec <__aeabi_dcmplt>
 800592a:	2800      	cmp	r0, #0
 800592c:	d04e      	beq.n	80059cc <_dtoa_r+0x234>
 800592e:	2300      	movs	r3, #0
 8005930:	f109 39ff 	add.w	r9, r9, #4294967295
 8005934:	930f      	str	r3, [sp, #60]	; 0x3c
 8005936:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005938:	1b1c      	subs	r4, r3, r4
 800593a:	1e63      	subs	r3, r4, #1
 800593c:	9309      	str	r3, [sp, #36]	; 0x24
 800593e:	bf49      	itett	mi
 8005940:	f1c4 0301 	rsbmi	r3, r4, #1
 8005944:	2300      	movpl	r3, #0
 8005946:	9306      	strmi	r3, [sp, #24]
 8005948:	2300      	movmi	r3, #0
 800594a:	bf54      	ite	pl
 800594c:	9306      	strpl	r3, [sp, #24]
 800594e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005950:	f1b9 0f00 	cmp.w	r9, #0
 8005954:	db3c      	blt.n	80059d0 <_dtoa_r+0x238>
 8005956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005958:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800595c:	444b      	add	r3, r9
 800595e:	9309      	str	r3, [sp, #36]	; 0x24
 8005960:	2300      	movs	r3, #0
 8005962:	930a      	str	r3, [sp, #40]	; 0x28
 8005964:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005966:	2b09      	cmp	r3, #9
 8005968:	d86c      	bhi.n	8005a44 <_dtoa_r+0x2ac>
 800596a:	2b05      	cmp	r3, #5
 800596c:	bfc4      	itt	gt
 800596e:	3b04      	subgt	r3, #4
 8005970:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005972:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005974:	bfc8      	it	gt
 8005976:	2400      	movgt	r4, #0
 8005978:	f1a3 0302 	sub.w	r3, r3, #2
 800597c:	bfd8      	it	le
 800597e:	2401      	movle	r4, #1
 8005980:	2b03      	cmp	r3, #3
 8005982:	f200 808b 	bhi.w	8005a9c <_dtoa_r+0x304>
 8005986:	e8df f003 	tbb	[pc, r3]
 800598a:	4f2d      	.short	0x4f2d
 800598c:	5b4d      	.short	0x5b4d
 800598e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005992:	441c      	add	r4, r3
 8005994:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005998:	2b20      	cmp	r3, #32
 800599a:	bfc3      	ittte	gt
 800599c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80059a0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80059a4:	fa09 f303 	lslgt.w	r3, r9, r3
 80059a8:	f1c3 0320 	rsble	r3, r3, #32
 80059ac:	bfc6      	itte	gt
 80059ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80059b2:	4318      	orrgt	r0, r3
 80059b4:	fa06 f003 	lslle.w	r0, r6, r3
 80059b8:	f7fa fd2c 	bl	8000414 <__aeabi_ui2d>
 80059bc:	2301      	movs	r3, #1
 80059be:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80059c2:	3c01      	subs	r4, #1
 80059c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80059c6:	e770      	b.n	80058aa <_dtoa_r+0x112>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e7b3      	b.n	8005934 <_dtoa_r+0x19c>
 80059cc:	900f      	str	r0, [sp, #60]	; 0x3c
 80059ce:	e7b2      	b.n	8005936 <_dtoa_r+0x19e>
 80059d0:	9b06      	ldr	r3, [sp, #24]
 80059d2:	eba3 0309 	sub.w	r3, r3, r9
 80059d6:	9306      	str	r3, [sp, #24]
 80059d8:	f1c9 0300 	rsb	r3, r9, #0
 80059dc:	930a      	str	r3, [sp, #40]	; 0x28
 80059de:	2300      	movs	r3, #0
 80059e0:	930e      	str	r3, [sp, #56]	; 0x38
 80059e2:	e7bf      	b.n	8005964 <_dtoa_r+0x1cc>
 80059e4:	2300      	movs	r3, #0
 80059e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80059e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	dc59      	bgt.n	8005aa2 <_dtoa_r+0x30a>
 80059ee:	f04f 0b01 	mov.w	fp, #1
 80059f2:	465b      	mov	r3, fp
 80059f4:	f8cd b008 	str.w	fp, [sp, #8]
 80059f8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80059fc:	2200      	movs	r2, #0
 80059fe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005a00:	6042      	str	r2, [r0, #4]
 8005a02:	2204      	movs	r2, #4
 8005a04:	f102 0614 	add.w	r6, r2, #20
 8005a08:	429e      	cmp	r6, r3
 8005a0a:	6841      	ldr	r1, [r0, #4]
 8005a0c:	d94f      	bls.n	8005aae <_dtoa_r+0x316>
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f000 fef8 	bl	8006804 <_Balloc>
 8005a14:	9008      	str	r0, [sp, #32]
 8005a16:	2800      	cmp	r0, #0
 8005a18:	d14d      	bne.n	8005ab6 <_dtoa_r+0x31e>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005a20:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <_dtoa_r+0x300>)
 8005a22:	e6cd      	b.n	80057c0 <_dtoa_r+0x28>
 8005a24:	2301      	movs	r3, #1
 8005a26:	e7de      	b.n	80059e6 <_dtoa_r+0x24e>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a2e:	eb09 0b03 	add.w	fp, r9, r3
 8005a32:	f10b 0301 	add.w	r3, fp, #1
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	9302      	str	r3, [sp, #8]
 8005a3a:	bfb8      	it	lt
 8005a3c:	2301      	movlt	r3, #1
 8005a3e:	e7dd      	b.n	80059fc <_dtoa_r+0x264>
 8005a40:	2301      	movs	r3, #1
 8005a42:	e7f2      	b.n	8005a2a <_dtoa_r+0x292>
 8005a44:	2401      	movs	r4, #1
 8005a46:	2300      	movs	r3, #0
 8005a48:	940b      	str	r4, [sp, #44]	; 0x2c
 8005a4a:	9322      	str	r3, [sp, #136]	; 0x88
 8005a4c:	f04f 3bff 	mov.w	fp, #4294967295
 8005a50:	2200      	movs	r2, #0
 8005a52:	2312      	movs	r3, #18
 8005a54:	f8cd b008 	str.w	fp, [sp, #8]
 8005a58:	9223      	str	r2, [sp, #140]	; 0x8c
 8005a5a:	e7cf      	b.n	80059fc <_dtoa_r+0x264>
 8005a5c:	f3af 8000 	nop.w
 8005a60:	636f4361 	.word	0x636f4361
 8005a64:	3fd287a7 	.word	0x3fd287a7
 8005a68:	8b60c8b3 	.word	0x8b60c8b3
 8005a6c:	3fc68a28 	.word	0x3fc68a28
 8005a70:	509f79fb 	.word	0x509f79fb
 8005a74:	3fd34413 	.word	0x3fd34413
 8005a78:	080077c6 	.word	0x080077c6
 8005a7c:	080077dd 	.word	0x080077dd
 8005a80:	7ff00000 	.word	0x7ff00000
 8005a84:	080077c2 	.word	0x080077c2
 8005a88:	080077b9 	.word	0x080077b9
 8005a8c:	08007695 	.word	0x08007695
 8005a90:	3ff80000 	.word	0x3ff80000
 8005a94:	08007938 	.word	0x08007938
 8005a98:	0800783c 	.word	0x0800783c
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005aa0:	e7d4      	b.n	8005a4c <_dtoa_r+0x2b4>
 8005aa2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005aa6:	465b      	mov	r3, fp
 8005aa8:	f8cd b008 	str.w	fp, [sp, #8]
 8005aac:	e7a6      	b.n	80059fc <_dtoa_r+0x264>
 8005aae:	3101      	adds	r1, #1
 8005ab0:	6041      	str	r1, [r0, #4]
 8005ab2:	0052      	lsls	r2, r2, #1
 8005ab4:	e7a6      	b.n	8005a04 <_dtoa_r+0x26c>
 8005ab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ab8:	9a08      	ldr	r2, [sp, #32]
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	9b02      	ldr	r3, [sp, #8]
 8005abe:	2b0e      	cmp	r3, #14
 8005ac0:	f200 80a8 	bhi.w	8005c14 <_dtoa_r+0x47c>
 8005ac4:	2c00      	cmp	r4, #0
 8005ac6:	f000 80a5 	beq.w	8005c14 <_dtoa_r+0x47c>
 8005aca:	f1b9 0f00 	cmp.w	r9, #0
 8005ace:	dd34      	ble.n	8005b3a <_dtoa_r+0x3a2>
 8005ad0:	4a9a      	ldr	r2, [pc, #616]	; (8005d3c <_dtoa_r+0x5a4>)
 8005ad2:	f009 030f 	and.w	r3, r9, #15
 8005ad6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ada:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005ade:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ae2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005ae6:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005aea:	d016      	beq.n	8005b1a <_dtoa_r+0x382>
 8005aec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005af0:	4b93      	ldr	r3, [pc, #588]	; (8005d40 <_dtoa_r+0x5a8>)
 8005af2:	2703      	movs	r7, #3
 8005af4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005af8:	f7fa fe30 	bl	800075c <__aeabi_ddiv>
 8005afc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b00:	f004 040f 	and.w	r4, r4, #15
 8005b04:	4e8e      	ldr	r6, [pc, #568]	; (8005d40 <_dtoa_r+0x5a8>)
 8005b06:	b954      	cbnz	r4, 8005b1e <_dtoa_r+0x386>
 8005b08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b10:	f7fa fe24 	bl	800075c <__aeabi_ddiv>
 8005b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b18:	e029      	b.n	8005b6e <_dtoa_r+0x3d6>
 8005b1a:	2702      	movs	r7, #2
 8005b1c:	e7f2      	b.n	8005b04 <_dtoa_r+0x36c>
 8005b1e:	07e1      	lsls	r1, r4, #31
 8005b20:	d508      	bpl.n	8005b34 <_dtoa_r+0x39c>
 8005b22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b2a:	f7fa fced 	bl	8000508 <__aeabi_dmul>
 8005b2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b32:	3701      	adds	r7, #1
 8005b34:	1064      	asrs	r4, r4, #1
 8005b36:	3608      	adds	r6, #8
 8005b38:	e7e5      	b.n	8005b06 <_dtoa_r+0x36e>
 8005b3a:	f000 80a5 	beq.w	8005c88 <_dtoa_r+0x4f0>
 8005b3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b42:	f1c9 0400 	rsb	r4, r9, #0
 8005b46:	4b7d      	ldr	r3, [pc, #500]	; (8005d3c <_dtoa_r+0x5a4>)
 8005b48:	f004 020f 	and.w	r2, r4, #15
 8005b4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f7fa fcd8 	bl	8000508 <__aeabi_dmul>
 8005b58:	2702      	movs	r7, #2
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b60:	4e77      	ldr	r6, [pc, #476]	; (8005d40 <_dtoa_r+0x5a8>)
 8005b62:	1124      	asrs	r4, r4, #4
 8005b64:	2c00      	cmp	r4, #0
 8005b66:	f040 8084 	bne.w	8005c72 <_dtoa_r+0x4da>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1d2      	bne.n	8005b14 <_dtoa_r+0x37c>
 8005b6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 808b 	beq.w	8005c8c <_dtoa_r+0x4f4>
 8005b76:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b82:	2200      	movs	r2, #0
 8005b84:	4b6f      	ldr	r3, [pc, #444]	; (8005d44 <_dtoa_r+0x5ac>)
 8005b86:	f7fa ff31 	bl	80009ec <__aeabi_dcmplt>
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d07e      	beq.n	8005c8c <_dtoa_r+0x4f4>
 8005b8e:	9b02      	ldr	r3, [sp, #8]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d07b      	beq.n	8005c8c <_dtoa_r+0x4f4>
 8005b94:	f1bb 0f00 	cmp.w	fp, #0
 8005b98:	dd38      	ble.n	8005c0c <_dtoa_r+0x474>
 8005b9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	4b69      	ldr	r3, [pc, #420]	; (8005d48 <_dtoa_r+0x5b0>)
 8005ba2:	f7fa fcb1 	bl	8000508 <__aeabi_dmul>
 8005ba6:	465c      	mov	r4, fp
 8005ba8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bac:	f109 38ff 	add.w	r8, r9, #4294967295
 8005bb0:	3701      	adds	r7, #1
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	f7fa fc3e 	bl	8000434 <__aeabi_i2d>
 8005bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bbc:	f7fa fca4 	bl	8000508 <__aeabi_dmul>
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	4b62      	ldr	r3, [pc, #392]	; (8005d4c <_dtoa_r+0x5b4>)
 8005bc4:	f7fa faea 	bl	800019c <__adddf3>
 8005bc8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005bcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005bd0:	9611      	str	r6, [sp, #68]	; 0x44
 8005bd2:	2c00      	cmp	r4, #0
 8005bd4:	d15d      	bne.n	8005c92 <_dtoa_r+0x4fa>
 8005bd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	4b5c      	ldr	r3, [pc, #368]	; (8005d50 <_dtoa_r+0x5b8>)
 8005bde:	f7fa fadb 	bl	8000198 <__aeabi_dsub>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005bea:	4633      	mov	r3, r6
 8005bec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005bee:	f7fa ff1b 	bl	8000a28 <__aeabi_dcmpgt>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	f040 829e 	bne.w	8006134 <_dtoa_r+0x99c>
 8005bf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005bfe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c02:	f7fa fef3 	bl	80009ec <__aeabi_dcmplt>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	f040 8292 	bne.w	8006130 <_dtoa_r+0x998>
 8005c0c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005c10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f2c0 8153 	blt.w	8005ec2 <_dtoa_r+0x72a>
 8005c1c:	f1b9 0f0e 	cmp.w	r9, #14
 8005c20:	f300 814f 	bgt.w	8005ec2 <_dtoa_r+0x72a>
 8005c24:	4b45      	ldr	r3, [pc, #276]	; (8005d3c <_dtoa_r+0x5a4>)
 8005c26:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005c2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c2e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005c32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f280 80db 	bge.w	8005df0 <_dtoa_r+0x658>
 8005c3a:	9b02      	ldr	r3, [sp, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f300 80d7 	bgt.w	8005df0 <_dtoa_r+0x658>
 8005c42:	f040 8274 	bne.w	800612e <_dtoa_r+0x996>
 8005c46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	4b40      	ldr	r3, [pc, #256]	; (8005d50 <_dtoa_r+0x5b8>)
 8005c4e:	f7fa fc5b 	bl	8000508 <__aeabi_dmul>
 8005c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c56:	f7fa fedd 	bl	8000a14 <__aeabi_dcmpge>
 8005c5a:	9c02      	ldr	r4, [sp, #8]
 8005c5c:	4626      	mov	r6, r4
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	f040 824a 	bne.w	80060f8 <_dtoa_r+0x960>
 8005c64:	2331      	movs	r3, #49	; 0x31
 8005c66:	9f08      	ldr	r7, [sp, #32]
 8005c68:	f109 0901 	add.w	r9, r9, #1
 8005c6c:	f807 3b01 	strb.w	r3, [r7], #1
 8005c70:	e246      	b.n	8006100 <_dtoa_r+0x968>
 8005c72:	07e2      	lsls	r2, r4, #31
 8005c74:	d505      	bpl.n	8005c82 <_dtoa_r+0x4ea>
 8005c76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c7a:	f7fa fc45 	bl	8000508 <__aeabi_dmul>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	3701      	adds	r7, #1
 8005c82:	1064      	asrs	r4, r4, #1
 8005c84:	3608      	adds	r6, #8
 8005c86:	e76d      	b.n	8005b64 <_dtoa_r+0x3cc>
 8005c88:	2702      	movs	r7, #2
 8005c8a:	e770      	b.n	8005b6e <_dtoa_r+0x3d6>
 8005c8c:	46c8      	mov	r8, r9
 8005c8e:	9c02      	ldr	r4, [sp, #8]
 8005c90:	e78f      	b.n	8005bb2 <_dtoa_r+0x41a>
 8005c92:	9908      	ldr	r1, [sp, #32]
 8005c94:	4b29      	ldr	r3, [pc, #164]	; (8005d3c <_dtoa_r+0x5a4>)
 8005c96:	4421      	add	r1, r4
 8005c98:	9112      	str	r1, [sp, #72]	; 0x48
 8005c9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ca0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005ca4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ca8:	2900      	cmp	r1, #0
 8005caa:	d055      	beq.n	8005d58 <_dtoa_r+0x5c0>
 8005cac:	2000      	movs	r0, #0
 8005cae:	4929      	ldr	r1, [pc, #164]	; (8005d54 <_dtoa_r+0x5bc>)
 8005cb0:	f7fa fd54 	bl	800075c <__aeabi_ddiv>
 8005cb4:	463b      	mov	r3, r7
 8005cb6:	4632      	mov	r2, r6
 8005cb8:	f7fa fa6e 	bl	8000198 <__aeabi_dsub>
 8005cbc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cc0:	9f08      	ldr	r7, [sp, #32]
 8005cc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cc6:	f7fa fecf 	bl	8000a68 <__aeabi_d2iz>
 8005cca:	4604      	mov	r4, r0
 8005ccc:	f7fa fbb2 	bl	8000434 <__aeabi_i2d>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cd8:	f7fa fa5e 	bl	8000198 <__aeabi_dsub>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	3430      	adds	r4, #48	; 0x30
 8005ce2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ce6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005cea:	f807 4b01 	strb.w	r4, [r7], #1
 8005cee:	f7fa fe7d 	bl	80009ec <__aeabi_dcmplt>
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	d174      	bne.n	8005de0 <_dtoa_r+0x648>
 8005cf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	4911      	ldr	r1, [pc, #68]	; (8005d44 <_dtoa_r+0x5ac>)
 8005cfe:	f7fa fa4b 	bl	8000198 <__aeabi_dsub>
 8005d02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d06:	f7fa fe71 	bl	80009ec <__aeabi_dcmplt>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	f040 80b6 	bne.w	8005e7c <_dtoa_r+0x6e4>
 8005d10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d12:	429f      	cmp	r7, r3
 8005d14:	f43f af7a 	beq.w	8005c0c <_dtoa_r+0x474>
 8005d18:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <_dtoa_r+0x5b0>)
 8005d20:	f7fa fbf2 	bl	8000508 <__aeabi_dmul>
 8005d24:	2200      	movs	r2, #0
 8005d26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d2e:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <_dtoa_r+0x5b0>)
 8005d30:	f7fa fbea 	bl	8000508 <__aeabi_dmul>
 8005d34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d38:	e7c3      	b.n	8005cc2 <_dtoa_r+0x52a>
 8005d3a:	bf00      	nop
 8005d3c:	08007938 	.word	0x08007938
 8005d40:	08007910 	.word	0x08007910
 8005d44:	3ff00000 	.word	0x3ff00000
 8005d48:	40240000 	.word	0x40240000
 8005d4c:	401c0000 	.word	0x401c0000
 8005d50:	40140000 	.word	0x40140000
 8005d54:	3fe00000 	.word	0x3fe00000
 8005d58:	4630      	mov	r0, r6
 8005d5a:	4639      	mov	r1, r7
 8005d5c:	f7fa fbd4 	bl	8000508 <__aeabi_dmul>
 8005d60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d62:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d66:	9c08      	ldr	r4, [sp, #32]
 8005d68:	9314      	str	r3, [sp, #80]	; 0x50
 8005d6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d6e:	f7fa fe7b 	bl	8000a68 <__aeabi_d2iz>
 8005d72:	9015      	str	r0, [sp, #84]	; 0x54
 8005d74:	f7fa fb5e 	bl	8000434 <__aeabi_i2d>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d80:	f7fa fa0a 	bl	8000198 <__aeabi_dsub>
 8005d84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d86:	4606      	mov	r6, r0
 8005d88:	3330      	adds	r3, #48	; 0x30
 8005d8a:	f804 3b01 	strb.w	r3, [r4], #1
 8005d8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d90:	460f      	mov	r7, r1
 8005d92:	429c      	cmp	r4, r3
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	d124      	bne.n	8005de4 <_dtoa_r+0x64c>
 8005d9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d9e:	4bb3      	ldr	r3, [pc, #716]	; (800606c <_dtoa_r+0x8d4>)
 8005da0:	f7fa f9fc 	bl	800019c <__adddf3>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4630      	mov	r0, r6
 8005daa:	4639      	mov	r1, r7
 8005dac:	f7fa fe3c 	bl	8000a28 <__aeabi_dcmpgt>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	d162      	bne.n	8005e7a <_dtoa_r+0x6e2>
 8005db4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005db8:	2000      	movs	r0, #0
 8005dba:	49ac      	ldr	r1, [pc, #688]	; (800606c <_dtoa_r+0x8d4>)
 8005dbc:	f7fa f9ec 	bl	8000198 <__aeabi_dsub>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	4639      	mov	r1, r7
 8005dc8:	f7fa fe10 	bl	80009ec <__aeabi_dcmplt>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	f43f af1d 	beq.w	8005c0c <_dtoa_r+0x474>
 8005dd2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005dd4:	1e7b      	subs	r3, r7, #1
 8005dd6:	9314      	str	r3, [sp, #80]	; 0x50
 8005dd8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005ddc:	2b30      	cmp	r3, #48	; 0x30
 8005dde:	d0f8      	beq.n	8005dd2 <_dtoa_r+0x63a>
 8005de0:	46c1      	mov	r9, r8
 8005de2:	e03a      	b.n	8005e5a <_dtoa_r+0x6c2>
 8005de4:	4ba2      	ldr	r3, [pc, #648]	; (8006070 <_dtoa_r+0x8d8>)
 8005de6:	f7fa fb8f 	bl	8000508 <__aeabi_dmul>
 8005dea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005dee:	e7bc      	b.n	8005d6a <_dtoa_r+0x5d2>
 8005df0:	9f08      	ldr	r7, [sp, #32]
 8005df2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005df6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dfa:	f7fa fcaf 	bl	800075c <__aeabi_ddiv>
 8005dfe:	f7fa fe33 	bl	8000a68 <__aeabi_d2iz>
 8005e02:	4604      	mov	r4, r0
 8005e04:	f7fa fb16 	bl	8000434 <__aeabi_i2d>
 8005e08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e0c:	f7fa fb7c 	bl	8000508 <__aeabi_dmul>
 8005e10:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005e14:	460b      	mov	r3, r1
 8005e16:	4602      	mov	r2, r0
 8005e18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e1c:	f7fa f9bc 	bl	8000198 <__aeabi_dsub>
 8005e20:	f807 6b01 	strb.w	r6, [r7], #1
 8005e24:	9e08      	ldr	r6, [sp, #32]
 8005e26:	9b02      	ldr	r3, [sp, #8]
 8005e28:	1bbe      	subs	r6, r7, r6
 8005e2a:	42b3      	cmp	r3, r6
 8005e2c:	d13a      	bne.n	8005ea4 <_dtoa_r+0x70c>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	f7fa f9b3 	bl	800019c <__adddf3>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e42:	f7fa fdf1 	bl	8000a28 <__aeabi_dcmpgt>
 8005e46:	bb58      	cbnz	r0, 8005ea0 <_dtoa_r+0x708>
 8005e48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e50:	f7fa fdc2 	bl	80009d8 <__aeabi_dcmpeq>
 8005e54:	b108      	cbz	r0, 8005e5a <_dtoa_r+0x6c2>
 8005e56:	07e1      	lsls	r1, r4, #31
 8005e58:	d422      	bmi.n	8005ea0 <_dtoa_r+0x708>
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	4651      	mov	r1, sl
 8005e5e:	f000 fd11 	bl	8006884 <_Bfree>
 8005e62:	2300      	movs	r3, #0
 8005e64:	703b      	strb	r3, [r7, #0]
 8005e66:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005e68:	f109 0001 	add.w	r0, r9, #1
 8005e6c:	6018      	str	r0, [r3, #0]
 8005e6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f43f acdf 	beq.w	8005834 <_dtoa_r+0x9c>
 8005e76:	601f      	str	r7, [r3, #0]
 8005e78:	e4dc      	b.n	8005834 <_dtoa_r+0x9c>
 8005e7a:	4627      	mov	r7, r4
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	461f      	mov	r7, r3
 8005e80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e84:	2a39      	cmp	r2, #57	; 0x39
 8005e86:	d107      	bne.n	8005e98 <_dtoa_r+0x700>
 8005e88:	9a08      	ldr	r2, [sp, #32]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d1f7      	bne.n	8005e7e <_dtoa_r+0x6e6>
 8005e8e:	2230      	movs	r2, #48	; 0x30
 8005e90:	9908      	ldr	r1, [sp, #32]
 8005e92:	f108 0801 	add.w	r8, r8, #1
 8005e96:	700a      	strb	r2, [r1, #0]
 8005e98:	781a      	ldrb	r2, [r3, #0]
 8005e9a:	3201      	adds	r2, #1
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	e79f      	b.n	8005de0 <_dtoa_r+0x648>
 8005ea0:	46c8      	mov	r8, r9
 8005ea2:	e7eb      	b.n	8005e7c <_dtoa_r+0x6e4>
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4b72      	ldr	r3, [pc, #456]	; (8006070 <_dtoa_r+0x8d8>)
 8005ea8:	f7fa fb2e 	bl	8000508 <__aeabi_dmul>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f7fa fd8e 	bl	80009d8 <__aeabi_dcmpeq>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d098      	beq.n	8005df2 <_dtoa_r+0x65a>
 8005ec0:	e7cb      	b.n	8005e5a <_dtoa_r+0x6c2>
 8005ec2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ec4:	2a00      	cmp	r2, #0
 8005ec6:	f000 80cd 	beq.w	8006064 <_dtoa_r+0x8cc>
 8005eca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ecc:	2a01      	cmp	r2, #1
 8005ece:	f300 80af 	bgt.w	8006030 <_dtoa_r+0x898>
 8005ed2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ed4:	2a00      	cmp	r2, #0
 8005ed6:	f000 80a7 	beq.w	8006028 <_dtoa_r+0x890>
 8005eda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ede:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ee0:	9f06      	ldr	r7, [sp, #24]
 8005ee2:	9a06      	ldr	r2, [sp, #24]
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	441a      	add	r2, r3
 8005ee8:	9206      	str	r2, [sp, #24]
 8005eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eec:	4628      	mov	r0, r5
 8005eee:	441a      	add	r2, r3
 8005ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8005ef2:	f000 fd81 	bl	80069f8 <__i2b>
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	2f00      	cmp	r7, #0
 8005efa:	dd0c      	ble.n	8005f16 <_dtoa_r+0x77e>
 8005efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	dd09      	ble.n	8005f16 <_dtoa_r+0x77e>
 8005f02:	42bb      	cmp	r3, r7
 8005f04:	bfa8      	it	ge
 8005f06:	463b      	movge	r3, r7
 8005f08:	9a06      	ldr	r2, [sp, #24]
 8005f0a:	1aff      	subs	r7, r7, r3
 8005f0c:	1ad2      	subs	r2, r2, r3
 8005f0e:	9206      	str	r2, [sp, #24]
 8005f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	9309      	str	r3, [sp, #36]	; 0x24
 8005f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f18:	b1f3      	cbz	r3, 8005f58 <_dtoa_r+0x7c0>
 8005f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 80a9 	beq.w	8006074 <_dtoa_r+0x8dc>
 8005f22:	2c00      	cmp	r4, #0
 8005f24:	dd10      	ble.n	8005f48 <_dtoa_r+0x7b0>
 8005f26:	4631      	mov	r1, r6
 8005f28:	4622      	mov	r2, r4
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f000 fe1e 	bl	8006b6c <__pow5mult>
 8005f30:	4652      	mov	r2, sl
 8005f32:	4601      	mov	r1, r0
 8005f34:	4606      	mov	r6, r0
 8005f36:	4628      	mov	r0, r5
 8005f38:	f000 fd74 	bl	8006a24 <__multiply>
 8005f3c:	4680      	mov	r8, r0
 8005f3e:	4651      	mov	r1, sl
 8005f40:	4628      	mov	r0, r5
 8005f42:	f000 fc9f 	bl	8006884 <_Bfree>
 8005f46:	46c2      	mov	sl, r8
 8005f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f4a:	1b1a      	subs	r2, r3, r4
 8005f4c:	d004      	beq.n	8005f58 <_dtoa_r+0x7c0>
 8005f4e:	4651      	mov	r1, sl
 8005f50:	4628      	mov	r0, r5
 8005f52:	f000 fe0b 	bl	8006b6c <__pow5mult>
 8005f56:	4682      	mov	sl, r0
 8005f58:	2101      	movs	r1, #1
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	f000 fd4c 	bl	80069f8 <__i2b>
 8005f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f62:	4604      	mov	r4, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f340 8087 	ble.w	8006078 <_dtoa_r+0x8e0>
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	4601      	mov	r1, r0
 8005f6e:	4628      	mov	r0, r5
 8005f70:	f000 fdfc 	bl	8006b6c <__pow5mult>
 8005f74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f76:	4604      	mov	r4, r0
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	f340 8080 	ble.w	800607e <_dtoa_r+0x8e6>
 8005f7e:	f04f 0800 	mov.w	r8, #0
 8005f82:	6923      	ldr	r3, [r4, #16]
 8005f84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f88:	6918      	ldr	r0, [r3, #16]
 8005f8a:	f000 fce7 	bl	800695c <__hi0bits>
 8005f8e:	f1c0 0020 	rsb	r0, r0, #32
 8005f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f94:	4418      	add	r0, r3
 8005f96:	f010 001f 	ands.w	r0, r0, #31
 8005f9a:	f000 8092 	beq.w	80060c2 <_dtoa_r+0x92a>
 8005f9e:	f1c0 0320 	rsb	r3, r0, #32
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	f340 808a 	ble.w	80060bc <_dtoa_r+0x924>
 8005fa8:	f1c0 001c 	rsb	r0, r0, #28
 8005fac:	9b06      	ldr	r3, [sp, #24]
 8005fae:	4407      	add	r7, r0
 8005fb0:	4403      	add	r3, r0
 8005fb2:	9306      	str	r3, [sp, #24]
 8005fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb6:	4403      	add	r3, r0
 8005fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fba:	9b06      	ldr	r3, [sp, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	dd05      	ble.n	8005fcc <_dtoa_r+0x834>
 8005fc0:	4651      	mov	r1, sl
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 fe2b 	bl	8006c20 <__lshift>
 8005fca:	4682      	mov	sl, r0
 8005fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	dd05      	ble.n	8005fde <_dtoa_r+0x846>
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f000 fe22 	bl	8006c20 <__lshift>
 8005fdc:	4604      	mov	r4, r0
 8005fde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d070      	beq.n	80060c6 <_dtoa_r+0x92e>
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	4650      	mov	r0, sl
 8005fe8:	f000 fe86 	bl	8006cf8 <__mcmp>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	da6a      	bge.n	80060c6 <_dtoa_r+0x92e>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	4651      	mov	r1, sl
 8005ff4:	220a      	movs	r2, #10
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f000 fc66 	bl	80068c8 <__multadd>
 8005ffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ffe:	4682      	mov	sl, r0
 8006000:	f109 39ff 	add.w	r9, r9, #4294967295
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 8193 	beq.w	8006330 <_dtoa_r+0xb98>
 800600a:	4631      	mov	r1, r6
 800600c:	2300      	movs	r3, #0
 800600e:	220a      	movs	r2, #10
 8006010:	4628      	mov	r0, r5
 8006012:	f000 fc59 	bl	80068c8 <__multadd>
 8006016:	f1bb 0f00 	cmp.w	fp, #0
 800601a:	4606      	mov	r6, r0
 800601c:	f300 8093 	bgt.w	8006146 <_dtoa_r+0x9ae>
 8006020:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006022:	2b02      	cmp	r3, #2
 8006024:	dc57      	bgt.n	80060d6 <_dtoa_r+0x93e>
 8006026:	e08e      	b.n	8006146 <_dtoa_r+0x9ae>
 8006028:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800602a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800602e:	e756      	b.n	8005ede <_dtoa_r+0x746>
 8006030:	9b02      	ldr	r3, [sp, #8]
 8006032:	1e5c      	subs	r4, r3, #1
 8006034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006036:	42a3      	cmp	r3, r4
 8006038:	bfb7      	itett	lt
 800603a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800603c:	1b1c      	subge	r4, r3, r4
 800603e:	1ae2      	sublt	r2, r4, r3
 8006040:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006042:	bfbe      	ittt	lt
 8006044:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006046:	189b      	addlt	r3, r3, r2
 8006048:	930e      	strlt	r3, [sp, #56]	; 0x38
 800604a:	9b02      	ldr	r3, [sp, #8]
 800604c:	bfb8      	it	lt
 800604e:	2400      	movlt	r4, #0
 8006050:	2b00      	cmp	r3, #0
 8006052:	bfbb      	ittet	lt
 8006054:	9b06      	ldrlt	r3, [sp, #24]
 8006056:	9a02      	ldrlt	r2, [sp, #8]
 8006058:	9f06      	ldrge	r7, [sp, #24]
 800605a:	1a9f      	sublt	r7, r3, r2
 800605c:	bfac      	ite	ge
 800605e:	9b02      	ldrge	r3, [sp, #8]
 8006060:	2300      	movlt	r3, #0
 8006062:	e73e      	b.n	8005ee2 <_dtoa_r+0x74a>
 8006064:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006066:	9f06      	ldr	r7, [sp, #24]
 8006068:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800606a:	e745      	b.n	8005ef8 <_dtoa_r+0x760>
 800606c:	3fe00000 	.word	0x3fe00000
 8006070:	40240000 	.word	0x40240000
 8006074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006076:	e76a      	b.n	8005f4e <_dtoa_r+0x7b6>
 8006078:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800607a:	2b01      	cmp	r3, #1
 800607c:	dc19      	bgt.n	80060b2 <_dtoa_r+0x91a>
 800607e:	9b04      	ldr	r3, [sp, #16]
 8006080:	b9bb      	cbnz	r3, 80060b2 <_dtoa_r+0x91a>
 8006082:	9b05      	ldr	r3, [sp, #20]
 8006084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006088:	b99b      	cbnz	r3, 80060b2 <_dtoa_r+0x91a>
 800608a:	9b05      	ldr	r3, [sp, #20]
 800608c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006090:	0d1b      	lsrs	r3, r3, #20
 8006092:	051b      	lsls	r3, r3, #20
 8006094:	b183      	cbz	r3, 80060b8 <_dtoa_r+0x920>
 8006096:	f04f 0801 	mov.w	r8, #1
 800609a:	9b06      	ldr	r3, [sp, #24]
 800609c:	3301      	adds	r3, #1
 800609e:	9306      	str	r3, [sp, #24]
 80060a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a2:	3301      	adds	r3, #1
 80060a4:	9309      	str	r3, [sp, #36]	; 0x24
 80060a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f47f af6a 	bne.w	8005f82 <_dtoa_r+0x7ea>
 80060ae:	2001      	movs	r0, #1
 80060b0:	e76f      	b.n	8005f92 <_dtoa_r+0x7fa>
 80060b2:	f04f 0800 	mov.w	r8, #0
 80060b6:	e7f6      	b.n	80060a6 <_dtoa_r+0x90e>
 80060b8:	4698      	mov	r8, r3
 80060ba:	e7f4      	b.n	80060a6 <_dtoa_r+0x90e>
 80060bc:	f43f af7d 	beq.w	8005fba <_dtoa_r+0x822>
 80060c0:	4618      	mov	r0, r3
 80060c2:	301c      	adds	r0, #28
 80060c4:	e772      	b.n	8005fac <_dtoa_r+0x814>
 80060c6:	9b02      	ldr	r3, [sp, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	dc36      	bgt.n	800613a <_dtoa_r+0x9a2>
 80060cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	dd33      	ble.n	800613a <_dtoa_r+0x9a2>
 80060d2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80060d6:	f1bb 0f00 	cmp.w	fp, #0
 80060da:	d10d      	bne.n	80060f8 <_dtoa_r+0x960>
 80060dc:	4621      	mov	r1, r4
 80060de:	465b      	mov	r3, fp
 80060e0:	2205      	movs	r2, #5
 80060e2:	4628      	mov	r0, r5
 80060e4:	f000 fbf0 	bl	80068c8 <__multadd>
 80060e8:	4601      	mov	r1, r0
 80060ea:	4604      	mov	r4, r0
 80060ec:	4650      	mov	r0, sl
 80060ee:	f000 fe03 	bl	8006cf8 <__mcmp>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	f73f adb6 	bgt.w	8005c64 <_dtoa_r+0x4cc>
 80060f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060fa:	9f08      	ldr	r7, [sp, #32]
 80060fc:	ea6f 0903 	mvn.w	r9, r3
 8006100:	f04f 0800 	mov.w	r8, #0
 8006104:	4621      	mov	r1, r4
 8006106:	4628      	mov	r0, r5
 8006108:	f000 fbbc 	bl	8006884 <_Bfree>
 800610c:	2e00      	cmp	r6, #0
 800610e:	f43f aea4 	beq.w	8005e5a <_dtoa_r+0x6c2>
 8006112:	f1b8 0f00 	cmp.w	r8, #0
 8006116:	d005      	beq.n	8006124 <_dtoa_r+0x98c>
 8006118:	45b0      	cmp	r8, r6
 800611a:	d003      	beq.n	8006124 <_dtoa_r+0x98c>
 800611c:	4641      	mov	r1, r8
 800611e:	4628      	mov	r0, r5
 8006120:	f000 fbb0 	bl	8006884 <_Bfree>
 8006124:	4631      	mov	r1, r6
 8006126:	4628      	mov	r0, r5
 8006128:	f000 fbac 	bl	8006884 <_Bfree>
 800612c:	e695      	b.n	8005e5a <_dtoa_r+0x6c2>
 800612e:	2400      	movs	r4, #0
 8006130:	4626      	mov	r6, r4
 8006132:	e7e1      	b.n	80060f8 <_dtoa_r+0x960>
 8006134:	46c1      	mov	r9, r8
 8006136:	4626      	mov	r6, r4
 8006138:	e594      	b.n	8005c64 <_dtoa_r+0x4cc>
 800613a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800613c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 80fc 	beq.w	800633e <_dtoa_r+0xba6>
 8006146:	2f00      	cmp	r7, #0
 8006148:	dd05      	ble.n	8006156 <_dtoa_r+0x9be>
 800614a:	4631      	mov	r1, r6
 800614c:	463a      	mov	r2, r7
 800614e:	4628      	mov	r0, r5
 8006150:	f000 fd66 	bl	8006c20 <__lshift>
 8006154:	4606      	mov	r6, r0
 8006156:	f1b8 0f00 	cmp.w	r8, #0
 800615a:	d05c      	beq.n	8006216 <_dtoa_r+0xa7e>
 800615c:	4628      	mov	r0, r5
 800615e:	6871      	ldr	r1, [r6, #4]
 8006160:	f000 fb50 	bl	8006804 <_Balloc>
 8006164:	4607      	mov	r7, r0
 8006166:	b928      	cbnz	r0, 8006174 <_dtoa_r+0x9dc>
 8006168:	4602      	mov	r2, r0
 800616a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800616e:	4b7e      	ldr	r3, [pc, #504]	; (8006368 <_dtoa_r+0xbd0>)
 8006170:	f7ff bb26 	b.w	80057c0 <_dtoa_r+0x28>
 8006174:	6932      	ldr	r2, [r6, #16]
 8006176:	f106 010c 	add.w	r1, r6, #12
 800617a:	3202      	adds	r2, #2
 800617c:	0092      	lsls	r2, r2, #2
 800617e:	300c      	adds	r0, #12
 8006180:	f000 fb32 	bl	80067e8 <memcpy>
 8006184:	2201      	movs	r2, #1
 8006186:	4639      	mov	r1, r7
 8006188:	4628      	mov	r0, r5
 800618a:	f000 fd49 	bl	8006c20 <__lshift>
 800618e:	46b0      	mov	r8, r6
 8006190:	4606      	mov	r6, r0
 8006192:	9b08      	ldr	r3, [sp, #32]
 8006194:	3301      	adds	r3, #1
 8006196:	9302      	str	r3, [sp, #8]
 8006198:	9b08      	ldr	r3, [sp, #32]
 800619a:	445b      	add	r3, fp
 800619c:	930a      	str	r3, [sp, #40]	; 0x28
 800619e:	9b04      	ldr	r3, [sp, #16]
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	9309      	str	r3, [sp, #36]	; 0x24
 80061a6:	9b02      	ldr	r3, [sp, #8]
 80061a8:	4621      	mov	r1, r4
 80061aa:	4650      	mov	r0, sl
 80061ac:	f103 3bff 	add.w	fp, r3, #4294967295
 80061b0:	f7ff fa62 	bl	8005678 <quorem>
 80061b4:	4603      	mov	r3, r0
 80061b6:	4641      	mov	r1, r8
 80061b8:	3330      	adds	r3, #48	; 0x30
 80061ba:	9004      	str	r0, [sp, #16]
 80061bc:	4650      	mov	r0, sl
 80061be:	930b      	str	r3, [sp, #44]	; 0x2c
 80061c0:	f000 fd9a 	bl	8006cf8 <__mcmp>
 80061c4:	4632      	mov	r2, r6
 80061c6:	9006      	str	r0, [sp, #24]
 80061c8:	4621      	mov	r1, r4
 80061ca:	4628      	mov	r0, r5
 80061cc:	f000 fdb0 	bl	8006d30 <__mdiff>
 80061d0:	68c2      	ldr	r2, [r0, #12]
 80061d2:	4607      	mov	r7, r0
 80061d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061d6:	bb02      	cbnz	r2, 800621a <_dtoa_r+0xa82>
 80061d8:	4601      	mov	r1, r0
 80061da:	4650      	mov	r0, sl
 80061dc:	f000 fd8c 	bl	8006cf8 <__mcmp>
 80061e0:	4602      	mov	r2, r0
 80061e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061e4:	4639      	mov	r1, r7
 80061e6:	4628      	mov	r0, r5
 80061e8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80061ec:	f000 fb4a 	bl	8006884 <_Bfree>
 80061f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061f4:	9f02      	ldr	r7, [sp, #8]
 80061f6:	ea43 0102 	orr.w	r1, r3, r2
 80061fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fc:	430b      	orrs	r3, r1
 80061fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006200:	d10d      	bne.n	800621e <_dtoa_r+0xa86>
 8006202:	2b39      	cmp	r3, #57	; 0x39
 8006204:	d027      	beq.n	8006256 <_dtoa_r+0xabe>
 8006206:	9a06      	ldr	r2, [sp, #24]
 8006208:	2a00      	cmp	r2, #0
 800620a:	dd01      	ble.n	8006210 <_dtoa_r+0xa78>
 800620c:	9b04      	ldr	r3, [sp, #16]
 800620e:	3331      	adds	r3, #49	; 0x31
 8006210:	f88b 3000 	strb.w	r3, [fp]
 8006214:	e776      	b.n	8006104 <_dtoa_r+0x96c>
 8006216:	4630      	mov	r0, r6
 8006218:	e7b9      	b.n	800618e <_dtoa_r+0x9f6>
 800621a:	2201      	movs	r2, #1
 800621c:	e7e2      	b.n	80061e4 <_dtoa_r+0xa4c>
 800621e:	9906      	ldr	r1, [sp, #24]
 8006220:	2900      	cmp	r1, #0
 8006222:	db04      	blt.n	800622e <_dtoa_r+0xa96>
 8006224:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006226:	4301      	orrs	r1, r0
 8006228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800622a:	4301      	orrs	r1, r0
 800622c:	d120      	bne.n	8006270 <_dtoa_r+0xad8>
 800622e:	2a00      	cmp	r2, #0
 8006230:	ddee      	ble.n	8006210 <_dtoa_r+0xa78>
 8006232:	4651      	mov	r1, sl
 8006234:	2201      	movs	r2, #1
 8006236:	4628      	mov	r0, r5
 8006238:	9302      	str	r3, [sp, #8]
 800623a:	f000 fcf1 	bl	8006c20 <__lshift>
 800623e:	4621      	mov	r1, r4
 8006240:	4682      	mov	sl, r0
 8006242:	f000 fd59 	bl	8006cf8 <__mcmp>
 8006246:	2800      	cmp	r0, #0
 8006248:	9b02      	ldr	r3, [sp, #8]
 800624a:	dc02      	bgt.n	8006252 <_dtoa_r+0xaba>
 800624c:	d1e0      	bne.n	8006210 <_dtoa_r+0xa78>
 800624e:	07da      	lsls	r2, r3, #31
 8006250:	d5de      	bpl.n	8006210 <_dtoa_r+0xa78>
 8006252:	2b39      	cmp	r3, #57	; 0x39
 8006254:	d1da      	bne.n	800620c <_dtoa_r+0xa74>
 8006256:	2339      	movs	r3, #57	; 0x39
 8006258:	f88b 3000 	strb.w	r3, [fp]
 800625c:	463b      	mov	r3, r7
 800625e:	461f      	mov	r7, r3
 8006260:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006264:	3b01      	subs	r3, #1
 8006266:	2a39      	cmp	r2, #57	; 0x39
 8006268:	d050      	beq.n	800630c <_dtoa_r+0xb74>
 800626a:	3201      	adds	r2, #1
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	e749      	b.n	8006104 <_dtoa_r+0x96c>
 8006270:	2a00      	cmp	r2, #0
 8006272:	dd03      	ble.n	800627c <_dtoa_r+0xae4>
 8006274:	2b39      	cmp	r3, #57	; 0x39
 8006276:	d0ee      	beq.n	8006256 <_dtoa_r+0xabe>
 8006278:	3301      	adds	r3, #1
 800627a:	e7c9      	b.n	8006210 <_dtoa_r+0xa78>
 800627c:	9a02      	ldr	r2, [sp, #8]
 800627e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006280:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006284:	428a      	cmp	r2, r1
 8006286:	d02a      	beq.n	80062de <_dtoa_r+0xb46>
 8006288:	4651      	mov	r1, sl
 800628a:	2300      	movs	r3, #0
 800628c:	220a      	movs	r2, #10
 800628e:	4628      	mov	r0, r5
 8006290:	f000 fb1a 	bl	80068c8 <__multadd>
 8006294:	45b0      	cmp	r8, r6
 8006296:	4682      	mov	sl, r0
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	f04f 020a 	mov.w	r2, #10
 80062a0:	4641      	mov	r1, r8
 80062a2:	4628      	mov	r0, r5
 80062a4:	d107      	bne.n	80062b6 <_dtoa_r+0xb1e>
 80062a6:	f000 fb0f 	bl	80068c8 <__multadd>
 80062aa:	4680      	mov	r8, r0
 80062ac:	4606      	mov	r6, r0
 80062ae:	9b02      	ldr	r3, [sp, #8]
 80062b0:	3301      	adds	r3, #1
 80062b2:	9302      	str	r3, [sp, #8]
 80062b4:	e777      	b.n	80061a6 <_dtoa_r+0xa0e>
 80062b6:	f000 fb07 	bl	80068c8 <__multadd>
 80062ba:	4631      	mov	r1, r6
 80062bc:	4680      	mov	r8, r0
 80062be:	2300      	movs	r3, #0
 80062c0:	220a      	movs	r2, #10
 80062c2:	4628      	mov	r0, r5
 80062c4:	f000 fb00 	bl	80068c8 <__multadd>
 80062c8:	4606      	mov	r6, r0
 80062ca:	e7f0      	b.n	80062ae <_dtoa_r+0xb16>
 80062cc:	f1bb 0f00 	cmp.w	fp, #0
 80062d0:	bfcc      	ite	gt
 80062d2:	465f      	movgt	r7, fp
 80062d4:	2701      	movle	r7, #1
 80062d6:	f04f 0800 	mov.w	r8, #0
 80062da:	9a08      	ldr	r2, [sp, #32]
 80062dc:	4417      	add	r7, r2
 80062de:	4651      	mov	r1, sl
 80062e0:	2201      	movs	r2, #1
 80062e2:	4628      	mov	r0, r5
 80062e4:	9302      	str	r3, [sp, #8]
 80062e6:	f000 fc9b 	bl	8006c20 <__lshift>
 80062ea:	4621      	mov	r1, r4
 80062ec:	4682      	mov	sl, r0
 80062ee:	f000 fd03 	bl	8006cf8 <__mcmp>
 80062f2:	2800      	cmp	r0, #0
 80062f4:	dcb2      	bgt.n	800625c <_dtoa_r+0xac4>
 80062f6:	d102      	bne.n	80062fe <_dtoa_r+0xb66>
 80062f8:	9b02      	ldr	r3, [sp, #8]
 80062fa:	07db      	lsls	r3, r3, #31
 80062fc:	d4ae      	bmi.n	800625c <_dtoa_r+0xac4>
 80062fe:	463b      	mov	r3, r7
 8006300:	461f      	mov	r7, r3
 8006302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006306:	2a30      	cmp	r2, #48	; 0x30
 8006308:	d0fa      	beq.n	8006300 <_dtoa_r+0xb68>
 800630a:	e6fb      	b.n	8006104 <_dtoa_r+0x96c>
 800630c:	9a08      	ldr	r2, [sp, #32]
 800630e:	429a      	cmp	r2, r3
 8006310:	d1a5      	bne.n	800625e <_dtoa_r+0xac6>
 8006312:	2331      	movs	r3, #49	; 0x31
 8006314:	f109 0901 	add.w	r9, r9, #1
 8006318:	7013      	strb	r3, [r2, #0]
 800631a:	e6f3      	b.n	8006104 <_dtoa_r+0x96c>
 800631c:	4b13      	ldr	r3, [pc, #76]	; (800636c <_dtoa_r+0xbd4>)
 800631e:	f7ff baa7 	b.w	8005870 <_dtoa_r+0xd8>
 8006322:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006324:	2b00      	cmp	r3, #0
 8006326:	f47f aa80 	bne.w	800582a <_dtoa_r+0x92>
 800632a:	4b11      	ldr	r3, [pc, #68]	; (8006370 <_dtoa_r+0xbd8>)
 800632c:	f7ff baa0 	b.w	8005870 <_dtoa_r+0xd8>
 8006330:	f1bb 0f00 	cmp.w	fp, #0
 8006334:	dc03      	bgt.n	800633e <_dtoa_r+0xba6>
 8006336:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006338:	2b02      	cmp	r3, #2
 800633a:	f73f aecc 	bgt.w	80060d6 <_dtoa_r+0x93e>
 800633e:	9f08      	ldr	r7, [sp, #32]
 8006340:	4621      	mov	r1, r4
 8006342:	4650      	mov	r0, sl
 8006344:	f7ff f998 	bl	8005678 <quorem>
 8006348:	9a08      	ldr	r2, [sp, #32]
 800634a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800634e:	f807 3b01 	strb.w	r3, [r7], #1
 8006352:	1aba      	subs	r2, r7, r2
 8006354:	4593      	cmp	fp, r2
 8006356:	ddb9      	ble.n	80062cc <_dtoa_r+0xb34>
 8006358:	4651      	mov	r1, sl
 800635a:	2300      	movs	r3, #0
 800635c:	220a      	movs	r2, #10
 800635e:	4628      	mov	r0, r5
 8006360:	f000 fab2 	bl	80068c8 <__multadd>
 8006364:	4682      	mov	sl, r0
 8006366:	e7eb      	b.n	8006340 <_dtoa_r+0xba8>
 8006368:	0800783c 	.word	0x0800783c
 800636c:	08007694 	.word	0x08007694
 8006370:	080077b9 	.word	0x080077b9

08006374 <__sflush_r>:
 8006374:	898a      	ldrh	r2, [r1, #12]
 8006376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800637a:	4605      	mov	r5, r0
 800637c:	0710      	lsls	r0, r2, #28
 800637e:	460c      	mov	r4, r1
 8006380:	d458      	bmi.n	8006434 <__sflush_r+0xc0>
 8006382:	684b      	ldr	r3, [r1, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	dc05      	bgt.n	8006394 <__sflush_r+0x20>
 8006388:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800638a:	2b00      	cmp	r3, #0
 800638c:	dc02      	bgt.n	8006394 <__sflush_r+0x20>
 800638e:	2000      	movs	r0, #0
 8006390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006396:	2e00      	cmp	r6, #0
 8006398:	d0f9      	beq.n	800638e <__sflush_r+0x1a>
 800639a:	2300      	movs	r3, #0
 800639c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063a0:	682f      	ldr	r7, [r5, #0]
 80063a2:	602b      	str	r3, [r5, #0]
 80063a4:	d032      	beq.n	800640c <__sflush_r+0x98>
 80063a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	075a      	lsls	r2, r3, #29
 80063ac:	d505      	bpl.n	80063ba <__sflush_r+0x46>
 80063ae:	6863      	ldr	r3, [r4, #4]
 80063b0:	1ac0      	subs	r0, r0, r3
 80063b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063b4:	b10b      	cbz	r3, 80063ba <__sflush_r+0x46>
 80063b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063b8:	1ac0      	subs	r0, r0, r3
 80063ba:	2300      	movs	r3, #0
 80063bc:	4602      	mov	r2, r0
 80063be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063c0:	4628      	mov	r0, r5
 80063c2:	6a21      	ldr	r1, [r4, #32]
 80063c4:	47b0      	blx	r6
 80063c6:	1c43      	adds	r3, r0, #1
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	d106      	bne.n	80063da <__sflush_r+0x66>
 80063cc:	6829      	ldr	r1, [r5, #0]
 80063ce:	291d      	cmp	r1, #29
 80063d0:	d82c      	bhi.n	800642c <__sflush_r+0xb8>
 80063d2:	4a2a      	ldr	r2, [pc, #168]	; (800647c <__sflush_r+0x108>)
 80063d4:	40ca      	lsrs	r2, r1
 80063d6:	07d6      	lsls	r6, r2, #31
 80063d8:	d528      	bpl.n	800642c <__sflush_r+0xb8>
 80063da:	2200      	movs	r2, #0
 80063dc:	6062      	str	r2, [r4, #4]
 80063de:	6922      	ldr	r2, [r4, #16]
 80063e0:	04d9      	lsls	r1, r3, #19
 80063e2:	6022      	str	r2, [r4, #0]
 80063e4:	d504      	bpl.n	80063f0 <__sflush_r+0x7c>
 80063e6:	1c42      	adds	r2, r0, #1
 80063e8:	d101      	bne.n	80063ee <__sflush_r+0x7a>
 80063ea:	682b      	ldr	r3, [r5, #0]
 80063ec:	b903      	cbnz	r3, 80063f0 <__sflush_r+0x7c>
 80063ee:	6560      	str	r0, [r4, #84]	; 0x54
 80063f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063f2:	602f      	str	r7, [r5, #0]
 80063f4:	2900      	cmp	r1, #0
 80063f6:	d0ca      	beq.n	800638e <__sflush_r+0x1a>
 80063f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063fc:	4299      	cmp	r1, r3
 80063fe:	d002      	beq.n	8006406 <__sflush_r+0x92>
 8006400:	4628      	mov	r0, r5
 8006402:	f000 fd8f 	bl	8006f24 <_free_r>
 8006406:	2000      	movs	r0, #0
 8006408:	6360      	str	r0, [r4, #52]	; 0x34
 800640a:	e7c1      	b.n	8006390 <__sflush_r+0x1c>
 800640c:	6a21      	ldr	r1, [r4, #32]
 800640e:	2301      	movs	r3, #1
 8006410:	4628      	mov	r0, r5
 8006412:	47b0      	blx	r6
 8006414:	1c41      	adds	r1, r0, #1
 8006416:	d1c7      	bne.n	80063a8 <__sflush_r+0x34>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0c4      	beq.n	80063a8 <__sflush_r+0x34>
 800641e:	2b1d      	cmp	r3, #29
 8006420:	d001      	beq.n	8006426 <__sflush_r+0xb2>
 8006422:	2b16      	cmp	r3, #22
 8006424:	d101      	bne.n	800642a <__sflush_r+0xb6>
 8006426:	602f      	str	r7, [r5, #0]
 8006428:	e7b1      	b.n	800638e <__sflush_r+0x1a>
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006430:	81a3      	strh	r3, [r4, #12]
 8006432:	e7ad      	b.n	8006390 <__sflush_r+0x1c>
 8006434:	690f      	ldr	r7, [r1, #16]
 8006436:	2f00      	cmp	r7, #0
 8006438:	d0a9      	beq.n	800638e <__sflush_r+0x1a>
 800643a:	0793      	lsls	r3, r2, #30
 800643c:	bf18      	it	ne
 800643e:	2300      	movne	r3, #0
 8006440:	680e      	ldr	r6, [r1, #0]
 8006442:	bf08      	it	eq
 8006444:	694b      	ldreq	r3, [r1, #20]
 8006446:	eba6 0807 	sub.w	r8, r6, r7
 800644a:	600f      	str	r7, [r1, #0]
 800644c:	608b      	str	r3, [r1, #8]
 800644e:	f1b8 0f00 	cmp.w	r8, #0
 8006452:	dd9c      	ble.n	800638e <__sflush_r+0x1a>
 8006454:	4643      	mov	r3, r8
 8006456:	463a      	mov	r2, r7
 8006458:	4628      	mov	r0, r5
 800645a:	6a21      	ldr	r1, [r4, #32]
 800645c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800645e:	47b0      	blx	r6
 8006460:	2800      	cmp	r0, #0
 8006462:	dc06      	bgt.n	8006472 <__sflush_r+0xfe>
 8006464:	89a3      	ldrh	r3, [r4, #12]
 8006466:	f04f 30ff 	mov.w	r0, #4294967295
 800646a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800646e:	81a3      	strh	r3, [r4, #12]
 8006470:	e78e      	b.n	8006390 <__sflush_r+0x1c>
 8006472:	4407      	add	r7, r0
 8006474:	eba8 0800 	sub.w	r8, r8, r0
 8006478:	e7e9      	b.n	800644e <__sflush_r+0xda>
 800647a:	bf00      	nop
 800647c:	20400001 	.word	0x20400001

08006480 <_fflush_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	690b      	ldr	r3, [r1, #16]
 8006484:	4605      	mov	r5, r0
 8006486:	460c      	mov	r4, r1
 8006488:	b913      	cbnz	r3, 8006490 <_fflush_r+0x10>
 800648a:	2500      	movs	r5, #0
 800648c:	4628      	mov	r0, r5
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	b118      	cbz	r0, 800649a <_fflush_r+0x1a>
 8006492:	6983      	ldr	r3, [r0, #24]
 8006494:	b90b      	cbnz	r3, 800649a <_fflush_r+0x1a>
 8006496:	f000 f887 	bl	80065a8 <__sinit>
 800649a:	4b14      	ldr	r3, [pc, #80]	; (80064ec <_fflush_r+0x6c>)
 800649c:	429c      	cmp	r4, r3
 800649e:	d11b      	bne.n	80064d8 <_fflush_r+0x58>
 80064a0:	686c      	ldr	r4, [r5, #4]
 80064a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0ef      	beq.n	800648a <_fflush_r+0xa>
 80064aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064ac:	07d0      	lsls	r0, r2, #31
 80064ae:	d404      	bmi.n	80064ba <_fflush_r+0x3a>
 80064b0:	0599      	lsls	r1, r3, #22
 80064b2:	d402      	bmi.n	80064ba <_fflush_r+0x3a>
 80064b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064b6:	f000 f91a 	bl	80066ee <__retarget_lock_acquire_recursive>
 80064ba:	4628      	mov	r0, r5
 80064bc:	4621      	mov	r1, r4
 80064be:	f7ff ff59 	bl	8006374 <__sflush_r>
 80064c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064c4:	4605      	mov	r5, r0
 80064c6:	07da      	lsls	r2, r3, #31
 80064c8:	d4e0      	bmi.n	800648c <_fflush_r+0xc>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	059b      	lsls	r3, r3, #22
 80064ce:	d4dd      	bmi.n	800648c <_fflush_r+0xc>
 80064d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064d2:	f000 f90d 	bl	80066f0 <__retarget_lock_release_recursive>
 80064d6:	e7d9      	b.n	800648c <_fflush_r+0xc>
 80064d8:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <_fflush_r+0x70>)
 80064da:	429c      	cmp	r4, r3
 80064dc:	d101      	bne.n	80064e2 <_fflush_r+0x62>
 80064de:	68ac      	ldr	r4, [r5, #8]
 80064e0:	e7df      	b.n	80064a2 <_fflush_r+0x22>
 80064e2:	4b04      	ldr	r3, [pc, #16]	; (80064f4 <_fflush_r+0x74>)
 80064e4:	429c      	cmp	r4, r3
 80064e6:	bf08      	it	eq
 80064e8:	68ec      	ldreq	r4, [r5, #12]
 80064ea:	e7da      	b.n	80064a2 <_fflush_r+0x22>
 80064ec:	08007870 	.word	0x08007870
 80064f0:	08007890 	.word	0x08007890
 80064f4:	08007850 	.word	0x08007850

080064f8 <std>:
 80064f8:	2300      	movs	r3, #0
 80064fa:	b510      	push	{r4, lr}
 80064fc:	4604      	mov	r4, r0
 80064fe:	e9c0 3300 	strd	r3, r3, [r0]
 8006502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006506:	6083      	str	r3, [r0, #8]
 8006508:	8181      	strh	r1, [r0, #12]
 800650a:	6643      	str	r3, [r0, #100]	; 0x64
 800650c:	81c2      	strh	r2, [r0, #14]
 800650e:	6183      	str	r3, [r0, #24]
 8006510:	4619      	mov	r1, r3
 8006512:	2208      	movs	r2, #8
 8006514:	305c      	adds	r0, #92	; 0x5c
 8006516:	f7fe fa55 	bl	80049c4 <memset>
 800651a:	4b05      	ldr	r3, [pc, #20]	; (8006530 <std+0x38>)
 800651c:	6224      	str	r4, [r4, #32]
 800651e:	6263      	str	r3, [r4, #36]	; 0x24
 8006520:	4b04      	ldr	r3, [pc, #16]	; (8006534 <std+0x3c>)
 8006522:	62a3      	str	r3, [r4, #40]	; 0x28
 8006524:	4b04      	ldr	r3, [pc, #16]	; (8006538 <std+0x40>)
 8006526:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006528:	4b04      	ldr	r3, [pc, #16]	; (800653c <std+0x44>)
 800652a:	6323      	str	r3, [r4, #48]	; 0x30
 800652c:	bd10      	pop	{r4, pc}
 800652e:	bf00      	nop
 8006530:	08007341 	.word	0x08007341
 8006534:	08007363 	.word	0x08007363
 8006538:	0800739b 	.word	0x0800739b
 800653c:	080073bf 	.word	0x080073bf

08006540 <_cleanup_r>:
 8006540:	4901      	ldr	r1, [pc, #4]	; (8006548 <_cleanup_r+0x8>)
 8006542:	f000 b8af 	b.w	80066a4 <_fwalk_reent>
 8006546:	bf00      	nop
 8006548:	08006481 	.word	0x08006481

0800654c <__sfmoreglue>:
 800654c:	b570      	push	{r4, r5, r6, lr}
 800654e:	2568      	movs	r5, #104	; 0x68
 8006550:	1e4a      	subs	r2, r1, #1
 8006552:	4355      	muls	r5, r2
 8006554:	460e      	mov	r6, r1
 8006556:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800655a:	f000 fd2f 	bl	8006fbc <_malloc_r>
 800655e:	4604      	mov	r4, r0
 8006560:	b140      	cbz	r0, 8006574 <__sfmoreglue+0x28>
 8006562:	2100      	movs	r1, #0
 8006564:	e9c0 1600 	strd	r1, r6, [r0]
 8006568:	300c      	adds	r0, #12
 800656a:	60a0      	str	r0, [r4, #8]
 800656c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006570:	f7fe fa28 	bl	80049c4 <memset>
 8006574:	4620      	mov	r0, r4
 8006576:	bd70      	pop	{r4, r5, r6, pc}

08006578 <__sfp_lock_acquire>:
 8006578:	4801      	ldr	r0, [pc, #4]	; (8006580 <__sfp_lock_acquire+0x8>)
 800657a:	f000 b8b8 	b.w	80066ee <__retarget_lock_acquire_recursive>
 800657e:	bf00      	nop
 8006580:	200003fc 	.word	0x200003fc

08006584 <__sfp_lock_release>:
 8006584:	4801      	ldr	r0, [pc, #4]	; (800658c <__sfp_lock_release+0x8>)
 8006586:	f000 b8b3 	b.w	80066f0 <__retarget_lock_release_recursive>
 800658a:	bf00      	nop
 800658c:	200003fc 	.word	0x200003fc

08006590 <__sinit_lock_acquire>:
 8006590:	4801      	ldr	r0, [pc, #4]	; (8006598 <__sinit_lock_acquire+0x8>)
 8006592:	f000 b8ac 	b.w	80066ee <__retarget_lock_acquire_recursive>
 8006596:	bf00      	nop
 8006598:	200003f7 	.word	0x200003f7

0800659c <__sinit_lock_release>:
 800659c:	4801      	ldr	r0, [pc, #4]	; (80065a4 <__sinit_lock_release+0x8>)
 800659e:	f000 b8a7 	b.w	80066f0 <__retarget_lock_release_recursive>
 80065a2:	bf00      	nop
 80065a4:	200003f7 	.word	0x200003f7

080065a8 <__sinit>:
 80065a8:	b510      	push	{r4, lr}
 80065aa:	4604      	mov	r4, r0
 80065ac:	f7ff fff0 	bl	8006590 <__sinit_lock_acquire>
 80065b0:	69a3      	ldr	r3, [r4, #24]
 80065b2:	b11b      	cbz	r3, 80065bc <__sinit+0x14>
 80065b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065b8:	f7ff bff0 	b.w	800659c <__sinit_lock_release>
 80065bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80065c0:	6523      	str	r3, [r4, #80]	; 0x50
 80065c2:	4b13      	ldr	r3, [pc, #76]	; (8006610 <__sinit+0x68>)
 80065c4:	4a13      	ldr	r2, [pc, #76]	; (8006614 <__sinit+0x6c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80065ca:	42a3      	cmp	r3, r4
 80065cc:	bf08      	it	eq
 80065ce:	2301      	moveq	r3, #1
 80065d0:	4620      	mov	r0, r4
 80065d2:	bf08      	it	eq
 80065d4:	61a3      	streq	r3, [r4, #24]
 80065d6:	f000 f81f 	bl	8006618 <__sfp>
 80065da:	6060      	str	r0, [r4, #4]
 80065dc:	4620      	mov	r0, r4
 80065de:	f000 f81b 	bl	8006618 <__sfp>
 80065e2:	60a0      	str	r0, [r4, #8]
 80065e4:	4620      	mov	r0, r4
 80065e6:	f000 f817 	bl	8006618 <__sfp>
 80065ea:	2200      	movs	r2, #0
 80065ec:	2104      	movs	r1, #4
 80065ee:	60e0      	str	r0, [r4, #12]
 80065f0:	6860      	ldr	r0, [r4, #4]
 80065f2:	f7ff ff81 	bl	80064f8 <std>
 80065f6:	2201      	movs	r2, #1
 80065f8:	2109      	movs	r1, #9
 80065fa:	68a0      	ldr	r0, [r4, #8]
 80065fc:	f7ff ff7c 	bl	80064f8 <std>
 8006600:	2202      	movs	r2, #2
 8006602:	2112      	movs	r1, #18
 8006604:	68e0      	ldr	r0, [r4, #12]
 8006606:	f7ff ff77 	bl	80064f8 <std>
 800660a:	2301      	movs	r3, #1
 800660c:	61a3      	str	r3, [r4, #24]
 800660e:	e7d1      	b.n	80065b4 <__sinit+0xc>
 8006610:	08007680 	.word	0x08007680
 8006614:	08006541 	.word	0x08006541

08006618 <__sfp>:
 8006618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661a:	4607      	mov	r7, r0
 800661c:	f7ff ffac 	bl	8006578 <__sfp_lock_acquire>
 8006620:	4b1e      	ldr	r3, [pc, #120]	; (800669c <__sfp+0x84>)
 8006622:	681e      	ldr	r6, [r3, #0]
 8006624:	69b3      	ldr	r3, [r6, #24]
 8006626:	b913      	cbnz	r3, 800662e <__sfp+0x16>
 8006628:	4630      	mov	r0, r6
 800662a:	f7ff ffbd 	bl	80065a8 <__sinit>
 800662e:	3648      	adds	r6, #72	; 0x48
 8006630:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006634:	3b01      	subs	r3, #1
 8006636:	d503      	bpl.n	8006640 <__sfp+0x28>
 8006638:	6833      	ldr	r3, [r6, #0]
 800663a:	b30b      	cbz	r3, 8006680 <__sfp+0x68>
 800663c:	6836      	ldr	r6, [r6, #0]
 800663e:	e7f7      	b.n	8006630 <__sfp+0x18>
 8006640:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006644:	b9d5      	cbnz	r5, 800667c <__sfp+0x64>
 8006646:	4b16      	ldr	r3, [pc, #88]	; (80066a0 <__sfp+0x88>)
 8006648:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800664c:	60e3      	str	r3, [r4, #12]
 800664e:	6665      	str	r5, [r4, #100]	; 0x64
 8006650:	f000 f84c 	bl	80066ec <__retarget_lock_init_recursive>
 8006654:	f7ff ff96 	bl	8006584 <__sfp_lock_release>
 8006658:	2208      	movs	r2, #8
 800665a:	4629      	mov	r1, r5
 800665c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006660:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006664:	6025      	str	r5, [r4, #0]
 8006666:	61a5      	str	r5, [r4, #24]
 8006668:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800666c:	f7fe f9aa 	bl	80049c4 <memset>
 8006670:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006674:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006678:	4620      	mov	r0, r4
 800667a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800667c:	3468      	adds	r4, #104	; 0x68
 800667e:	e7d9      	b.n	8006634 <__sfp+0x1c>
 8006680:	2104      	movs	r1, #4
 8006682:	4638      	mov	r0, r7
 8006684:	f7ff ff62 	bl	800654c <__sfmoreglue>
 8006688:	4604      	mov	r4, r0
 800668a:	6030      	str	r0, [r6, #0]
 800668c:	2800      	cmp	r0, #0
 800668e:	d1d5      	bne.n	800663c <__sfp+0x24>
 8006690:	f7ff ff78 	bl	8006584 <__sfp_lock_release>
 8006694:	230c      	movs	r3, #12
 8006696:	603b      	str	r3, [r7, #0]
 8006698:	e7ee      	b.n	8006678 <__sfp+0x60>
 800669a:	bf00      	nop
 800669c:	08007680 	.word	0x08007680
 80066a0:	ffff0001 	.word	0xffff0001

080066a4 <_fwalk_reent>:
 80066a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066a8:	4606      	mov	r6, r0
 80066aa:	4688      	mov	r8, r1
 80066ac:	2700      	movs	r7, #0
 80066ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80066b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066b6:	f1b9 0901 	subs.w	r9, r9, #1
 80066ba:	d505      	bpl.n	80066c8 <_fwalk_reent+0x24>
 80066bc:	6824      	ldr	r4, [r4, #0]
 80066be:	2c00      	cmp	r4, #0
 80066c0:	d1f7      	bne.n	80066b2 <_fwalk_reent+0xe>
 80066c2:	4638      	mov	r0, r7
 80066c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066c8:	89ab      	ldrh	r3, [r5, #12]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d907      	bls.n	80066de <_fwalk_reent+0x3a>
 80066ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066d2:	3301      	adds	r3, #1
 80066d4:	d003      	beq.n	80066de <_fwalk_reent+0x3a>
 80066d6:	4629      	mov	r1, r5
 80066d8:	4630      	mov	r0, r6
 80066da:	47c0      	blx	r8
 80066dc:	4307      	orrs	r7, r0
 80066de:	3568      	adds	r5, #104	; 0x68
 80066e0:	e7e9      	b.n	80066b6 <_fwalk_reent+0x12>
	...

080066e4 <_localeconv_r>:
 80066e4:	4800      	ldr	r0, [pc, #0]	; (80066e8 <_localeconv_r+0x4>)
 80066e6:	4770      	bx	lr
 80066e8:	20000164 	.word	0x20000164

080066ec <__retarget_lock_init_recursive>:
 80066ec:	4770      	bx	lr

080066ee <__retarget_lock_acquire_recursive>:
 80066ee:	4770      	bx	lr

080066f0 <__retarget_lock_release_recursive>:
 80066f0:	4770      	bx	lr

080066f2 <__swhatbuf_r>:
 80066f2:	b570      	push	{r4, r5, r6, lr}
 80066f4:	460e      	mov	r6, r1
 80066f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066fa:	4614      	mov	r4, r2
 80066fc:	2900      	cmp	r1, #0
 80066fe:	461d      	mov	r5, r3
 8006700:	b096      	sub	sp, #88	; 0x58
 8006702:	da07      	bge.n	8006714 <__swhatbuf_r+0x22>
 8006704:	2300      	movs	r3, #0
 8006706:	602b      	str	r3, [r5, #0]
 8006708:	89b3      	ldrh	r3, [r6, #12]
 800670a:	061a      	lsls	r2, r3, #24
 800670c:	d410      	bmi.n	8006730 <__swhatbuf_r+0x3e>
 800670e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006712:	e00e      	b.n	8006732 <__swhatbuf_r+0x40>
 8006714:	466a      	mov	r2, sp
 8006716:	f000 fea9 	bl	800746c <_fstat_r>
 800671a:	2800      	cmp	r0, #0
 800671c:	dbf2      	blt.n	8006704 <__swhatbuf_r+0x12>
 800671e:	9a01      	ldr	r2, [sp, #4]
 8006720:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006724:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006728:	425a      	negs	r2, r3
 800672a:	415a      	adcs	r2, r3
 800672c:	602a      	str	r2, [r5, #0]
 800672e:	e7ee      	b.n	800670e <__swhatbuf_r+0x1c>
 8006730:	2340      	movs	r3, #64	; 0x40
 8006732:	2000      	movs	r0, #0
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	b016      	add	sp, #88	; 0x58
 8006738:	bd70      	pop	{r4, r5, r6, pc}
	...

0800673c <__smakebuf_r>:
 800673c:	898b      	ldrh	r3, [r1, #12]
 800673e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006740:	079d      	lsls	r5, r3, #30
 8006742:	4606      	mov	r6, r0
 8006744:	460c      	mov	r4, r1
 8006746:	d507      	bpl.n	8006758 <__smakebuf_r+0x1c>
 8006748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	6123      	str	r3, [r4, #16]
 8006750:	2301      	movs	r3, #1
 8006752:	6163      	str	r3, [r4, #20]
 8006754:	b002      	add	sp, #8
 8006756:	bd70      	pop	{r4, r5, r6, pc}
 8006758:	466a      	mov	r2, sp
 800675a:	ab01      	add	r3, sp, #4
 800675c:	f7ff ffc9 	bl	80066f2 <__swhatbuf_r>
 8006760:	9900      	ldr	r1, [sp, #0]
 8006762:	4605      	mov	r5, r0
 8006764:	4630      	mov	r0, r6
 8006766:	f000 fc29 	bl	8006fbc <_malloc_r>
 800676a:	b948      	cbnz	r0, 8006780 <__smakebuf_r+0x44>
 800676c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006770:	059a      	lsls	r2, r3, #22
 8006772:	d4ef      	bmi.n	8006754 <__smakebuf_r+0x18>
 8006774:	f023 0303 	bic.w	r3, r3, #3
 8006778:	f043 0302 	orr.w	r3, r3, #2
 800677c:	81a3      	strh	r3, [r4, #12]
 800677e:	e7e3      	b.n	8006748 <__smakebuf_r+0xc>
 8006780:	4b0d      	ldr	r3, [pc, #52]	; (80067b8 <__smakebuf_r+0x7c>)
 8006782:	62b3      	str	r3, [r6, #40]	; 0x28
 8006784:	89a3      	ldrh	r3, [r4, #12]
 8006786:	6020      	str	r0, [r4, #0]
 8006788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678c:	81a3      	strh	r3, [r4, #12]
 800678e:	9b00      	ldr	r3, [sp, #0]
 8006790:	6120      	str	r0, [r4, #16]
 8006792:	6163      	str	r3, [r4, #20]
 8006794:	9b01      	ldr	r3, [sp, #4]
 8006796:	b15b      	cbz	r3, 80067b0 <__smakebuf_r+0x74>
 8006798:	4630      	mov	r0, r6
 800679a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800679e:	f000 fe77 	bl	8007490 <_isatty_r>
 80067a2:	b128      	cbz	r0, 80067b0 <__smakebuf_r+0x74>
 80067a4:	89a3      	ldrh	r3, [r4, #12]
 80067a6:	f023 0303 	bic.w	r3, r3, #3
 80067aa:	f043 0301 	orr.w	r3, r3, #1
 80067ae:	81a3      	strh	r3, [r4, #12]
 80067b0:	89a0      	ldrh	r0, [r4, #12]
 80067b2:	4305      	orrs	r5, r0
 80067b4:	81a5      	strh	r5, [r4, #12]
 80067b6:	e7cd      	b.n	8006754 <__smakebuf_r+0x18>
 80067b8:	08006541 	.word	0x08006541

080067bc <malloc>:
 80067bc:	4b02      	ldr	r3, [pc, #8]	; (80067c8 <malloc+0xc>)
 80067be:	4601      	mov	r1, r0
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	f000 bbfb 	b.w	8006fbc <_malloc_r>
 80067c6:	bf00      	nop
 80067c8:	20000010 	.word	0x20000010

080067cc <memchr>:
 80067cc:	4603      	mov	r3, r0
 80067ce:	b510      	push	{r4, lr}
 80067d0:	b2c9      	uxtb	r1, r1
 80067d2:	4402      	add	r2, r0
 80067d4:	4293      	cmp	r3, r2
 80067d6:	4618      	mov	r0, r3
 80067d8:	d101      	bne.n	80067de <memchr+0x12>
 80067da:	2000      	movs	r0, #0
 80067dc:	e003      	b.n	80067e6 <memchr+0x1a>
 80067de:	7804      	ldrb	r4, [r0, #0]
 80067e0:	3301      	adds	r3, #1
 80067e2:	428c      	cmp	r4, r1
 80067e4:	d1f6      	bne.n	80067d4 <memchr+0x8>
 80067e6:	bd10      	pop	{r4, pc}

080067e8 <memcpy>:
 80067e8:	440a      	add	r2, r1
 80067ea:	4291      	cmp	r1, r2
 80067ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80067f0:	d100      	bne.n	80067f4 <memcpy+0xc>
 80067f2:	4770      	bx	lr
 80067f4:	b510      	push	{r4, lr}
 80067f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067fa:	4291      	cmp	r1, r2
 80067fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006800:	d1f9      	bne.n	80067f6 <memcpy+0xe>
 8006802:	bd10      	pop	{r4, pc}

08006804 <_Balloc>:
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006808:	4604      	mov	r4, r0
 800680a:	460d      	mov	r5, r1
 800680c:	b976      	cbnz	r6, 800682c <_Balloc+0x28>
 800680e:	2010      	movs	r0, #16
 8006810:	f7ff ffd4 	bl	80067bc <malloc>
 8006814:	4602      	mov	r2, r0
 8006816:	6260      	str	r0, [r4, #36]	; 0x24
 8006818:	b920      	cbnz	r0, 8006824 <_Balloc+0x20>
 800681a:	2166      	movs	r1, #102	; 0x66
 800681c:	4b17      	ldr	r3, [pc, #92]	; (800687c <_Balloc+0x78>)
 800681e:	4818      	ldr	r0, [pc, #96]	; (8006880 <_Balloc+0x7c>)
 8006820:	f000 fde4 	bl	80073ec <__assert_func>
 8006824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006828:	6006      	str	r6, [r0, #0]
 800682a:	60c6      	str	r6, [r0, #12]
 800682c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800682e:	68f3      	ldr	r3, [r6, #12]
 8006830:	b183      	cbz	r3, 8006854 <_Balloc+0x50>
 8006832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800683a:	b9b8      	cbnz	r0, 800686c <_Balloc+0x68>
 800683c:	2101      	movs	r1, #1
 800683e:	fa01 f605 	lsl.w	r6, r1, r5
 8006842:	1d72      	adds	r2, r6, #5
 8006844:	4620      	mov	r0, r4
 8006846:	0092      	lsls	r2, r2, #2
 8006848:	f000 fb5e 	bl	8006f08 <_calloc_r>
 800684c:	b160      	cbz	r0, 8006868 <_Balloc+0x64>
 800684e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006852:	e00e      	b.n	8006872 <_Balloc+0x6e>
 8006854:	2221      	movs	r2, #33	; 0x21
 8006856:	2104      	movs	r1, #4
 8006858:	4620      	mov	r0, r4
 800685a:	f000 fb55 	bl	8006f08 <_calloc_r>
 800685e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006860:	60f0      	str	r0, [r6, #12]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e4      	bne.n	8006832 <_Balloc+0x2e>
 8006868:	2000      	movs	r0, #0
 800686a:	bd70      	pop	{r4, r5, r6, pc}
 800686c:	6802      	ldr	r2, [r0, #0]
 800686e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006872:	2300      	movs	r3, #0
 8006874:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006878:	e7f7      	b.n	800686a <_Balloc+0x66>
 800687a:	bf00      	nop
 800687c:	080077c6 	.word	0x080077c6
 8006880:	080078b0 	.word	0x080078b0

08006884 <_Bfree>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006888:	4605      	mov	r5, r0
 800688a:	460c      	mov	r4, r1
 800688c:	b976      	cbnz	r6, 80068ac <_Bfree+0x28>
 800688e:	2010      	movs	r0, #16
 8006890:	f7ff ff94 	bl	80067bc <malloc>
 8006894:	4602      	mov	r2, r0
 8006896:	6268      	str	r0, [r5, #36]	; 0x24
 8006898:	b920      	cbnz	r0, 80068a4 <_Bfree+0x20>
 800689a:	218a      	movs	r1, #138	; 0x8a
 800689c:	4b08      	ldr	r3, [pc, #32]	; (80068c0 <_Bfree+0x3c>)
 800689e:	4809      	ldr	r0, [pc, #36]	; (80068c4 <_Bfree+0x40>)
 80068a0:	f000 fda4 	bl	80073ec <__assert_func>
 80068a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068a8:	6006      	str	r6, [r0, #0]
 80068aa:	60c6      	str	r6, [r0, #12]
 80068ac:	b13c      	cbz	r4, 80068be <_Bfree+0x3a>
 80068ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068b0:	6862      	ldr	r2, [r4, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068b8:	6021      	str	r1, [r4, #0]
 80068ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068be:	bd70      	pop	{r4, r5, r6, pc}
 80068c0:	080077c6 	.word	0x080077c6
 80068c4:	080078b0 	.word	0x080078b0

080068c8 <__multadd>:
 80068c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068cc:	4698      	mov	r8, r3
 80068ce:	460c      	mov	r4, r1
 80068d0:	2300      	movs	r3, #0
 80068d2:	690e      	ldr	r6, [r1, #16]
 80068d4:	4607      	mov	r7, r0
 80068d6:	f101 0014 	add.w	r0, r1, #20
 80068da:	6805      	ldr	r5, [r0, #0]
 80068dc:	3301      	adds	r3, #1
 80068de:	b2a9      	uxth	r1, r5
 80068e0:	fb02 8101 	mla	r1, r2, r1, r8
 80068e4:	0c2d      	lsrs	r5, r5, #16
 80068e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80068ea:	fb02 c505 	mla	r5, r2, r5, ip
 80068ee:	b289      	uxth	r1, r1
 80068f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80068f4:	429e      	cmp	r6, r3
 80068f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80068fa:	f840 1b04 	str.w	r1, [r0], #4
 80068fe:	dcec      	bgt.n	80068da <__multadd+0x12>
 8006900:	f1b8 0f00 	cmp.w	r8, #0
 8006904:	d022      	beq.n	800694c <__multadd+0x84>
 8006906:	68a3      	ldr	r3, [r4, #8]
 8006908:	42b3      	cmp	r3, r6
 800690a:	dc19      	bgt.n	8006940 <__multadd+0x78>
 800690c:	6861      	ldr	r1, [r4, #4]
 800690e:	4638      	mov	r0, r7
 8006910:	3101      	adds	r1, #1
 8006912:	f7ff ff77 	bl	8006804 <_Balloc>
 8006916:	4605      	mov	r5, r0
 8006918:	b928      	cbnz	r0, 8006926 <__multadd+0x5e>
 800691a:	4602      	mov	r2, r0
 800691c:	21b5      	movs	r1, #181	; 0xb5
 800691e:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <__multadd+0x8c>)
 8006920:	480d      	ldr	r0, [pc, #52]	; (8006958 <__multadd+0x90>)
 8006922:	f000 fd63 	bl	80073ec <__assert_func>
 8006926:	6922      	ldr	r2, [r4, #16]
 8006928:	f104 010c 	add.w	r1, r4, #12
 800692c:	3202      	adds	r2, #2
 800692e:	0092      	lsls	r2, r2, #2
 8006930:	300c      	adds	r0, #12
 8006932:	f7ff ff59 	bl	80067e8 <memcpy>
 8006936:	4621      	mov	r1, r4
 8006938:	4638      	mov	r0, r7
 800693a:	f7ff ffa3 	bl	8006884 <_Bfree>
 800693e:	462c      	mov	r4, r5
 8006940:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006944:	3601      	adds	r6, #1
 8006946:	f8c3 8014 	str.w	r8, [r3, #20]
 800694a:	6126      	str	r6, [r4, #16]
 800694c:	4620      	mov	r0, r4
 800694e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006952:	bf00      	nop
 8006954:	0800783c 	.word	0x0800783c
 8006958:	080078b0 	.word	0x080078b0

0800695c <__hi0bits>:
 800695c:	0c02      	lsrs	r2, r0, #16
 800695e:	0412      	lsls	r2, r2, #16
 8006960:	4603      	mov	r3, r0
 8006962:	b9ca      	cbnz	r2, 8006998 <__hi0bits+0x3c>
 8006964:	0403      	lsls	r3, r0, #16
 8006966:	2010      	movs	r0, #16
 8006968:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800696c:	bf04      	itt	eq
 800696e:	021b      	lsleq	r3, r3, #8
 8006970:	3008      	addeq	r0, #8
 8006972:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006976:	bf04      	itt	eq
 8006978:	011b      	lsleq	r3, r3, #4
 800697a:	3004      	addeq	r0, #4
 800697c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006980:	bf04      	itt	eq
 8006982:	009b      	lsleq	r3, r3, #2
 8006984:	3002      	addeq	r0, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	db05      	blt.n	8006996 <__hi0bits+0x3a>
 800698a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800698e:	f100 0001 	add.w	r0, r0, #1
 8006992:	bf08      	it	eq
 8006994:	2020      	moveq	r0, #32
 8006996:	4770      	bx	lr
 8006998:	2000      	movs	r0, #0
 800699a:	e7e5      	b.n	8006968 <__hi0bits+0xc>

0800699c <__lo0bits>:
 800699c:	6803      	ldr	r3, [r0, #0]
 800699e:	4602      	mov	r2, r0
 80069a0:	f013 0007 	ands.w	r0, r3, #7
 80069a4:	d00b      	beq.n	80069be <__lo0bits+0x22>
 80069a6:	07d9      	lsls	r1, r3, #31
 80069a8:	d422      	bmi.n	80069f0 <__lo0bits+0x54>
 80069aa:	0798      	lsls	r0, r3, #30
 80069ac:	bf49      	itett	mi
 80069ae:	085b      	lsrmi	r3, r3, #1
 80069b0:	089b      	lsrpl	r3, r3, #2
 80069b2:	2001      	movmi	r0, #1
 80069b4:	6013      	strmi	r3, [r2, #0]
 80069b6:	bf5c      	itt	pl
 80069b8:	2002      	movpl	r0, #2
 80069ba:	6013      	strpl	r3, [r2, #0]
 80069bc:	4770      	bx	lr
 80069be:	b299      	uxth	r1, r3
 80069c0:	b909      	cbnz	r1, 80069c6 <__lo0bits+0x2a>
 80069c2:	2010      	movs	r0, #16
 80069c4:	0c1b      	lsrs	r3, r3, #16
 80069c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80069ca:	bf04      	itt	eq
 80069cc:	0a1b      	lsreq	r3, r3, #8
 80069ce:	3008      	addeq	r0, #8
 80069d0:	0719      	lsls	r1, r3, #28
 80069d2:	bf04      	itt	eq
 80069d4:	091b      	lsreq	r3, r3, #4
 80069d6:	3004      	addeq	r0, #4
 80069d8:	0799      	lsls	r1, r3, #30
 80069da:	bf04      	itt	eq
 80069dc:	089b      	lsreq	r3, r3, #2
 80069de:	3002      	addeq	r0, #2
 80069e0:	07d9      	lsls	r1, r3, #31
 80069e2:	d403      	bmi.n	80069ec <__lo0bits+0x50>
 80069e4:	085b      	lsrs	r3, r3, #1
 80069e6:	f100 0001 	add.w	r0, r0, #1
 80069ea:	d003      	beq.n	80069f4 <__lo0bits+0x58>
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	4770      	bx	lr
 80069f0:	2000      	movs	r0, #0
 80069f2:	4770      	bx	lr
 80069f4:	2020      	movs	r0, #32
 80069f6:	4770      	bx	lr

080069f8 <__i2b>:
 80069f8:	b510      	push	{r4, lr}
 80069fa:	460c      	mov	r4, r1
 80069fc:	2101      	movs	r1, #1
 80069fe:	f7ff ff01 	bl	8006804 <_Balloc>
 8006a02:	4602      	mov	r2, r0
 8006a04:	b928      	cbnz	r0, 8006a12 <__i2b+0x1a>
 8006a06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006a0a:	4b04      	ldr	r3, [pc, #16]	; (8006a1c <__i2b+0x24>)
 8006a0c:	4804      	ldr	r0, [pc, #16]	; (8006a20 <__i2b+0x28>)
 8006a0e:	f000 fced 	bl	80073ec <__assert_func>
 8006a12:	2301      	movs	r3, #1
 8006a14:	6144      	str	r4, [r0, #20]
 8006a16:	6103      	str	r3, [r0, #16]
 8006a18:	bd10      	pop	{r4, pc}
 8006a1a:	bf00      	nop
 8006a1c:	0800783c 	.word	0x0800783c
 8006a20:	080078b0 	.word	0x080078b0

08006a24 <__multiply>:
 8006a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a28:	4614      	mov	r4, r2
 8006a2a:	690a      	ldr	r2, [r1, #16]
 8006a2c:	6923      	ldr	r3, [r4, #16]
 8006a2e:	460d      	mov	r5, r1
 8006a30:	429a      	cmp	r2, r3
 8006a32:	bfbe      	ittt	lt
 8006a34:	460b      	movlt	r3, r1
 8006a36:	4625      	movlt	r5, r4
 8006a38:	461c      	movlt	r4, r3
 8006a3a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006a3e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006a42:	68ab      	ldr	r3, [r5, #8]
 8006a44:	6869      	ldr	r1, [r5, #4]
 8006a46:	eb0a 0709 	add.w	r7, sl, r9
 8006a4a:	42bb      	cmp	r3, r7
 8006a4c:	b085      	sub	sp, #20
 8006a4e:	bfb8      	it	lt
 8006a50:	3101      	addlt	r1, #1
 8006a52:	f7ff fed7 	bl	8006804 <_Balloc>
 8006a56:	b930      	cbnz	r0, 8006a66 <__multiply+0x42>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	f240 115d 	movw	r1, #349	; 0x15d
 8006a5e:	4b41      	ldr	r3, [pc, #260]	; (8006b64 <__multiply+0x140>)
 8006a60:	4841      	ldr	r0, [pc, #260]	; (8006b68 <__multiply+0x144>)
 8006a62:	f000 fcc3 	bl	80073ec <__assert_func>
 8006a66:	f100 0614 	add.w	r6, r0, #20
 8006a6a:	4633      	mov	r3, r6
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006a72:	4543      	cmp	r3, r8
 8006a74:	d31e      	bcc.n	8006ab4 <__multiply+0x90>
 8006a76:	f105 0c14 	add.w	ip, r5, #20
 8006a7a:	f104 0314 	add.w	r3, r4, #20
 8006a7e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006a82:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006a86:	9202      	str	r2, [sp, #8]
 8006a88:	ebac 0205 	sub.w	r2, ip, r5
 8006a8c:	3a15      	subs	r2, #21
 8006a8e:	f022 0203 	bic.w	r2, r2, #3
 8006a92:	3204      	adds	r2, #4
 8006a94:	f105 0115 	add.w	r1, r5, #21
 8006a98:	458c      	cmp	ip, r1
 8006a9a:	bf38      	it	cc
 8006a9c:	2204      	movcc	r2, #4
 8006a9e:	9201      	str	r2, [sp, #4]
 8006aa0:	9a02      	ldr	r2, [sp, #8]
 8006aa2:	9303      	str	r3, [sp, #12]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d808      	bhi.n	8006aba <__multiply+0x96>
 8006aa8:	2f00      	cmp	r7, #0
 8006aaa:	dc55      	bgt.n	8006b58 <__multiply+0x134>
 8006aac:	6107      	str	r7, [r0, #16]
 8006aae:	b005      	add	sp, #20
 8006ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab4:	f843 2b04 	str.w	r2, [r3], #4
 8006ab8:	e7db      	b.n	8006a72 <__multiply+0x4e>
 8006aba:	f8b3 a000 	ldrh.w	sl, [r3]
 8006abe:	f1ba 0f00 	cmp.w	sl, #0
 8006ac2:	d020      	beq.n	8006b06 <__multiply+0xe2>
 8006ac4:	46b1      	mov	r9, r6
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f105 0e14 	add.w	lr, r5, #20
 8006acc:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006ad0:	f8d9 b000 	ldr.w	fp, [r9]
 8006ad4:	b2a1      	uxth	r1, r4
 8006ad6:	fa1f fb8b 	uxth.w	fp, fp
 8006ada:	fb0a b101 	mla	r1, sl, r1, fp
 8006ade:	4411      	add	r1, r2
 8006ae0:	f8d9 2000 	ldr.w	r2, [r9]
 8006ae4:	0c24      	lsrs	r4, r4, #16
 8006ae6:	0c12      	lsrs	r2, r2, #16
 8006ae8:	fb0a 2404 	mla	r4, sl, r4, r2
 8006aec:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006af0:	b289      	uxth	r1, r1
 8006af2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006af6:	45f4      	cmp	ip, lr
 8006af8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006afc:	f849 1b04 	str.w	r1, [r9], #4
 8006b00:	d8e4      	bhi.n	8006acc <__multiply+0xa8>
 8006b02:	9901      	ldr	r1, [sp, #4]
 8006b04:	5072      	str	r2, [r6, r1]
 8006b06:	9a03      	ldr	r2, [sp, #12]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b0e:	f1b9 0f00 	cmp.w	r9, #0
 8006b12:	d01f      	beq.n	8006b54 <__multiply+0x130>
 8006b14:	46b6      	mov	lr, r6
 8006b16:	f04f 0a00 	mov.w	sl, #0
 8006b1a:	6834      	ldr	r4, [r6, #0]
 8006b1c:	f105 0114 	add.w	r1, r5, #20
 8006b20:	880a      	ldrh	r2, [r1, #0]
 8006b22:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006b26:	b2a4      	uxth	r4, r4
 8006b28:	fb09 b202 	mla	r2, r9, r2, fp
 8006b2c:	4492      	add	sl, r2
 8006b2e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006b32:	f84e 4b04 	str.w	r4, [lr], #4
 8006b36:	f851 4b04 	ldr.w	r4, [r1], #4
 8006b3a:	f8be 2000 	ldrh.w	r2, [lr]
 8006b3e:	0c24      	lsrs	r4, r4, #16
 8006b40:	fb09 2404 	mla	r4, r9, r4, r2
 8006b44:	458c      	cmp	ip, r1
 8006b46:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006b4a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006b4e:	d8e7      	bhi.n	8006b20 <__multiply+0xfc>
 8006b50:	9a01      	ldr	r2, [sp, #4]
 8006b52:	50b4      	str	r4, [r6, r2]
 8006b54:	3604      	adds	r6, #4
 8006b56:	e7a3      	b.n	8006aa0 <__multiply+0x7c>
 8006b58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1a5      	bne.n	8006aac <__multiply+0x88>
 8006b60:	3f01      	subs	r7, #1
 8006b62:	e7a1      	b.n	8006aa8 <__multiply+0x84>
 8006b64:	0800783c 	.word	0x0800783c
 8006b68:	080078b0 	.word	0x080078b0

08006b6c <__pow5mult>:
 8006b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b70:	4615      	mov	r5, r2
 8006b72:	f012 0203 	ands.w	r2, r2, #3
 8006b76:	4606      	mov	r6, r0
 8006b78:	460f      	mov	r7, r1
 8006b7a:	d007      	beq.n	8006b8c <__pow5mult+0x20>
 8006b7c:	4c25      	ldr	r4, [pc, #148]	; (8006c14 <__pow5mult+0xa8>)
 8006b7e:	3a01      	subs	r2, #1
 8006b80:	2300      	movs	r3, #0
 8006b82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b86:	f7ff fe9f 	bl	80068c8 <__multadd>
 8006b8a:	4607      	mov	r7, r0
 8006b8c:	10ad      	asrs	r5, r5, #2
 8006b8e:	d03d      	beq.n	8006c0c <__pow5mult+0xa0>
 8006b90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006b92:	b97c      	cbnz	r4, 8006bb4 <__pow5mult+0x48>
 8006b94:	2010      	movs	r0, #16
 8006b96:	f7ff fe11 	bl	80067bc <malloc>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	6270      	str	r0, [r6, #36]	; 0x24
 8006b9e:	b928      	cbnz	r0, 8006bac <__pow5mult+0x40>
 8006ba0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006ba4:	4b1c      	ldr	r3, [pc, #112]	; (8006c18 <__pow5mult+0xac>)
 8006ba6:	481d      	ldr	r0, [pc, #116]	; (8006c1c <__pow5mult+0xb0>)
 8006ba8:	f000 fc20 	bl	80073ec <__assert_func>
 8006bac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bb0:	6004      	str	r4, [r0, #0]
 8006bb2:	60c4      	str	r4, [r0, #12]
 8006bb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006bb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006bbc:	b94c      	cbnz	r4, 8006bd2 <__pow5mult+0x66>
 8006bbe:	f240 2171 	movw	r1, #625	; 0x271
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	f7ff ff18 	bl	80069f8 <__i2b>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4604      	mov	r4, r0
 8006bcc:	f8c8 0008 	str.w	r0, [r8, #8]
 8006bd0:	6003      	str	r3, [r0, #0]
 8006bd2:	f04f 0900 	mov.w	r9, #0
 8006bd6:	07eb      	lsls	r3, r5, #31
 8006bd8:	d50a      	bpl.n	8006bf0 <__pow5mult+0x84>
 8006bda:	4639      	mov	r1, r7
 8006bdc:	4622      	mov	r2, r4
 8006bde:	4630      	mov	r0, r6
 8006be0:	f7ff ff20 	bl	8006a24 <__multiply>
 8006be4:	4680      	mov	r8, r0
 8006be6:	4639      	mov	r1, r7
 8006be8:	4630      	mov	r0, r6
 8006bea:	f7ff fe4b 	bl	8006884 <_Bfree>
 8006bee:	4647      	mov	r7, r8
 8006bf0:	106d      	asrs	r5, r5, #1
 8006bf2:	d00b      	beq.n	8006c0c <__pow5mult+0xa0>
 8006bf4:	6820      	ldr	r0, [r4, #0]
 8006bf6:	b938      	cbnz	r0, 8006c08 <__pow5mult+0x9c>
 8006bf8:	4622      	mov	r2, r4
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f7ff ff11 	bl	8006a24 <__multiply>
 8006c02:	6020      	str	r0, [r4, #0]
 8006c04:	f8c0 9000 	str.w	r9, [r0]
 8006c08:	4604      	mov	r4, r0
 8006c0a:	e7e4      	b.n	8006bd6 <__pow5mult+0x6a>
 8006c0c:	4638      	mov	r0, r7
 8006c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c12:	bf00      	nop
 8006c14:	08007a00 	.word	0x08007a00
 8006c18:	080077c6 	.word	0x080077c6
 8006c1c:	080078b0 	.word	0x080078b0

08006c20 <__lshift>:
 8006c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c24:	460c      	mov	r4, r1
 8006c26:	4607      	mov	r7, r0
 8006c28:	4691      	mov	r9, r2
 8006c2a:	6923      	ldr	r3, [r4, #16]
 8006c2c:	6849      	ldr	r1, [r1, #4]
 8006c2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c32:	68a3      	ldr	r3, [r4, #8]
 8006c34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c38:	f108 0601 	add.w	r6, r8, #1
 8006c3c:	42b3      	cmp	r3, r6
 8006c3e:	db0b      	blt.n	8006c58 <__lshift+0x38>
 8006c40:	4638      	mov	r0, r7
 8006c42:	f7ff fddf 	bl	8006804 <_Balloc>
 8006c46:	4605      	mov	r5, r0
 8006c48:	b948      	cbnz	r0, 8006c5e <__lshift+0x3e>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006c50:	4b27      	ldr	r3, [pc, #156]	; (8006cf0 <__lshift+0xd0>)
 8006c52:	4828      	ldr	r0, [pc, #160]	; (8006cf4 <__lshift+0xd4>)
 8006c54:	f000 fbca 	bl	80073ec <__assert_func>
 8006c58:	3101      	adds	r1, #1
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	e7ee      	b.n	8006c3c <__lshift+0x1c>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f100 0114 	add.w	r1, r0, #20
 8006c64:	f100 0210 	add.w	r2, r0, #16
 8006c68:	4618      	mov	r0, r3
 8006c6a:	4553      	cmp	r3, sl
 8006c6c:	db33      	blt.n	8006cd6 <__lshift+0xb6>
 8006c6e:	6920      	ldr	r0, [r4, #16]
 8006c70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c74:	f104 0314 	add.w	r3, r4, #20
 8006c78:	f019 091f 	ands.w	r9, r9, #31
 8006c7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c84:	d02b      	beq.n	8006cde <__lshift+0xbe>
 8006c86:	468a      	mov	sl, r1
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f1c9 0e20 	rsb	lr, r9, #32
 8006c8e:	6818      	ldr	r0, [r3, #0]
 8006c90:	fa00 f009 	lsl.w	r0, r0, r9
 8006c94:	4302      	orrs	r2, r0
 8006c96:	f84a 2b04 	str.w	r2, [sl], #4
 8006c9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c9e:	459c      	cmp	ip, r3
 8006ca0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ca4:	d8f3      	bhi.n	8006c8e <__lshift+0x6e>
 8006ca6:	ebac 0304 	sub.w	r3, ip, r4
 8006caa:	3b15      	subs	r3, #21
 8006cac:	f023 0303 	bic.w	r3, r3, #3
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	f104 0015 	add.w	r0, r4, #21
 8006cb6:	4584      	cmp	ip, r0
 8006cb8:	bf38      	it	cc
 8006cba:	2304      	movcc	r3, #4
 8006cbc:	50ca      	str	r2, [r1, r3]
 8006cbe:	b10a      	cbz	r2, 8006cc4 <__lshift+0xa4>
 8006cc0:	f108 0602 	add.w	r6, r8, #2
 8006cc4:	3e01      	subs	r6, #1
 8006cc6:	4638      	mov	r0, r7
 8006cc8:	4621      	mov	r1, r4
 8006cca:	612e      	str	r6, [r5, #16]
 8006ccc:	f7ff fdda 	bl	8006884 <_Bfree>
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006cda:	3301      	adds	r3, #1
 8006cdc:	e7c5      	b.n	8006c6a <__lshift+0x4a>
 8006cde:	3904      	subs	r1, #4
 8006ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ce4:	459c      	cmp	ip, r3
 8006ce6:	f841 2f04 	str.w	r2, [r1, #4]!
 8006cea:	d8f9      	bhi.n	8006ce0 <__lshift+0xc0>
 8006cec:	e7ea      	b.n	8006cc4 <__lshift+0xa4>
 8006cee:	bf00      	nop
 8006cf0:	0800783c 	.word	0x0800783c
 8006cf4:	080078b0 	.word	0x080078b0

08006cf8 <__mcmp>:
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	690a      	ldr	r2, [r1, #16]
 8006cfc:	6900      	ldr	r0, [r0, #16]
 8006cfe:	b530      	push	{r4, r5, lr}
 8006d00:	1a80      	subs	r0, r0, r2
 8006d02:	d10d      	bne.n	8006d20 <__mcmp+0x28>
 8006d04:	3314      	adds	r3, #20
 8006d06:	3114      	adds	r1, #20
 8006d08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d18:	4295      	cmp	r5, r2
 8006d1a:	d002      	beq.n	8006d22 <__mcmp+0x2a>
 8006d1c:	d304      	bcc.n	8006d28 <__mcmp+0x30>
 8006d1e:	2001      	movs	r0, #1
 8006d20:	bd30      	pop	{r4, r5, pc}
 8006d22:	42a3      	cmp	r3, r4
 8006d24:	d3f4      	bcc.n	8006d10 <__mcmp+0x18>
 8006d26:	e7fb      	b.n	8006d20 <__mcmp+0x28>
 8006d28:	f04f 30ff 	mov.w	r0, #4294967295
 8006d2c:	e7f8      	b.n	8006d20 <__mcmp+0x28>
	...

08006d30 <__mdiff>:
 8006d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	460c      	mov	r4, r1
 8006d36:	4606      	mov	r6, r0
 8006d38:	4611      	mov	r1, r2
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	4692      	mov	sl, r2
 8006d3e:	f7ff ffdb 	bl	8006cf8 <__mcmp>
 8006d42:	1e05      	subs	r5, r0, #0
 8006d44:	d111      	bne.n	8006d6a <__mdiff+0x3a>
 8006d46:	4629      	mov	r1, r5
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f7ff fd5b 	bl	8006804 <_Balloc>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	b928      	cbnz	r0, 8006d5e <__mdiff+0x2e>
 8006d52:	f240 2132 	movw	r1, #562	; 0x232
 8006d56:	4b3c      	ldr	r3, [pc, #240]	; (8006e48 <__mdiff+0x118>)
 8006d58:	483c      	ldr	r0, [pc, #240]	; (8006e4c <__mdiff+0x11c>)
 8006d5a:	f000 fb47 	bl	80073ec <__assert_func>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d64:	4610      	mov	r0, r2
 8006d66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d6a:	bfa4      	itt	ge
 8006d6c:	4653      	movge	r3, sl
 8006d6e:	46a2      	movge	sl, r4
 8006d70:	4630      	mov	r0, r6
 8006d72:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006d76:	bfa6      	itte	ge
 8006d78:	461c      	movge	r4, r3
 8006d7a:	2500      	movge	r5, #0
 8006d7c:	2501      	movlt	r5, #1
 8006d7e:	f7ff fd41 	bl	8006804 <_Balloc>
 8006d82:	4602      	mov	r2, r0
 8006d84:	b918      	cbnz	r0, 8006d8e <__mdiff+0x5e>
 8006d86:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006d8a:	4b2f      	ldr	r3, [pc, #188]	; (8006e48 <__mdiff+0x118>)
 8006d8c:	e7e4      	b.n	8006d58 <__mdiff+0x28>
 8006d8e:	f100 0814 	add.w	r8, r0, #20
 8006d92:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006d96:	60c5      	str	r5, [r0, #12]
 8006d98:	f04f 0c00 	mov.w	ip, #0
 8006d9c:	f10a 0514 	add.w	r5, sl, #20
 8006da0:	f10a 0010 	add.w	r0, sl, #16
 8006da4:	46c2      	mov	sl, r8
 8006da6:	6926      	ldr	r6, [r4, #16]
 8006da8:	f104 0914 	add.w	r9, r4, #20
 8006dac:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006db0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006db4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006db8:	f859 3b04 	ldr.w	r3, [r9], #4
 8006dbc:	fa1f f18b 	uxth.w	r1, fp
 8006dc0:	4461      	add	r1, ip
 8006dc2:	fa1f fc83 	uxth.w	ip, r3
 8006dc6:	0c1b      	lsrs	r3, r3, #16
 8006dc8:	eba1 010c 	sub.w	r1, r1, ip
 8006dcc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006dd0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006dd4:	b289      	uxth	r1, r1
 8006dd6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006dda:	454e      	cmp	r6, r9
 8006ddc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006de0:	f84a 3b04 	str.w	r3, [sl], #4
 8006de4:	d8e6      	bhi.n	8006db4 <__mdiff+0x84>
 8006de6:	1b33      	subs	r3, r6, r4
 8006de8:	3b15      	subs	r3, #21
 8006dea:	f023 0303 	bic.w	r3, r3, #3
 8006dee:	3415      	adds	r4, #21
 8006df0:	3304      	adds	r3, #4
 8006df2:	42a6      	cmp	r6, r4
 8006df4:	bf38      	it	cc
 8006df6:	2304      	movcc	r3, #4
 8006df8:	441d      	add	r5, r3
 8006dfa:	4443      	add	r3, r8
 8006dfc:	461e      	mov	r6, r3
 8006dfe:	462c      	mov	r4, r5
 8006e00:	4574      	cmp	r4, lr
 8006e02:	d30e      	bcc.n	8006e22 <__mdiff+0xf2>
 8006e04:	f10e 0103 	add.w	r1, lr, #3
 8006e08:	1b49      	subs	r1, r1, r5
 8006e0a:	f021 0103 	bic.w	r1, r1, #3
 8006e0e:	3d03      	subs	r5, #3
 8006e10:	45ae      	cmp	lr, r5
 8006e12:	bf38      	it	cc
 8006e14:	2100      	movcc	r1, #0
 8006e16:	4419      	add	r1, r3
 8006e18:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006e1c:	b18b      	cbz	r3, 8006e42 <__mdiff+0x112>
 8006e1e:	6117      	str	r7, [r2, #16]
 8006e20:	e7a0      	b.n	8006d64 <__mdiff+0x34>
 8006e22:	f854 8b04 	ldr.w	r8, [r4], #4
 8006e26:	fa1f f188 	uxth.w	r1, r8
 8006e2a:	4461      	add	r1, ip
 8006e2c:	1408      	asrs	r0, r1, #16
 8006e2e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006e32:	b289      	uxth	r1, r1
 8006e34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006e38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e3c:	f846 1b04 	str.w	r1, [r6], #4
 8006e40:	e7de      	b.n	8006e00 <__mdiff+0xd0>
 8006e42:	3f01      	subs	r7, #1
 8006e44:	e7e8      	b.n	8006e18 <__mdiff+0xe8>
 8006e46:	bf00      	nop
 8006e48:	0800783c 	.word	0x0800783c
 8006e4c:	080078b0 	.word	0x080078b0

08006e50 <__d2b>:
 8006e50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006e54:	2101      	movs	r1, #1
 8006e56:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006e5a:	4690      	mov	r8, r2
 8006e5c:	461d      	mov	r5, r3
 8006e5e:	f7ff fcd1 	bl	8006804 <_Balloc>
 8006e62:	4604      	mov	r4, r0
 8006e64:	b930      	cbnz	r0, 8006e74 <__d2b+0x24>
 8006e66:	4602      	mov	r2, r0
 8006e68:	f240 310a 	movw	r1, #778	; 0x30a
 8006e6c:	4b24      	ldr	r3, [pc, #144]	; (8006f00 <__d2b+0xb0>)
 8006e6e:	4825      	ldr	r0, [pc, #148]	; (8006f04 <__d2b+0xb4>)
 8006e70:	f000 fabc 	bl	80073ec <__assert_func>
 8006e74:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006e78:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006e7c:	bb2d      	cbnz	r5, 8006eca <__d2b+0x7a>
 8006e7e:	9301      	str	r3, [sp, #4]
 8006e80:	f1b8 0300 	subs.w	r3, r8, #0
 8006e84:	d026      	beq.n	8006ed4 <__d2b+0x84>
 8006e86:	4668      	mov	r0, sp
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	f7ff fd87 	bl	800699c <__lo0bits>
 8006e8e:	9900      	ldr	r1, [sp, #0]
 8006e90:	b1f0      	cbz	r0, 8006ed0 <__d2b+0x80>
 8006e92:	9a01      	ldr	r2, [sp, #4]
 8006e94:	f1c0 0320 	rsb	r3, r0, #32
 8006e98:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	40c2      	lsrs	r2, r0
 8006ea0:	6163      	str	r3, [r4, #20]
 8006ea2:	9201      	str	r2, [sp, #4]
 8006ea4:	9b01      	ldr	r3, [sp, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	bf14      	ite	ne
 8006eaa:	2102      	movne	r1, #2
 8006eac:	2101      	moveq	r1, #1
 8006eae:	61a3      	str	r3, [r4, #24]
 8006eb0:	6121      	str	r1, [r4, #16]
 8006eb2:	b1c5      	cbz	r5, 8006ee6 <__d2b+0x96>
 8006eb4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006eb8:	4405      	add	r5, r0
 8006eba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ebe:	603d      	str	r5, [r7, #0]
 8006ec0:	6030      	str	r0, [r6, #0]
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	b002      	add	sp, #8
 8006ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ece:	e7d6      	b.n	8006e7e <__d2b+0x2e>
 8006ed0:	6161      	str	r1, [r4, #20]
 8006ed2:	e7e7      	b.n	8006ea4 <__d2b+0x54>
 8006ed4:	a801      	add	r0, sp, #4
 8006ed6:	f7ff fd61 	bl	800699c <__lo0bits>
 8006eda:	2101      	movs	r1, #1
 8006edc:	9b01      	ldr	r3, [sp, #4]
 8006ede:	6121      	str	r1, [r4, #16]
 8006ee0:	6163      	str	r3, [r4, #20]
 8006ee2:	3020      	adds	r0, #32
 8006ee4:	e7e5      	b.n	8006eb2 <__d2b+0x62>
 8006ee6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006eea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006eee:	6038      	str	r0, [r7, #0]
 8006ef0:	6918      	ldr	r0, [r3, #16]
 8006ef2:	f7ff fd33 	bl	800695c <__hi0bits>
 8006ef6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006efa:	6031      	str	r1, [r6, #0]
 8006efc:	e7e1      	b.n	8006ec2 <__d2b+0x72>
 8006efe:	bf00      	nop
 8006f00:	0800783c 	.word	0x0800783c
 8006f04:	080078b0 	.word	0x080078b0

08006f08 <_calloc_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	fb02 f501 	mul.w	r5, r2, r1
 8006f0e:	4629      	mov	r1, r5
 8006f10:	f000 f854 	bl	8006fbc <_malloc_r>
 8006f14:	4604      	mov	r4, r0
 8006f16:	b118      	cbz	r0, 8006f20 <_calloc_r+0x18>
 8006f18:	462a      	mov	r2, r5
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	f7fd fd52 	bl	80049c4 <memset>
 8006f20:	4620      	mov	r0, r4
 8006f22:	bd38      	pop	{r3, r4, r5, pc}

08006f24 <_free_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	4605      	mov	r5, r0
 8006f28:	2900      	cmp	r1, #0
 8006f2a:	d043      	beq.n	8006fb4 <_free_r+0x90>
 8006f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f30:	1f0c      	subs	r4, r1, #4
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	bfb8      	it	lt
 8006f36:	18e4      	addlt	r4, r4, r3
 8006f38:	f000 fade 	bl	80074f8 <__malloc_lock>
 8006f3c:	4a1e      	ldr	r2, [pc, #120]	; (8006fb8 <_free_r+0x94>)
 8006f3e:	6813      	ldr	r3, [r2, #0]
 8006f40:	4610      	mov	r0, r2
 8006f42:	b933      	cbnz	r3, 8006f52 <_free_r+0x2e>
 8006f44:	6063      	str	r3, [r4, #4]
 8006f46:	6014      	str	r4, [r2, #0]
 8006f48:	4628      	mov	r0, r5
 8006f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f4e:	f000 bad9 	b.w	8007504 <__malloc_unlock>
 8006f52:	42a3      	cmp	r3, r4
 8006f54:	d90a      	bls.n	8006f6c <_free_r+0x48>
 8006f56:	6821      	ldr	r1, [r4, #0]
 8006f58:	1862      	adds	r2, r4, r1
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	bf01      	itttt	eq
 8006f5e:	681a      	ldreq	r2, [r3, #0]
 8006f60:	685b      	ldreq	r3, [r3, #4]
 8006f62:	1852      	addeq	r2, r2, r1
 8006f64:	6022      	streq	r2, [r4, #0]
 8006f66:	6063      	str	r3, [r4, #4]
 8006f68:	6004      	str	r4, [r0, #0]
 8006f6a:	e7ed      	b.n	8006f48 <_free_r+0x24>
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	b10b      	cbz	r3, 8006f76 <_free_r+0x52>
 8006f72:	42a3      	cmp	r3, r4
 8006f74:	d9fa      	bls.n	8006f6c <_free_r+0x48>
 8006f76:	6811      	ldr	r1, [r2, #0]
 8006f78:	1850      	adds	r0, r2, r1
 8006f7a:	42a0      	cmp	r0, r4
 8006f7c:	d10b      	bne.n	8006f96 <_free_r+0x72>
 8006f7e:	6820      	ldr	r0, [r4, #0]
 8006f80:	4401      	add	r1, r0
 8006f82:	1850      	adds	r0, r2, r1
 8006f84:	4283      	cmp	r3, r0
 8006f86:	6011      	str	r1, [r2, #0]
 8006f88:	d1de      	bne.n	8006f48 <_free_r+0x24>
 8006f8a:	6818      	ldr	r0, [r3, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	4401      	add	r1, r0
 8006f90:	6011      	str	r1, [r2, #0]
 8006f92:	6053      	str	r3, [r2, #4]
 8006f94:	e7d8      	b.n	8006f48 <_free_r+0x24>
 8006f96:	d902      	bls.n	8006f9e <_free_r+0x7a>
 8006f98:	230c      	movs	r3, #12
 8006f9a:	602b      	str	r3, [r5, #0]
 8006f9c:	e7d4      	b.n	8006f48 <_free_r+0x24>
 8006f9e:	6820      	ldr	r0, [r4, #0]
 8006fa0:	1821      	adds	r1, r4, r0
 8006fa2:	428b      	cmp	r3, r1
 8006fa4:	bf01      	itttt	eq
 8006fa6:	6819      	ldreq	r1, [r3, #0]
 8006fa8:	685b      	ldreq	r3, [r3, #4]
 8006faa:	1809      	addeq	r1, r1, r0
 8006fac:	6021      	streq	r1, [r4, #0]
 8006fae:	6063      	str	r3, [r4, #4]
 8006fb0:	6054      	str	r4, [r2, #4]
 8006fb2:	e7c9      	b.n	8006f48 <_free_r+0x24>
 8006fb4:	bd38      	pop	{r3, r4, r5, pc}
 8006fb6:	bf00      	nop
 8006fb8:	2000020c 	.word	0x2000020c

08006fbc <_malloc_r>:
 8006fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbe:	1ccd      	adds	r5, r1, #3
 8006fc0:	f025 0503 	bic.w	r5, r5, #3
 8006fc4:	3508      	adds	r5, #8
 8006fc6:	2d0c      	cmp	r5, #12
 8006fc8:	bf38      	it	cc
 8006fca:	250c      	movcc	r5, #12
 8006fcc:	2d00      	cmp	r5, #0
 8006fce:	4606      	mov	r6, r0
 8006fd0:	db01      	blt.n	8006fd6 <_malloc_r+0x1a>
 8006fd2:	42a9      	cmp	r1, r5
 8006fd4:	d903      	bls.n	8006fde <_malloc_r+0x22>
 8006fd6:	230c      	movs	r3, #12
 8006fd8:	6033      	str	r3, [r6, #0]
 8006fda:	2000      	movs	r0, #0
 8006fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fde:	f000 fa8b 	bl	80074f8 <__malloc_lock>
 8006fe2:	4921      	ldr	r1, [pc, #132]	; (8007068 <_malloc_r+0xac>)
 8006fe4:	680a      	ldr	r2, [r1, #0]
 8006fe6:	4614      	mov	r4, r2
 8006fe8:	b99c      	cbnz	r4, 8007012 <_malloc_r+0x56>
 8006fea:	4f20      	ldr	r7, [pc, #128]	; (800706c <_malloc_r+0xb0>)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	b923      	cbnz	r3, 8006ffa <_malloc_r+0x3e>
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f000 f994 	bl	8007320 <_sbrk_r>
 8006ff8:	6038      	str	r0, [r7, #0]
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f000 f98f 	bl	8007320 <_sbrk_r>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	d123      	bne.n	800704e <_malloc_r+0x92>
 8007006:	230c      	movs	r3, #12
 8007008:	4630      	mov	r0, r6
 800700a:	6033      	str	r3, [r6, #0]
 800700c:	f000 fa7a 	bl	8007504 <__malloc_unlock>
 8007010:	e7e3      	b.n	8006fda <_malloc_r+0x1e>
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	1b5b      	subs	r3, r3, r5
 8007016:	d417      	bmi.n	8007048 <_malloc_r+0x8c>
 8007018:	2b0b      	cmp	r3, #11
 800701a:	d903      	bls.n	8007024 <_malloc_r+0x68>
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	441c      	add	r4, r3
 8007020:	6025      	str	r5, [r4, #0]
 8007022:	e004      	b.n	800702e <_malloc_r+0x72>
 8007024:	6863      	ldr	r3, [r4, #4]
 8007026:	42a2      	cmp	r2, r4
 8007028:	bf0c      	ite	eq
 800702a:	600b      	streq	r3, [r1, #0]
 800702c:	6053      	strne	r3, [r2, #4]
 800702e:	4630      	mov	r0, r6
 8007030:	f000 fa68 	bl	8007504 <__malloc_unlock>
 8007034:	f104 000b 	add.w	r0, r4, #11
 8007038:	1d23      	adds	r3, r4, #4
 800703a:	f020 0007 	bic.w	r0, r0, #7
 800703e:	1ac2      	subs	r2, r0, r3
 8007040:	d0cc      	beq.n	8006fdc <_malloc_r+0x20>
 8007042:	1a1b      	subs	r3, r3, r0
 8007044:	50a3      	str	r3, [r4, r2]
 8007046:	e7c9      	b.n	8006fdc <_malloc_r+0x20>
 8007048:	4622      	mov	r2, r4
 800704a:	6864      	ldr	r4, [r4, #4]
 800704c:	e7cc      	b.n	8006fe8 <_malloc_r+0x2c>
 800704e:	1cc4      	adds	r4, r0, #3
 8007050:	f024 0403 	bic.w	r4, r4, #3
 8007054:	42a0      	cmp	r0, r4
 8007056:	d0e3      	beq.n	8007020 <_malloc_r+0x64>
 8007058:	1a21      	subs	r1, r4, r0
 800705a:	4630      	mov	r0, r6
 800705c:	f000 f960 	bl	8007320 <_sbrk_r>
 8007060:	3001      	adds	r0, #1
 8007062:	d1dd      	bne.n	8007020 <_malloc_r+0x64>
 8007064:	e7cf      	b.n	8007006 <_malloc_r+0x4a>
 8007066:	bf00      	nop
 8007068:	2000020c 	.word	0x2000020c
 800706c:	20000210 	.word	0x20000210

08007070 <__sfputc_r>:
 8007070:	6893      	ldr	r3, [r2, #8]
 8007072:	b410      	push	{r4}
 8007074:	3b01      	subs	r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	6093      	str	r3, [r2, #8]
 800707a:	da07      	bge.n	800708c <__sfputc_r+0x1c>
 800707c:	6994      	ldr	r4, [r2, #24]
 800707e:	42a3      	cmp	r3, r4
 8007080:	db01      	blt.n	8007086 <__sfputc_r+0x16>
 8007082:	290a      	cmp	r1, #10
 8007084:	d102      	bne.n	800708c <__sfputc_r+0x1c>
 8007086:	bc10      	pop	{r4}
 8007088:	f7fe ba36 	b.w	80054f8 <__swbuf_r>
 800708c:	6813      	ldr	r3, [r2, #0]
 800708e:	1c58      	adds	r0, r3, #1
 8007090:	6010      	str	r0, [r2, #0]
 8007092:	7019      	strb	r1, [r3, #0]
 8007094:	4608      	mov	r0, r1
 8007096:	bc10      	pop	{r4}
 8007098:	4770      	bx	lr

0800709a <__sfputs_r>:
 800709a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709c:	4606      	mov	r6, r0
 800709e:	460f      	mov	r7, r1
 80070a0:	4614      	mov	r4, r2
 80070a2:	18d5      	adds	r5, r2, r3
 80070a4:	42ac      	cmp	r4, r5
 80070a6:	d101      	bne.n	80070ac <__sfputs_r+0x12>
 80070a8:	2000      	movs	r0, #0
 80070aa:	e007      	b.n	80070bc <__sfputs_r+0x22>
 80070ac:	463a      	mov	r2, r7
 80070ae:	4630      	mov	r0, r6
 80070b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070b4:	f7ff ffdc 	bl	8007070 <__sfputc_r>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d1f3      	bne.n	80070a4 <__sfputs_r+0xa>
 80070bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070c0 <_vfiprintf_r>:
 80070c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c4:	460d      	mov	r5, r1
 80070c6:	4614      	mov	r4, r2
 80070c8:	4698      	mov	r8, r3
 80070ca:	4606      	mov	r6, r0
 80070cc:	b09d      	sub	sp, #116	; 0x74
 80070ce:	b118      	cbz	r0, 80070d8 <_vfiprintf_r+0x18>
 80070d0:	6983      	ldr	r3, [r0, #24]
 80070d2:	b90b      	cbnz	r3, 80070d8 <_vfiprintf_r+0x18>
 80070d4:	f7ff fa68 	bl	80065a8 <__sinit>
 80070d8:	4b89      	ldr	r3, [pc, #548]	; (8007300 <_vfiprintf_r+0x240>)
 80070da:	429d      	cmp	r5, r3
 80070dc:	d11b      	bne.n	8007116 <_vfiprintf_r+0x56>
 80070de:	6875      	ldr	r5, [r6, #4]
 80070e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070e2:	07d9      	lsls	r1, r3, #31
 80070e4:	d405      	bmi.n	80070f2 <_vfiprintf_r+0x32>
 80070e6:	89ab      	ldrh	r3, [r5, #12]
 80070e8:	059a      	lsls	r2, r3, #22
 80070ea:	d402      	bmi.n	80070f2 <_vfiprintf_r+0x32>
 80070ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070ee:	f7ff fafe 	bl	80066ee <__retarget_lock_acquire_recursive>
 80070f2:	89ab      	ldrh	r3, [r5, #12]
 80070f4:	071b      	lsls	r3, r3, #28
 80070f6:	d501      	bpl.n	80070fc <_vfiprintf_r+0x3c>
 80070f8:	692b      	ldr	r3, [r5, #16]
 80070fa:	b9eb      	cbnz	r3, 8007138 <_vfiprintf_r+0x78>
 80070fc:	4629      	mov	r1, r5
 80070fe:	4630      	mov	r0, r6
 8007100:	f7fe fa4c 	bl	800559c <__swsetup_r>
 8007104:	b1c0      	cbz	r0, 8007138 <_vfiprintf_r+0x78>
 8007106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007108:	07dc      	lsls	r4, r3, #31
 800710a:	d50e      	bpl.n	800712a <_vfiprintf_r+0x6a>
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	b01d      	add	sp, #116	; 0x74
 8007112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007116:	4b7b      	ldr	r3, [pc, #492]	; (8007304 <_vfiprintf_r+0x244>)
 8007118:	429d      	cmp	r5, r3
 800711a:	d101      	bne.n	8007120 <_vfiprintf_r+0x60>
 800711c:	68b5      	ldr	r5, [r6, #8]
 800711e:	e7df      	b.n	80070e0 <_vfiprintf_r+0x20>
 8007120:	4b79      	ldr	r3, [pc, #484]	; (8007308 <_vfiprintf_r+0x248>)
 8007122:	429d      	cmp	r5, r3
 8007124:	bf08      	it	eq
 8007126:	68f5      	ldreq	r5, [r6, #12]
 8007128:	e7da      	b.n	80070e0 <_vfiprintf_r+0x20>
 800712a:	89ab      	ldrh	r3, [r5, #12]
 800712c:	0598      	lsls	r0, r3, #22
 800712e:	d4ed      	bmi.n	800710c <_vfiprintf_r+0x4c>
 8007130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007132:	f7ff fadd 	bl	80066f0 <__retarget_lock_release_recursive>
 8007136:	e7e9      	b.n	800710c <_vfiprintf_r+0x4c>
 8007138:	2300      	movs	r3, #0
 800713a:	9309      	str	r3, [sp, #36]	; 0x24
 800713c:	2320      	movs	r3, #32
 800713e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007142:	2330      	movs	r3, #48	; 0x30
 8007144:	f04f 0901 	mov.w	r9, #1
 8007148:	f8cd 800c 	str.w	r8, [sp, #12]
 800714c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800730c <_vfiprintf_r+0x24c>
 8007150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007154:	4623      	mov	r3, r4
 8007156:	469a      	mov	sl, r3
 8007158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800715c:	b10a      	cbz	r2, 8007162 <_vfiprintf_r+0xa2>
 800715e:	2a25      	cmp	r2, #37	; 0x25
 8007160:	d1f9      	bne.n	8007156 <_vfiprintf_r+0x96>
 8007162:	ebba 0b04 	subs.w	fp, sl, r4
 8007166:	d00b      	beq.n	8007180 <_vfiprintf_r+0xc0>
 8007168:	465b      	mov	r3, fp
 800716a:	4622      	mov	r2, r4
 800716c:	4629      	mov	r1, r5
 800716e:	4630      	mov	r0, r6
 8007170:	f7ff ff93 	bl	800709a <__sfputs_r>
 8007174:	3001      	adds	r0, #1
 8007176:	f000 80aa 	beq.w	80072ce <_vfiprintf_r+0x20e>
 800717a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800717c:	445a      	add	r2, fp
 800717e:	9209      	str	r2, [sp, #36]	; 0x24
 8007180:	f89a 3000 	ldrb.w	r3, [sl]
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 80a2 	beq.w	80072ce <_vfiprintf_r+0x20e>
 800718a:	2300      	movs	r3, #0
 800718c:	f04f 32ff 	mov.w	r2, #4294967295
 8007190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007194:	f10a 0a01 	add.w	sl, sl, #1
 8007198:	9304      	str	r3, [sp, #16]
 800719a:	9307      	str	r3, [sp, #28]
 800719c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071a0:	931a      	str	r3, [sp, #104]	; 0x68
 80071a2:	4654      	mov	r4, sl
 80071a4:	2205      	movs	r2, #5
 80071a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071aa:	4858      	ldr	r0, [pc, #352]	; (800730c <_vfiprintf_r+0x24c>)
 80071ac:	f7ff fb0e 	bl	80067cc <memchr>
 80071b0:	9a04      	ldr	r2, [sp, #16]
 80071b2:	b9d8      	cbnz	r0, 80071ec <_vfiprintf_r+0x12c>
 80071b4:	06d1      	lsls	r1, r2, #27
 80071b6:	bf44      	itt	mi
 80071b8:	2320      	movmi	r3, #32
 80071ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071be:	0713      	lsls	r3, r2, #28
 80071c0:	bf44      	itt	mi
 80071c2:	232b      	movmi	r3, #43	; 0x2b
 80071c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071c8:	f89a 3000 	ldrb.w	r3, [sl]
 80071cc:	2b2a      	cmp	r3, #42	; 0x2a
 80071ce:	d015      	beq.n	80071fc <_vfiprintf_r+0x13c>
 80071d0:	4654      	mov	r4, sl
 80071d2:	2000      	movs	r0, #0
 80071d4:	f04f 0c0a 	mov.w	ip, #10
 80071d8:	9a07      	ldr	r2, [sp, #28]
 80071da:	4621      	mov	r1, r4
 80071dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071e0:	3b30      	subs	r3, #48	; 0x30
 80071e2:	2b09      	cmp	r3, #9
 80071e4:	d94e      	bls.n	8007284 <_vfiprintf_r+0x1c4>
 80071e6:	b1b0      	cbz	r0, 8007216 <_vfiprintf_r+0x156>
 80071e8:	9207      	str	r2, [sp, #28]
 80071ea:	e014      	b.n	8007216 <_vfiprintf_r+0x156>
 80071ec:	eba0 0308 	sub.w	r3, r0, r8
 80071f0:	fa09 f303 	lsl.w	r3, r9, r3
 80071f4:	4313      	orrs	r3, r2
 80071f6:	46a2      	mov	sl, r4
 80071f8:	9304      	str	r3, [sp, #16]
 80071fa:	e7d2      	b.n	80071a2 <_vfiprintf_r+0xe2>
 80071fc:	9b03      	ldr	r3, [sp, #12]
 80071fe:	1d19      	adds	r1, r3, #4
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	9103      	str	r1, [sp, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	bfbb      	ittet	lt
 8007208:	425b      	neglt	r3, r3
 800720a:	f042 0202 	orrlt.w	r2, r2, #2
 800720e:	9307      	strge	r3, [sp, #28]
 8007210:	9307      	strlt	r3, [sp, #28]
 8007212:	bfb8      	it	lt
 8007214:	9204      	strlt	r2, [sp, #16]
 8007216:	7823      	ldrb	r3, [r4, #0]
 8007218:	2b2e      	cmp	r3, #46	; 0x2e
 800721a:	d10c      	bne.n	8007236 <_vfiprintf_r+0x176>
 800721c:	7863      	ldrb	r3, [r4, #1]
 800721e:	2b2a      	cmp	r3, #42	; 0x2a
 8007220:	d135      	bne.n	800728e <_vfiprintf_r+0x1ce>
 8007222:	9b03      	ldr	r3, [sp, #12]
 8007224:	3402      	adds	r4, #2
 8007226:	1d1a      	adds	r2, r3, #4
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	9203      	str	r2, [sp, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	bfb8      	it	lt
 8007230:	f04f 33ff 	movlt.w	r3, #4294967295
 8007234:	9305      	str	r3, [sp, #20]
 8007236:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800731c <_vfiprintf_r+0x25c>
 800723a:	2203      	movs	r2, #3
 800723c:	4650      	mov	r0, sl
 800723e:	7821      	ldrb	r1, [r4, #0]
 8007240:	f7ff fac4 	bl	80067cc <memchr>
 8007244:	b140      	cbz	r0, 8007258 <_vfiprintf_r+0x198>
 8007246:	2340      	movs	r3, #64	; 0x40
 8007248:	eba0 000a 	sub.w	r0, r0, sl
 800724c:	fa03 f000 	lsl.w	r0, r3, r0
 8007250:	9b04      	ldr	r3, [sp, #16]
 8007252:	3401      	adds	r4, #1
 8007254:	4303      	orrs	r3, r0
 8007256:	9304      	str	r3, [sp, #16]
 8007258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800725c:	2206      	movs	r2, #6
 800725e:	482c      	ldr	r0, [pc, #176]	; (8007310 <_vfiprintf_r+0x250>)
 8007260:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007264:	f7ff fab2 	bl	80067cc <memchr>
 8007268:	2800      	cmp	r0, #0
 800726a:	d03f      	beq.n	80072ec <_vfiprintf_r+0x22c>
 800726c:	4b29      	ldr	r3, [pc, #164]	; (8007314 <_vfiprintf_r+0x254>)
 800726e:	bb1b      	cbnz	r3, 80072b8 <_vfiprintf_r+0x1f8>
 8007270:	9b03      	ldr	r3, [sp, #12]
 8007272:	3307      	adds	r3, #7
 8007274:	f023 0307 	bic.w	r3, r3, #7
 8007278:	3308      	adds	r3, #8
 800727a:	9303      	str	r3, [sp, #12]
 800727c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800727e:	443b      	add	r3, r7
 8007280:	9309      	str	r3, [sp, #36]	; 0x24
 8007282:	e767      	b.n	8007154 <_vfiprintf_r+0x94>
 8007284:	460c      	mov	r4, r1
 8007286:	2001      	movs	r0, #1
 8007288:	fb0c 3202 	mla	r2, ip, r2, r3
 800728c:	e7a5      	b.n	80071da <_vfiprintf_r+0x11a>
 800728e:	2300      	movs	r3, #0
 8007290:	f04f 0c0a 	mov.w	ip, #10
 8007294:	4619      	mov	r1, r3
 8007296:	3401      	adds	r4, #1
 8007298:	9305      	str	r3, [sp, #20]
 800729a:	4620      	mov	r0, r4
 800729c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072a0:	3a30      	subs	r2, #48	; 0x30
 80072a2:	2a09      	cmp	r2, #9
 80072a4:	d903      	bls.n	80072ae <_vfiprintf_r+0x1ee>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d0c5      	beq.n	8007236 <_vfiprintf_r+0x176>
 80072aa:	9105      	str	r1, [sp, #20]
 80072ac:	e7c3      	b.n	8007236 <_vfiprintf_r+0x176>
 80072ae:	4604      	mov	r4, r0
 80072b0:	2301      	movs	r3, #1
 80072b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80072b6:	e7f0      	b.n	800729a <_vfiprintf_r+0x1da>
 80072b8:	ab03      	add	r3, sp, #12
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	462a      	mov	r2, r5
 80072be:	4630      	mov	r0, r6
 80072c0:	4b15      	ldr	r3, [pc, #84]	; (8007318 <_vfiprintf_r+0x258>)
 80072c2:	a904      	add	r1, sp, #16
 80072c4:	f7fd fc24 	bl	8004b10 <_printf_float>
 80072c8:	4607      	mov	r7, r0
 80072ca:	1c78      	adds	r0, r7, #1
 80072cc:	d1d6      	bne.n	800727c <_vfiprintf_r+0x1bc>
 80072ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072d0:	07d9      	lsls	r1, r3, #31
 80072d2:	d405      	bmi.n	80072e0 <_vfiprintf_r+0x220>
 80072d4:	89ab      	ldrh	r3, [r5, #12]
 80072d6:	059a      	lsls	r2, r3, #22
 80072d8:	d402      	bmi.n	80072e0 <_vfiprintf_r+0x220>
 80072da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072dc:	f7ff fa08 	bl	80066f0 <__retarget_lock_release_recursive>
 80072e0:	89ab      	ldrh	r3, [r5, #12]
 80072e2:	065b      	lsls	r3, r3, #25
 80072e4:	f53f af12 	bmi.w	800710c <_vfiprintf_r+0x4c>
 80072e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072ea:	e711      	b.n	8007110 <_vfiprintf_r+0x50>
 80072ec:	ab03      	add	r3, sp, #12
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	462a      	mov	r2, r5
 80072f2:	4630      	mov	r0, r6
 80072f4:	4b08      	ldr	r3, [pc, #32]	; (8007318 <_vfiprintf_r+0x258>)
 80072f6:	a904      	add	r1, sp, #16
 80072f8:	f7fd fea6 	bl	8005048 <_printf_i>
 80072fc:	e7e4      	b.n	80072c8 <_vfiprintf_r+0x208>
 80072fe:	bf00      	nop
 8007300:	08007870 	.word	0x08007870
 8007304:	08007890 	.word	0x08007890
 8007308:	08007850 	.word	0x08007850
 800730c:	08007a0c 	.word	0x08007a0c
 8007310:	08007a16 	.word	0x08007a16
 8007314:	08004b11 	.word	0x08004b11
 8007318:	0800709b 	.word	0x0800709b
 800731c:	08007a12 	.word	0x08007a12

08007320 <_sbrk_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	2300      	movs	r3, #0
 8007324:	4d05      	ldr	r5, [pc, #20]	; (800733c <_sbrk_r+0x1c>)
 8007326:	4604      	mov	r4, r0
 8007328:	4608      	mov	r0, r1
 800732a:	602b      	str	r3, [r5, #0]
 800732c:	f7fa fb2e 	bl	800198c <_sbrk>
 8007330:	1c43      	adds	r3, r0, #1
 8007332:	d102      	bne.n	800733a <_sbrk_r+0x1a>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	b103      	cbz	r3, 800733a <_sbrk_r+0x1a>
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	bd38      	pop	{r3, r4, r5, pc}
 800733c:	20000400 	.word	0x20000400

08007340 <__sread>:
 8007340:	b510      	push	{r4, lr}
 8007342:	460c      	mov	r4, r1
 8007344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007348:	f000 f8e2 	bl	8007510 <_read_r>
 800734c:	2800      	cmp	r0, #0
 800734e:	bfab      	itete	ge
 8007350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007352:	89a3      	ldrhlt	r3, [r4, #12]
 8007354:	181b      	addge	r3, r3, r0
 8007356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800735a:	bfac      	ite	ge
 800735c:	6563      	strge	r3, [r4, #84]	; 0x54
 800735e:	81a3      	strhlt	r3, [r4, #12]
 8007360:	bd10      	pop	{r4, pc}

08007362 <__swrite>:
 8007362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007366:	461f      	mov	r7, r3
 8007368:	898b      	ldrh	r3, [r1, #12]
 800736a:	4605      	mov	r5, r0
 800736c:	05db      	lsls	r3, r3, #23
 800736e:	460c      	mov	r4, r1
 8007370:	4616      	mov	r6, r2
 8007372:	d505      	bpl.n	8007380 <__swrite+0x1e>
 8007374:	2302      	movs	r3, #2
 8007376:	2200      	movs	r2, #0
 8007378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800737c:	f000 f898 	bl	80074b0 <_lseek_r>
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	4632      	mov	r2, r6
 8007384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007388:	81a3      	strh	r3, [r4, #12]
 800738a:	4628      	mov	r0, r5
 800738c:	463b      	mov	r3, r7
 800738e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007396:	f000 b817 	b.w	80073c8 <_write_r>

0800739a <__sseek>:
 800739a:	b510      	push	{r4, lr}
 800739c:	460c      	mov	r4, r1
 800739e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a2:	f000 f885 	bl	80074b0 <_lseek_r>
 80073a6:	1c43      	adds	r3, r0, #1
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	bf15      	itete	ne
 80073ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80073ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073b6:	81a3      	strheq	r3, [r4, #12]
 80073b8:	bf18      	it	ne
 80073ba:	81a3      	strhne	r3, [r4, #12]
 80073bc:	bd10      	pop	{r4, pc}

080073be <__sclose>:
 80073be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c2:	f000 b831 	b.w	8007428 <_close_r>
	...

080073c8 <_write_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	4604      	mov	r4, r0
 80073cc:	4608      	mov	r0, r1
 80073ce:	4611      	mov	r1, r2
 80073d0:	2200      	movs	r2, #0
 80073d2:	4d05      	ldr	r5, [pc, #20]	; (80073e8 <_write_r+0x20>)
 80073d4:	602a      	str	r2, [r5, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	f7fa fa8c 	bl	80018f4 <_write>
 80073dc:	1c43      	adds	r3, r0, #1
 80073de:	d102      	bne.n	80073e6 <_write_r+0x1e>
 80073e0:	682b      	ldr	r3, [r5, #0]
 80073e2:	b103      	cbz	r3, 80073e6 <_write_r+0x1e>
 80073e4:	6023      	str	r3, [r4, #0]
 80073e6:	bd38      	pop	{r3, r4, r5, pc}
 80073e8:	20000400 	.word	0x20000400

080073ec <__assert_func>:
 80073ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073ee:	4614      	mov	r4, r2
 80073f0:	461a      	mov	r2, r3
 80073f2:	4b09      	ldr	r3, [pc, #36]	; (8007418 <__assert_func+0x2c>)
 80073f4:	4605      	mov	r5, r0
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68d8      	ldr	r0, [r3, #12]
 80073fa:	b14c      	cbz	r4, 8007410 <__assert_func+0x24>
 80073fc:	4b07      	ldr	r3, [pc, #28]	; (800741c <__assert_func+0x30>)
 80073fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007402:	9100      	str	r1, [sp, #0]
 8007404:	462b      	mov	r3, r5
 8007406:	4906      	ldr	r1, [pc, #24]	; (8007420 <__assert_func+0x34>)
 8007408:	f000 f81e 	bl	8007448 <fiprintf>
 800740c:	f000 f89f 	bl	800754e <abort>
 8007410:	4b04      	ldr	r3, [pc, #16]	; (8007424 <__assert_func+0x38>)
 8007412:	461c      	mov	r4, r3
 8007414:	e7f3      	b.n	80073fe <__assert_func+0x12>
 8007416:	bf00      	nop
 8007418:	20000010 	.word	0x20000010
 800741c:	08007a1d 	.word	0x08007a1d
 8007420:	08007a2a 	.word	0x08007a2a
 8007424:	08007a58 	.word	0x08007a58

08007428 <_close_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	2300      	movs	r3, #0
 800742c:	4d05      	ldr	r5, [pc, #20]	; (8007444 <_close_r+0x1c>)
 800742e:	4604      	mov	r4, r0
 8007430:	4608      	mov	r0, r1
 8007432:	602b      	str	r3, [r5, #0]
 8007434:	f7fa fa7a 	bl	800192c <_close>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	d102      	bne.n	8007442 <_close_r+0x1a>
 800743c:	682b      	ldr	r3, [r5, #0]
 800743e:	b103      	cbz	r3, 8007442 <_close_r+0x1a>
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	bd38      	pop	{r3, r4, r5, pc}
 8007444:	20000400 	.word	0x20000400

08007448 <fiprintf>:
 8007448:	b40e      	push	{r1, r2, r3}
 800744a:	b503      	push	{r0, r1, lr}
 800744c:	4601      	mov	r1, r0
 800744e:	ab03      	add	r3, sp, #12
 8007450:	4805      	ldr	r0, [pc, #20]	; (8007468 <fiprintf+0x20>)
 8007452:	f853 2b04 	ldr.w	r2, [r3], #4
 8007456:	6800      	ldr	r0, [r0, #0]
 8007458:	9301      	str	r3, [sp, #4]
 800745a:	f7ff fe31 	bl	80070c0 <_vfiprintf_r>
 800745e:	b002      	add	sp, #8
 8007460:	f85d eb04 	ldr.w	lr, [sp], #4
 8007464:	b003      	add	sp, #12
 8007466:	4770      	bx	lr
 8007468:	20000010 	.word	0x20000010

0800746c <_fstat_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	2300      	movs	r3, #0
 8007470:	4d06      	ldr	r5, [pc, #24]	; (800748c <_fstat_r+0x20>)
 8007472:	4604      	mov	r4, r0
 8007474:	4608      	mov	r0, r1
 8007476:	4611      	mov	r1, r2
 8007478:	602b      	str	r3, [r5, #0]
 800747a:	f7fa fa62 	bl	8001942 <_fstat>
 800747e:	1c43      	adds	r3, r0, #1
 8007480:	d102      	bne.n	8007488 <_fstat_r+0x1c>
 8007482:	682b      	ldr	r3, [r5, #0]
 8007484:	b103      	cbz	r3, 8007488 <_fstat_r+0x1c>
 8007486:	6023      	str	r3, [r4, #0]
 8007488:	bd38      	pop	{r3, r4, r5, pc}
 800748a:	bf00      	nop
 800748c:	20000400 	.word	0x20000400

08007490 <_isatty_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	2300      	movs	r3, #0
 8007494:	4d05      	ldr	r5, [pc, #20]	; (80074ac <_isatty_r+0x1c>)
 8007496:	4604      	mov	r4, r0
 8007498:	4608      	mov	r0, r1
 800749a:	602b      	str	r3, [r5, #0]
 800749c:	f7fa fa60 	bl	8001960 <_isatty>
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	d102      	bne.n	80074aa <_isatty_r+0x1a>
 80074a4:	682b      	ldr	r3, [r5, #0]
 80074a6:	b103      	cbz	r3, 80074aa <_isatty_r+0x1a>
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
 80074ac:	20000400 	.word	0x20000400

080074b0 <_lseek_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4604      	mov	r4, r0
 80074b4:	4608      	mov	r0, r1
 80074b6:	4611      	mov	r1, r2
 80074b8:	2200      	movs	r2, #0
 80074ba:	4d05      	ldr	r5, [pc, #20]	; (80074d0 <_lseek_r+0x20>)
 80074bc:	602a      	str	r2, [r5, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	f7fa fa58 	bl	8001974 <_lseek>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_lseek_r+0x1e>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_lseek_r+0x1e>
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	20000400 	.word	0x20000400

080074d4 <__ascii_mbtowc>:
 80074d4:	b082      	sub	sp, #8
 80074d6:	b901      	cbnz	r1, 80074da <__ascii_mbtowc+0x6>
 80074d8:	a901      	add	r1, sp, #4
 80074da:	b142      	cbz	r2, 80074ee <__ascii_mbtowc+0x1a>
 80074dc:	b14b      	cbz	r3, 80074f2 <__ascii_mbtowc+0x1e>
 80074de:	7813      	ldrb	r3, [r2, #0]
 80074e0:	600b      	str	r3, [r1, #0]
 80074e2:	7812      	ldrb	r2, [r2, #0]
 80074e4:	1e10      	subs	r0, r2, #0
 80074e6:	bf18      	it	ne
 80074e8:	2001      	movne	r0, #1
 80074ea:	b002      	add	sp, #8
 80074ec:	4770      	bx	lr
 80074ee:	4610      	mov	r0, r2
 80074f0:	e7fb      	b.n	80074ea <__ascii_mbtowc+0x16>
 80074f2:	f06f 0001 	mvn.w	r0, #1
 80074f6:	e7f8      	b.n	80074ea <__ascii_mbtowc+0x16>

080074f8 <__malloc_lock>:
 80074f8:	4801      	ldr	r0, [pc, #4]	; (8007500 <__malloc_lock+0x8>)
 80074fa:	f7ff b8f8 	b.w	80066ee <__retarget_lock_acquire_recursive>
 80074fe:	bf00      	nop
 8007500:	200003f8 	.word	0x200003f8

08007504 <__malloc_unlock>:
 8007504:	4801      	ldr	r0, [pc, #4]	; (800750c <__malloc_unlock+0x8>)
 8007506:	f7ff b8f3 	b.w	80066f0 <__retarget_lock_release_recursive>
 800750a:	bf00      	nop
 800750c:	200003f8 	.word	0x200003f8

08007510 <_read_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4604      	mov	r4, r0
 8007514:	4608      	mov	r0, r1
 8007516:	4611      	mov	r1, r2
 8007518:	2200      	movs	r2, #0
 800751a:	4d05      	ldr	r5, [pc, #20]	; (8007530 <_read_r+0x20>)
 800751c:	602a      	str	r2, [r5, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	f7fa f9cb 	bl	80018ba <_read>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d102      	bne.n	800752e <_read_r+0x1e>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	b103      	cbz	r3, 800752e <_read_r+0x1e>
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	20000400 	.word	0x20000400

08007534 <__ascii_wctomb>:
 8007534:	4603      	mov	r3, r0
 8007536:	4608      	mov	r0, r1
 8007538:	b141      	cbz	r1, 800754c <__ascii_wctomb+0x18>
 800753a:	2aff      	cmp	r2, #255	; 0xff
 800753c:	d904      	bls.n	8007548 <__ascii_wctomb+0x14>
 800753e:	228a      	movs	r2, #138	; 0x8a
 8007540:	f04f 30ff 	mov.w	r0, #4294967295
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	4770      	bx	lr
 8007548:	2001      	movs	r0, #1
 800754a:	700a      	strb	r2, [r1, #0]
 800754c:	4770      	bx	lr

0800754e <abort>:
 800754e:	2006      	movs	r0, #6
 8007550:	b508      	push	{r3, lr}
 8007552:	f000 f82b 	bl	80075ac <raise>
 8007556:	2001      	movs	r0, #1
 8007558:	f7fa f9a5 	bl	80018a6 <_exit>

0800755c <_raise_r>:
 800755c:	291f      	cmp	r1, #31
 800755e:	b538      	push	{r3, r4, r5, lr}
 8007560:	4604      	mov	r4, r0
 8007562:	460d      	mov	r5, r1
 8007564:	d904      	bls.n	8007570 <_raise_r+0x14>
 8007566:	2316      	movs	r3, #22
 8007568:	6003      	str	r3, [r0, #0]
 800756a:	f04f 30ff 	mov.w	r0, #4294967295
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007572:	b112      	cbz	r2, 800757a <_raise_r+0x1e>
 8007574:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007578:	b94b      	cbnz	r3, 800758e <_raise_r+0x32>
 800757a:	4620      	mov	r0, r4
 800757c:	f000 f830 	bl	80075e0 <_getpid_r>
 8007580:	462a      	mov	r2, r5
 8007582:	4601      	mov	r1, r0
 8007584:	4620      	mov	r0, r4
 8007586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800758a:	f000 b817 	b.w	80075bc <_kill_r>
 800758e:	2b01      	cmp	r3, #1
 8007590:	d00a      	beq.n	80075a8 <_raise_r+0x4c>
 8007592:	1c59      	adds	r1, r3, #1
 8007594:	d103      	bne.n	800759e <_raise_r+0x42>
 8007596:	2316      	movs	r3, #22
 8007598:	6003      	str	r3, [r0, #0]
 800759a:	2001      	movs	r0, #1
 800759c:	e7e7      	b.n	800756e <_raise_r+0x12>
 800759e:	2400      	movs	r4, #0
 80075a0:	4628      	mov	r0, r5
 80075a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80075a6:	4798      	blx	r3
 80075a8:	2000      	movs	r0, #0
 80075aa:	e7e0      	b.n	800756e <_raise_r+0x12>

080075ac <raise>:
 80075ac:	4b02      	ldr	r3, [pc, #8]	; (80075b8 <raise+0xc>)
 80075ae:	4601      	mov	r1, r0
 80075b0:	6818      	ldr	r0, [r3, #0]
 80075b2:	f7ff bfd3 	b.w	800755c <_raise_r>
 80075b6:	bf00      	nop
 80075b8:	20000010 	.word	0x20000010

080075bc <_kill_r>:
 80075bc:	b538      	push	{r3, r4, r5, lr}
 80075be:	2300      	movs	r3, #0
 80075c0:	4d06      	ldr	r5, [pc, #24]	; (80075dc <_kill_r+0x20>)
 80075c2:	4604      	mov	r4, r0
 80075c4:	4608      	mov	r0, r1
 80075c6:	4611      	mov	r1, r2
 80075c8:	602b      	str	r3, [r5, #0]
 80075ca:	f7fa f95c 	bl	8001886 <_kill>
 80075ce:	1c43      	adds	r3, r0, #1
 80075d0:	d102      	bne.n	80075d8 <_kill_r+0x1c>
 80075d2:	682b      	ldr	r3, [r5, #0]
 80075d4:	b103      	cbz	r3, 80075d8 <_kill_r+0x1c>
 80075d6:	6023      	str	r3, [r4, #0]
 80075d8:	bd38      	pop	{r3, r4, r5, pc}
 80075da:	bf00      	nop
 80075dc:	20000400 	.word	0x20000400

080075e0 <_getpid_r>:
 80075e0:	f7fa b94a 	b.w	8001878 <_getpid>

080075e4 <_init>:
 80075e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e6:	bf00      	nop
 80075e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ea:	bc08      	pop	{r3}
 80075ec:	469e      	mov	lr, r3
 80075ee:	4770      	bx	lr

080075f0 <_fini>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	bf00      	nop
 80075f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f6:	bc08      	pop	{r3}
 80075f8:	469e      	mov	lr, r3
 80075fa:	4770      	bx	lr
